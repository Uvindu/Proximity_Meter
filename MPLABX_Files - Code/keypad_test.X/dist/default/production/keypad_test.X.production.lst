

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Mon Dec 12 23:50:46 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	psect	text10,local,class=CODE,merge=1,delta=2
    19                           	psect	text11,local,class=CODE,merge=1,delta=2
    20                           	dabs	1,0x7E,2
    21  0000                     	;# 
    22  0001                     	;# 
    23  0002                     	;# 
    24  0003                     	;# 
    25  0004                     	;# 
    26  0005                     	;# 
    27  0006                     	;# 
    28  0007                     	;# 
    29  0008                     	;# 
    30  0009                     	;# 
    31  000A                     	;# 
    32  000B                     	;# 
    33  000C                     	;# 
    34  000D                     	;# 
    35  000E                     	;# 
    36  000E                     	;# 
    37  000F                     	;# 
    38  0010                     	;# 
    39  0011                     	;# 
    40  0012                     	;# 
    41  0013                     	;# 
    42  0014                     	;# 
    43  0015                     	;# 
    44  0015                     	;# 
    45  0016                     	;# 
    46  0017                     	;# 
    47  0018                     	;# 
    48  0019                     	;# 
    49  001A                     	;# 
    50  001B                     	;# 
    51  001B                     	;# 
    52  001C                     	;# 
    53  001D                     	;# 
    54  001E                     	;# 
    55  001F                     	;# 
    56  0081                     	;# 
    57  0085                     	;# 
    58  0086                     	;# 
    59  0087                     	;# 
    60  0088                     	;# 
    61  0089                     	;# 
    62  008C                     	;# 
    63  008D                     	;# 
    64  008E                     	;# 
    65  008F                     	;# 
    66  0090                     	;# 
    67  0091                     	;# 
    68  0092                     	;# 
    69  0093                     	;# 
    70  0093                     	;# 
    71  0093                     	;# 
    72  0094                     	;# 
    73  0095                     	;# 
    74  0096                     	;# 
    75  0097                     	;# 
    76  0098                     	;# 
    77  0099                     	;# 
    78  009A                     	;# 
    79  009B                     	;# 
    80  009C                     	;# 
    81  009D                     	;# 
    82  009E                     	;# 
    83  009F                     	;# 
    84  0105                     	;# 
    85  0107                     	;# 
    86  0108                     	;# 
    87  0109                     	;# 
    88  010C                     	;# 
    89  010C                     	;# 
    90  010D                     	;# 
    91  010E                     	;# 
    92  010F                     	;# 
    93  0185                     	;# 
    94  0187                     	;# 
    95  0188                     	;# 
    96  0189                     	;# 
    97  018C                     	;# 
    98  018D                     	;# 
    99  0006                     _PORTB	set	6
   100  0034                     _RB4	set	52
   101  0035                     _RB5	set	53
   102  0036                     _RB6	set	54
   103  0037                     _RB7	set	55
   104  0042                     _RD2	set	66
   105  0043                     _RD3	set	67
   106  0044                     _RD4	set	68
   107  0045                     _RD5	set	69
   108  0046                     _RD6	set	70
   109  0047                     _RD7	set	71
   110  0086                     _TRISB	set	134
   111  0088                     _TRISD	set	136
   112  0188                     _ANSEL	set	392
   113  0189                     _ANSELH	set	393
   114                           
   115                           	psect	strings
   116  0003                     __pstrings:	
   117  0003                     stringtab:	
   118  0003                     __stringtab:	
   119  0003                     stringcode:	
   120                           ;	String table - string pointers are 1 byte each
   121                           
   122  0003                     stringdir:	
   123  0003  3000               	movlw	high stringdir
   124  0004  008A               	movwf	10
   125  0005  0804               	movf	4,w
   126  0006  0A84               	incf	4,f
   127  0007  0782               	addwf	2,f
   128  0008                     __stringbase:	
   129  0008  3400               	retlw	0
   130  0009                     __end_of__stringtab:	
   131  0009                     STR_1:	
   132  0009  3457               	retlw	87	;'W'
   133  000A  3445               	retlw	69	;'E'
   134  000B  344C               	retlw	76	;'L'
   135  000C  3443               	retlw	67	;'C'
   136  000D  344F               	retlw	79	;'O'
   137  000E  344D               	retlw	77	;'M'
   138  000F  3445               	retlw	69	;'E'
   139  0010  3400               	retlw	0
   140                           
   141                           ; #config settings
   142  0000                     
   143                           	psect	cinit
   144  07FC                     start_initialization:	
   145  07FC                     __initialization:	
   146  07FC                     end_of_initialization:	
   147                           ;End of C runtime variable initialization code
   148                           
   149  07FC                     __end_of__initialization:	
   150  07FC  0183               	clrf	3
   151  07FD  120A  118A  2E5E   	ljmp	_main	;jump to C main() function
   152                           
   153                           	psect	cstackCOMMON
   154  0070                     __pcstackCOMMON:	
   155  0070                     ?_Lcd_Config:	
   156  0070                     ??_Lcd_Config:	
   157                           ; 1 bytes @ 0x0
   158                           
   159  0070                     ?_Lcd_Port:	
   160                           ; 1 bytes @ 0x0
   161                           
   162  0070                     ??_Lcd_Port:	
   163                           ; 1 bytes @ 0x0
   164                           
   165  0070                     ?_Lcd_Cmd:	
   166                           ; 1 bytes @ 0x0
   167                           
   168  0070                     ?_Lcd_Clear:	
   169                           ; 1 bytes @ 0x0
   170                           
   171  0070                     ?_Lcd_Init:	
   172                           ; 1 bytes @ 0x0
   173                           
   174  0070                     ?_Lcd_Write_Char:	
   175                           ; 1 bytes @ 0x0
   176                           
   177  0070                     ?_Lcd_Write_String:	
   178                           ; 1 bytes @ 0x0
   179                           
   180  0070                     ?_Keypad_Init:	
   181                           ; 1 bytes @ 0x0
   182                           
   183  0070                     ??_Keypad_Init:	
   184                           ; 1 bytes @ 0x0
   185                           
   186  0070                     ?_findKey:	
   187                           ; 1 bytes @ 0x0
   188                           
   189  0070                     ?_readKeyboard:	
   190                           ; 1 bytes @ 0x0
   191                           
   192  0070                     ?_main:	
   193                           ; 1 bytes @ 0x0
   194                           
   195  0070                     Lcd_Port@a:	
   196                           ; 1 bytes @ 0x0
   197                           
   198  0070                     findKey@a:	
   199                           ; 1 bytes @ 0x0
   200                           
   201                           
   202                           ; 2 bytes @ 0x0
   203  0070                     	ds	1
   204  0071                     ??_Lcd_Cmd:	
   205  0071                     ??_Lcd_Write_Char:	
   206                           ; 1 bytes @ 0x1
   207                           
   208                           
   209                           ; 1 bytes @ 0x1
   210  0071                     	ds	1
   211  0072                     Lcd_Write_Char@temp:	
   212  0072                     findKey@b:	
   213                           ; 1 bytes @ 0x2
   214                           
   215                           
   216                           ; 2 bytes @ 0x2
   217  0072                     	ds	1
   218  0073                     Lcd_Cmd@a:	
   219  0073                     Lcd_Write_Char@y:	
   220                           ; 1 bytes @ 0x3
   221                           
   222                           
   223                           ; 1 bytes @ 0x3
   224  0073                     	ds	1
   225  0074                     ??_Lcd_Clear:	
   226  0074                     ?_Lcd_Set_Cursor:	
   227                           ; 1 bytes @ 0x4
   228                           
   229  0074                     ??_Lcd_Init:	
   230                           ; 1 bytes @ 0x4
   231                           
   232  0074                     ??_findKey:	
   233                           ; 1 bytes @ 0x4
   234                           
   235  0074                     ??_readKeyboard:	
   236                           ; 1 bytes @ 0x4
   237                           
   238  0074                     Lcd_Set_Cursor@b:	
   239                           ; 1 bytes @ 0x4
   240                           
   241  0074                     Lcd_Write_Char@a:	
   242                           ; 1 bytes @ 0x4
   243                           
   244  0074                     readKeyboard@i:	
   245                           ; 1 bytes @ 0x4
   246                           
   247                           
   248                           ; 2 bytes @ 0x4
   249  0074                     	ds	1
   250  0075                     ??_Lcd_Set_Cursor:	
   251  0075                     ??_Lcd_Write_String:	
   252                           ; 1 bytes @ 0x5
   253                           
   254  0075                     Lcd_Write_String@i:	
   255                           ; 1 bytes @ 0x5
   256                           
   257                           
   258                           ; 2 bytes @ 0x5
   259  0075                     	ds	2
   260  0077                     Lcd_Set_Cursor@a:	
   261  0077                     Lcd_Write_String@a:	
   262                           ; 1 bytes @ 0x7
   263                           
   264                           
   265                           ; 1 bytes @ 0x7
   266  0077                     	ds	1
   267  0078                     Lcd_Set_Cursor@z:	
   268                           
   269                           ; 1 bytes @ 0x8
   270  0078                     	ds	1
   271  0079                     Lcd_Set_Cursor@y:	
   272                           
   273                           ; 1 bytes @ 0x9
   274  0079                     	ds	1
   275  007A                     Lcd_Set_Cursor@temp:	
   276                           
   277                           ; 1 bytes @ 0xA
   278  007A                     	ds	1
   279  007B                     ??_main:	
   280                           
   281                           ; 1 bytes @ 0xB
   282  007B                     	ds	3
   283                           
   284                           	psect	cstackBANK0
   285  0020                     __pcstackBANK0:	
   286  0020                     main@key:	
   287                           
   288                           ; 1 bytes @ 0x0
   289  0020                     	ds	1
   290                           
   291                           	psect	maintext
   292  065E                     __pmaintext:	
   293 ;;
   294 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   295 ;;
   296 ;; *************** function _main *****************
   297 ;; Defined at:
   298 ;;		line 25 in file "test.c"
   299 ;; Parameters:    Size  Location     Type
   300 ;;		None
   301 ;; Auto vars:     Size  Location     Type
   302 ;;  key             1    0[BANK0 ] unsigned char 
   303 ;; Return value:  Size  Location     Type
   304 ;;                  1    wreg      void 
   305 ;; Registers used:
   306 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   307 ;; Tracked objects:
   308 ;;		On entry : B00/0
   309 ;;		On exit  : 0/0
   310 ;;		Unchanged: 0/0
   311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   312 ;;      Params:         0       0       0       0       0
   313 ;;      Locals:         0       1       0       0       0
   314 ;;      Temps:          3       0       0       0       0
   315 ;;      Totals:         3       1       0       0       0
   316 ;;Total ram usage:        4 bytes
   317 ;; Hardware stack levels required when called:    3
   318 ;; This function calls:
   319 ;;		_Keypad_Init
   320 ;;		_Lcd_Clear
   321 ;;		_Lcd_Config
   322 ;;		_Lcd_Init
   323 ;;		_Lcd_Set_Cursor
   324 ;;		_Lcd_Write_Char
   325 ;;		_Lcd_Write_String
   326 ;;		_readKeyboard
   327 ;; This function is called by:
   328 ;;		Startup code after reset
   329 ;; This function uses a non-reentrant model
   330 ;;
   331                           
   332                           
   333                           ;psect for function _main
   334  065E                     _main:	
   335                           
   336                           ;test.c: 26: char key;
   337                           ;test.c: 27: Keypad_Init();
   338                           
   339                           ;incstack = 0
   340                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   341  065E  120A  118A  2579  120A  118A  	fcall	_Keypad_Init
   342                           
   343                           ;test.c: 28: Lcd_Config();
   344  0663  120A  118A  256A  120A  118A  	fcall	_Lcd_Config
   345                           
   346                           ;test.c: 29: Lcd_Init();
   347  0668  120A  118A  26B6  120A  118A  	fcall	_Lcd_Init
   348                           
   349                           ;test.c: 30: Lcd_Clear();
   350  066D  120A  118A  256E  120A  118A  	fcall	_Lcd_Clear
   351                           
   352                           ;test.c: 31: Lcd_Set_Cursor(1,1);
   353  0672  01F4               	clrf	Lcd_Set_Cursor@b
   354  0673  0AF4               	incf	Lcd_Set_Cursor@b,f
   355  0674  3001               	movlw	1
   356  0675  120A  118A  2614  120A  118A  	fcall	_Lcd_Set_Cursor
   357                           
   358                           ;test.c: 32: Lcd_Write_String("WELCOME");
   359  067A  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   360  067B  120A  118A  25B9  120A  118A  	fcall	_Lcd_Write_String
   361                           
   362                           ;test.c: 33: _delay((unsigned long)((2000)*(8000000/4000.0)));
   363  0680  3015               	movlw	21
   364  0681  00FD               	movwf	??_main+2
   365  0682  304B               	movlw	75
   366  0683  00FC               	movwf	??_main+1
   367  0684  30D1               	movlw	209
   368  0685  00FB               	movwf	??_main
   369  0686                     u837:	
   370  0686  0BFB               	decfsz	??_main,f
   371  0687  2E86               	goto	u837
   372  0688  0BFC               	decfsz	??_main+1,f
   373  0689  2E86               	goto	u837
   374  068A  0BFD               	decfsz	??_main+2,f
   375  068B  2E86               	goto	u837
   376  068C  0000               	nop
   377                           
   378                           ;test.c: 34: Lcd_Clear();
   379  068D  120A  118A  256E  120A  118A  	fcall	_Lcd_Clear
   380  0692                     l1182:	
   381                           ;test.c: 35: while(1)
   382                           
   383                           
   384                           ;test.c: 36: {
   385                           ;test.c: 39: key=readKeyboard();
   386  0692  120A  118A  2711  120A  118A  	fcall	_readKeyboard
   387  0697  00FB               	movwf	??_main
   388  0698  087B               	movf	??_main,w
   389  0699  1283               	bcf	3,5	;RP0=0, select bank0
   390  069A  1303               	bcf	3,6	;RP1=0, select bank0
   391  069B  00A0               	movwf	main@key
   392                           
   393                           ;test.c: 40: if (key!=' ')
   394  069C  3020               	movlw	32
   395  069D  0620               	xorwf	main@key,w
   396  069E  1903               	btfsc	3,2
   397  069F  2E92               	goto	l1182
   398                           
   399                           ;test.c: 41: {
   400                           ;test.c: 42: Lcd_Clear();
   401  06A0  120A  118A  256E  120A  118A  	fcall	_Lcd_Clear
   402                           
   403                           ;test.c: 43: Lcd_Set_Cursor(1,1);
   404  06A5  01F4               	clrf	Lcd_Set_Cursor@b
   405  06A6  0AF4               	incf	Lcd_Set_Cursor@b,f
   406  06A7  3001               	movlw	1
   407  06A8  120A  118A  2614  120A  118A  	fcall	_Lcd_Set_Cursor
   408                           
   409                           ;test.c: 44: Lcd_Write_Char(key);
   410  06AD  1283               	bcf	3,5	;RP0=0, select bank0
   411  06AE  1303               	bcf	3,6	;RP1=0, select bank0
   412  06AF  0820               	movf	main@key,w
   413  06B0  120A  118A  25DB  120A  118A  	fcall	_Lcd_Write_Char
   414  06B5  2E92               	goto	l1182
   415  06B6                     __end_of_main:	
   416                           
   417                           	psect	text1
   418  0711                     __ptext1:	
   419 ;; *************** function _readKeyboard *****************
   420 ;; Defined at:
   421 ;;		line 58 in file "keypad.h"
   422 ;; Parameters:    Size  Location     Type
   423 ;;		None
   424 ;; Auto vars:     Size  Location     Type
   425 ;;  i               2    4[COMMON] unsigned int 
   426 ;; Return value:  Size  Location     Type
   427 ;;                  1    wreg      unsigned char 
   428 ;; Registers used:
   429 ;;		wreg, status,2, status,0, pclath, cstack
   430 ;; Tracked objects:
   431 ;;		On entry : 0/0
   432 ;;		On exit  : 0/0
   433 ;;		Unchanged: 0/0
   434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   435 ;;      Params:         0       0       0       0       0
   436 ;;      Locals:         2       0       0       0       0
   437 ;;      Temps:          0       0       0       0       0
   438 ;;      Totals:         2       0       0       0       0
   439 ;;Total ram usage:        2 bytes
   440 ;; Hardware stack levels used:    1
   441 ;; Hardware stack levels required when called:    1
   442 ;; This function calls:
   443 ;;		_findKey
   444 ;; This function is called by:
   445 ;;		_main
   446 ;; This function uses a non-reentrant model
   447 ;;
   448                           
   449                           
   450                           ;psect for function _readKeyboard
   451  0711                     _readKeyboard:	
   452                           
   453                           ;keypad.h: 60: unsigned int i = 0;
   454                           
   455                           ;incstack = 0
   456                           ; Regs used in _readKeyboard: [wreg+status,2+status,0+pclath+cstack]
   457  0711  01F4               	clrf	readKeyboard@i
   458  0712  01F5               	clrf	readKeyboard@i+1
   459                           
   460                           ;keypad.h: 61: for(i=0;i<4;i++)
   461  0713  01F4               	clrf	readKeyboard@i
   462  0714  01F5               	clrf	readKeyboard@i+1
   463  0715  3000               	movlw	0
   464  0716  0275               	subwf	readKeyboard@i+1,w
   465  0717  3004               	movlw	4
   466  0718  1903               	skipnz
   467  0719  0274               	subwf	readKeyboard@i,w
   468  071A  1803               	btfsc	3,0
   469  071B  2F7E               	goto	l1158
   470  071C                     l1122:	
   471                           
   472                           ;keypad.h: 62: {
   473                           ;keypad.h: 63: if(i == 0)
   474  071C  0874               	movf	readKeyboard@i,w
   475  071D  0475               	iorwf	readKeyboard@i+1,w
   476  071E  1D03               	btfss	3,2
   477  071F  2F22               	goto	l1126
   478                           
   479                           ;keypad.h: 64: PORTB = 1;
   480  0720  3001               	movlw	1
   481  0721  2F35               	goto	L3
   482  0722                     l1126:	
   483                           
   484                           ;keypad.h: 65: else if(i == 1)
   485  0722  0374               	decf	readKeyboard@i,w
   486  0723  0475               	iorwf	readKeyboard@i+1,w
   487  0724  1D03               	btfss	3,2
   488  0725  2F28               	goto	l1130
   489                           
   490                           ;keypad.h: 66: PORTB = 2;
   491  0726  3002               	movlw	2
   492  0727  2F35               	goto	L3
   493  0728                     l1130:	
   494                           
   495                           ;keypad.h: 67: else if(i == 2)
   496  0728  3002               	movlw	2
   497  0729  0674               	xorwf	readKeyboard@i,w
   498  072A  0475               	iorwf	readKeyboard@i+1,w
   499  072B  1D03               	btfss	3,2
   500  072C  2F2F               	goto	l1134
   501                           
   502                           ;keypad.h: 68: PORTB = 4;
   503  072D  3004               	movlw	4
   504  072E  2F35               	goto	L3
   505  072F                     l1134:	
   506                           
   507                           ;keypad.h: 69: else if(i == 3)
   508  072F  3003               	movlw	3
   509  0730  0674               	xorwf	readKeyboard@i,w
   510  0731  0475               	iorwf	readKeyboard@i+1,w
   511  0732  1D03               	btfss	3,2
   512  0733  2F38               	goto	l1138
   513                           
   514                           ;keypad.h: 70: PORTB = 8;
   515  0734  3008               	movlw	8
   516  0735                     L3:	
   517  0735  1283               	bcf	3,5	;RP0=0, select bank0
   518  0736  1303               	bcf	3,6	;RP1=0, select bank0
   519  0737  0086               	movwf	6	;volatile
   520  0738                     l1138:	
   521                           
   522                           ;keypad.h: 72: if(RB4)
   523  0738  1283               	bcf	3,5	;RP0=0, select bank0
   524  0739  1303               	bcf	3,6	;RP1=0, select bank0
   525  073A  1E06               	btfss	6,4	;volatile
   526  073B  2F47               	goto	l129
   527                           
   528                           ;keypad.h: 73: return findKey(0,i);
   529  073C  3000               	movlw	0
   530  073D  00F0               	movwf	findKey@a
   531  073E  00F1               	movwf	findKey@a+1
   532  073F  0875               	movf	readKeyboard@i+1,w
   533  0740  00F3               	movwf	findKey@b+1
   534  0741  0874               	movf	readKeyboard@i,w
   535  0742  00F2               	movwf	findKey@b
   536  0743  120A  118A  2780   	fcall	_findKey
   537  0746  0008               	return
   538  0747                     l129:	
   539                           
   540                           ;keypad.h: 74: if(RB5)
   541  0747  1E86               	btfss	6,5	;volatile
   542  0748  2F55               	goto	l131
   543                           
   544                           ;keypad.h: 75: return findKey(1,i);
   545  0749  3001               	movlw	1
   546  074A  00F0               	movwf	findKey@a
   547  074B  3000               	movlw	0
   548  074C  00F1               	movwf	findKey@a+1
   549  074D  0875               	movf	readKeyboard@i+1,w
   550  074E  00F3               	movwf	findKey@b+1
   551  074F  0874               	movf	readKeyboard@i,w
   552  0750  00F2               	movwf	findKey@b
   553  0751  120A  118A  2780   	fcall	_findKey
   554  0754  0008               	return
   555  0755                     l131:	
   556                           
   557                           ;keypad.h: 76: if(RB6)
   558  0755  1F06               	btfss	6,6	;volatile
   559  0756  2F63               	goto	l132
   560                           
   561                           ;keypad.h: 77: return findKey(2,i);
   562  0757  3002               	movlw	2
   563  0758  00F0               	movwf	findKey@a
   564  0759  3000               	movlw	0
   565  075A  00F1               	movwf	findKey@a+1
   566  075B  0875               	movf	readKeyboard@i+1,w
   567  075C  00F3               	movwf	findKey@b+1
   568  075D  0874               	movf	readKeyboard@i,w
   569  075E  00F2               	movwf	findKey@b
   570  075F  120A  118A  2780   	fcall	_findKey
   571  0762  0008               	return
   572  0763                     l132:	
   573                           
   574                           ;keypad.h: 78: if(RB7)
   575  0763  1F86               	btfss	6,7	;volatile
   576  0764  2F71               	goto	l1156
   577                           
   578                           ;keypad.h: 79: return findKey(3,i);
   579  0765  3003               	movlw	3
   580  0766  00F0               	movwf	findKey@a
   581  0767  3000               	movlw	0
   582  0768  00F1               	movwf	findKey@a+1
   583  0769  0875               	movf	readKeyboard@i+1,w
   584  076A  00F3               	movwf	findKey@b+1
   585  076B  0874               	movf	readKeyboard@i,w
   586  076C  00F2               	movwf	findKey@b
   587  076D  120A  118A  2780   	fcall	_findKey
   588  0770  0008               	return
   589  0771                     l1156:	
   590  0771  3001               	movlw	1
   591  0772  07F4               	addwf	readKeyboard@i,f
   592  0773  1803               	skipnc
   593  0774  0AF5               	incf	readKeyboard@i+1,f
   594  0775  3000               	movlw	0
   595  0776  07F5               	addwf	readKeyboard@i+1,f
   596  0777  3000               	movlw	0
   597  0778  0275               	subwf	readKeyboard@i+1,w
   598  0779  3004               	movlw	4
   599  077A  1903               	skipnz
   600  077B  0274               	subwf	readKeyboard@i,w
   601  077C  1C03               	skipc
   602  077D  2F1C               	goto	l1122
   603  077E                     l1158:	
   604                           
   605                           ;keypad.h: 80: }
   606                           ;keypad.h: 81: return ' ';
   607  077E  3020               	movlw	32
   608  077F  0008               	return
   609  0780                     __end_of_readKeyboard:	
   610                           
   611                           	psect	text2
   612  0780                     __ptext2:	
   613 ;; *************** function _findKey *****************
   614 ;; Defined at:
   615 ;;		line 9 in file "keypad.h"
   616 ;; Parameters:    Size  Location     Type
   617 ;;  a               2    0[COMMON] unsigned short 
   618 ;;  b               2    2[COMMON] unsigned short 
   619 ;; Auto vars:     Size  Location     Type
   620 ;;		None
   621 ;; Return value:  Size  Location     Type
   622 ;;                  1    wreg      unsigned char 
   623 ;; Registers used:
   624 ;;		wreg, status,2, status,0
   625 ;; Tracked objects:
   626 ;;		On entry : 0/0
   627 ;;		On exit  : 0/0
   628 ;;		Unchanged: 0/0
   629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   630 ;;      Params:         4       0       0       0       0
   631 ;;      Locals:         0       0       0       0       0
   632 ;;      Temps:          0       0       0       0       0
   633 ;;      Totals:         4       0       0       0       0
   634 ;;Total ram usage:        4 bytes
   635 ;; Hardware stack levels used:    1
   636 ;; This function calls:
   637 ;;		Nothing
   638 ;; This function is called by:
   639 ;;		_readKeyboard
   640 ;; This function uses a non-reentrant model
   641 ;;
   642                           
   643                           
   644                           ;psect for function _findKey
   645  0780                     _findKey:	
   646                           
   647                           ;keypad.h: 11: if(b == 0)
   648                           
   649                           ;incstack = 0
   650                           ; Regs used in _findKey: [wreg+status,2+status,0]
   651  0780  0872               	movf	findKey@b,w
   652  0781  0473               	iorwf	findKey@b+1,w
   653  0782  1D03               	btfss	3,2
   654  0783  2F9E               	goto	l966
   655                           
   656                           ;keypad.h: 12: {
   657                           ;keypad.h: 13: if(a == 3)
   658  0784  3003               	movlw	3
   659  0785  0670               	xorwf	findKey@a,w
   660  0786  0471               	iorwf	findKey@a+1,w
   661  0787  1D03               	btfss	3,2
   662  0788  2F8B               	goto	l944
   663                           
   664                           ;keypad.h: 14: return 'A';
   665  0789  3041               	movlw	65
   666  078A  0008               	return
   667  078B                     l944:	
   668                           
   669                           ;keypad.h: 15: else if(a == 2)
   670  078B  3002               	movlw	2
   671  078C  0670               	xorwf	findKey@a,w
   672  078D  0471               	iorwf	findKey@a+1,w
   673  078E  1D03               	btfss	3,2
   674  078F  2F92               	goto	l952
   675                           
   676                           ;keypad.h: 16: return '3';
   677  0790  3033               	movlw	51
   678  0791  0008               	return
   679  0792                     l952:	
   680                           
   681                           ;keypad.h: 17: else if(a == 1)
   682  0792  0370               	decf	findKey@a,w
   683  0793  0471               	iorwf	findKey@a+1,w
   684  0794  1D03               	btfss	3,2
   685  0795  2F98               	goto	l960
   686                           
   687                           ;keypad.h: 18: return '2';
   688  0796  3032               	movlw	50
   689  0797  0008               	return
   690  0798                     l960:	
   691                           
   692                           ;keypad.h: 19: else if(a == 0)
   693  0798  0870               	movf	findKey@a,w
   694  0799  0471               	iorwf	findKey@a+1,w
   695  079A  1D03               	btfss	3,2
   696  079B  2FFA               	goto	l1062
   697                           
   698                           ;keypad.h: 20: return '1';
   699  079C  3031               	movlw	49
   700  079D  0008               	return
   701  079E                     l966:	
   702                           ;keypad.h: 21: }
   703                           
   704                           
   705                           ;keypad.h: 22: else if(b == 1)
   706  079E  0372               	decf	findKey@b,w
   707  079F  0473               	iorwf	findKey@b+1,w
   708  07A0  1D03               	btfss	3,2
   709  07A1  2FBC               	goto	l998
   710                           
   711                           ;keypad.h: 23: {
   712                           ;keypad.h: 24: if(a == 3)
   713  07A2  3003               	movlw	3
   714  07A3  0670               	xorwf	findKey@a,w
   715  07A4  0471               	iorwf	findKey@a+1,w
   716  07A5  1D03               	btfss	3,2
   717  07A6  2FA9               	goto	l976
   718                           
   719                           ;keypad.h: 25: return 'B';
   720  07A7  3042               	movlw	66
   721  07A8  0008               	return
   722  07A9                     l976:	
   723                           
   724                           ;keypad.h: 26: else if(a == 2)
   725  07A9  3002               	movlw	2
   726  07AA  0670               	xorwf	findKey@a,w
   727  07AB  0471               	iorwf	findKey@a+1,w
   728  07AC  1D03               	btfss	3,2
   729  07AD  2FB0               	goto	l984
   730                           
   731                           ;keypad.h: 27: return '6';
   732  07AE  3036               	movlw	54
   733  07AF  0008               	return
   734  07B0                     l984:	
   735                           
   736                           ;keypad.h: 28: else if(a == 1)
   737  07B0  0370               	decf	findKey@a,w
   738  07B1  0471               	iorwf	findKey@a+1,w
   739  07B2  1D03               	btfss	3,2
   740  07B3  2FB6               	goto	l992
   741                           
   742                           ;keypad.h: 29: return '5';
   743  07B4  3035               	movlw	53
   744  07B5  0008               	return
   745  07B6                     l992:	
   746                           
   747                           ;keypad.h: 30: else if(a == 0)
   748  07B6  0870               	movf	findKey@a,w
   749  07B7  0471               	iorwf	findKey@a+1,w
   750  07B8  1D03               	btfss	3,2
   751  07B9  2FFA               	goto	l1062
   752                           
   753                           ;keypad.h: 31: return '4';
   754  07BA  3034               	movlw	52
   755  07BB  0008               	return
   756  07BC                     l998:	
   757                           ;keypad.h: 32: }
   758                           
   759                           
   760                           ;keypad.h: 33: else if(b == 2)
   761  07BC  3002               	movlw	2
   762  07BD  0672               	xorwf	findKey@b,w
   763  07BE  0473               	iorwf	findKey@b+1,w
   764  07BF  1D03               	btfss	3,2
   765  07C0  2FDB               	goto	l1030
   766                           
   767                           ;keypad.h: 34: {
   768                           ;keypad.h: 35: if(a == 3)
   769  07C1  3003               	movlw	3
   770  07C2  0670               	xorwf	findKey@a,w
   771  07C3  0471               	iorwf	findKey@a+1,w
   772  07C4  1D03               	btfss	3,2
   773  07C5  2FC8               	goto	l1008
   774                           
   775                           ;keypad.h: 36: return 'C';
   776  07C6  3043               	movlw	67
   777  07C7  0008               	return
   778  07C8                     l1008:	
   779                           
   780                           ;keypad.h: 37: else if(a == 2)
   781  07C8  3002               	movlw	2
   782  07C9  0670               	xorwf	findKey@a,w
   783  07CA  0471               	iorwf	findKey@a+1,w
   784  07CB  1D03               	btfss	3,2
   785  07CC  2FCF               	goto	l1016
   786                           
   787                           ;keypad.h: 38: return '9';
   788  07CD  3039               	movlw	57
   789  07CE  0008               	return
   790  07CF                     l1016:	
   791                           
   792                           ;keypad.h: 39: else if(a == 1)
   793  07CF  0370               	decf	findKey@a,w
   794  07D0  0471               	iorwf	findKey@a+1,w
   795  07D1  1D03               	btfss	3,2
   796  07D2  2FD5               	goto	l1024
   797                           
   798                           ;keypad.h: 40: return '8';
   799  07D3  3038               	movlw	56
   800  07D4  0008               	return
   801  07D5                     l1024:	
   802                           
   803                           ;keypad.h: 41: else if(a == 0)
   804  07D5  0870               	movf	findKey@a,w
   805  07D6  0471               	iorwf	findKey@a+1,w
   806  07D7  1D03               	btfss	3,2
   807  07D8  2FFA               	goto	l1062
   808                           
   809                           ;keypad.h: 42: return '7';
   810  07D9  3037               	movlw	55
   811  07DA  0008               	return
   812  07DB                     l1030:	
   813                           ;keypad.h: 43: }
   814                           
   815                           
   816                           ;keypad.h: 44: else if(b == 3)
   817  07DB  3003               	movlw	3
   818  07DC  0672               	xorwf	findKey@b,w
   819  07DD  0473               	iorwf	findKey@b+1,w
   820  07DE  1D03               	btfss	3,2
   821  07DF  2FFA               	goto	l1062
   822                           
   823                           ;keypad.h: 45: {
   824                           ;keypad.h: 46: if(a == 3)
   825  07E0  3003               	movlw	3
   826  07E1  0670               	xorwf	findKey@a,w
   827  07E2  0471               	iorwf	findKey@a+1,w
   828  07E3  1D03               	btfss	3,2
   829  07E4  2FE7               	goto	l1040
   830                           
   831                           ;keypad.h: 47: return 'D';
   832  07E5  3044               	movlw	68
   833  07E6  0008               	return
   834  07E7                     l1040:	
   835                           
   836                           ;keypad.h: 48: else if(a == 2)
   837  07E7  3002               	movlw	2
   838  07E8  0670               	xorwf	findKey@a,w
   839  07E9  0471               	iorwf	findKey@a+1,w
   840  07EA  1D03               	btfss	3,2
   841  07EB  2FEE               	goto	l1048
   842                           
   843                           ;keypad.h: 49: return '.';
   844  07EC  302E               	movlw	46
   845  07ED  0008               	return
   846  07EE                     l1048:	
   847                           
   848                           ;keypad.h: 50: else if(a == 1)
   849  07EE  0370               	decf	findKey@a,w
   850  07EF  0471               	iorwf	findKey@a+1,w
   851  07F0  1D03               	btfss	3,2
   852  07F1  2FF4               	goto	l1056
   853                           
   854                           ;keypad.h: 51: return '0';
   855  07F2  3030               	movlw	48
   856  07F3  0008               	return
   857  07F4                     l1056:	
   858                           
   859                           ;keypad.h: 52: else if(a == 0)
   860  07F4  0870               	movf	findKey@a,w
   861  07F5  0471               	iorwf	findKey@a+1,w
   862  07F6  1D03               	btfss	3,2
   863  07F7  2FFA               	goto	l1062
   864                           
   865                           ;keypad.h: 53: return '#';
   866  07F8  3023               	movlw	35
   867  07F9  0008               	return
   868  07FA                     l1062:	
   869                           
   870                           ;keypad.h: 54: }
   871                           ;keypad.h: 55: return ' ';
   872  07FA  3020               	movlw	32
   873  07FB  0008               	return
   874  07FC                     __end_of_findKey:	
   875                           
   876                           	psect	text3
   877  05B9                     __ptext3:	
   878 ;; *************** function _Lcd_Write_String *****************
   879 ;; Defined at:
   880 ;;		line 107 in file "lcd.h"
   881 ;; Parameters:    Size  Location     Type
   882 ;;  a               1    wreg     PTR unsigned char 
   883 ;;		 -> STR_1(8), 
   884 ;; Auto vars:     Size  Location     Type
   885 ;;  a               1    7[COMMON] PTR unsigned char 
   886 ;;		 -> STR_1(8), 
   887 ;;  i               2    5[COMMON] int 
   888 ;; Return value:  Size  Location     Type
   889 ;;                  1    wreg      void 
   890 ;; Registers used:
   891 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   892 ;; Tracked objects:
   893 ;;		On entry : 0/0
   894 ;;		On exit  : 0/0
   895 ;;		Unchanged: 0/0
   896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   897 ;;      Params:         0       0       0       0       0
   898 ;;      Locals:         3       0       0       0       0
   899 ;;      Temps:          0       0       0       0       0
   900 ;;      Totals:         3       0       0       0       0
   901 ;;Total ram usage:        3 bytes
   902 ;; Hardware stack levels used:    1
   903 ;; Hardware stack levels required when called:    2
   904 ;; This function calls:
   905 ;;		_Lcd_Write_Char
   906 ;; This function is called by:
   907 ;;		_main
   908 ;; This function uses a non-reentrant model
   909 ;;
   910                           
   911                           
   912                           ;psect for function _Lcd_Write_String
   913  05B9                     _Lcd_Write_String:	
   914                           
   915                           ;incstack = 0
   916                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   917                           ;Lcd_Write_String@a stored from wreg
   918  05B9  00F7               	movwf	Lcd_Write_String@a
   919                           
   920                           ;lcd.h: 109: int i;
   921                           ;lcd.h: 110: for(i=0;a[i]!='\0';i++)
   922  05BA  01F5               	clrf	Lcd_Write_String@i
   923  05BB  01F6               	clrf	Lcd_Write_String@i+1
   924  05BC                     l1106:	
   925  05BC  0875               	movf	Lcd_Write_String@i,w
   926  05BD  0777               	addwf	Lcd_Write_String@a,w
   927  05BE  0084               	movwf	4
   928  05BF  120A  118A  2003  120A  118A  	fcall	stringdir
   929  05C4  3A00               	xorlw	0
   930  05C5  1903               	btfsc	3,2
   931  05C6  0008               	return
   932                           
   933                           ;lcd.h: 111: Lcd_Write_Char(a[i]);
   934  05C7  0875               	movf	Lcd_Write_String@i,w
   935  05C8  0777               	addwf	Lcd_Write_String@a,w
   936  05C9  0084               	movwf	4
   937  05CA  120A  118A  2003  120A  118A  	fcall	stringdir
   938  05CF  120A  118A  25DB  120A  118A  	fcall	_Lcd_Write_Char
   939  05D4  3001               	movlw	1
   940  05D5  07F5               	addwf	Lcd_Write_String@i,f
   941  05D6  1803               	skipnc
   942  05D7  0AF6               	incf	Lcd_Write_String@i+1,f
   943  05D8  3000               	movlw	0
   944  05D9  07F6               	addwf	Lcd_Write_String@i+1,f
   945  05DA  2DBC               	goto	l1106
   946  05DB                     __end_of_Lcd_Write_String:	
   947                           
   948                           	psect	text4
   949  05DB                     __ptext4:	
   950 ;; *************** function _Lcd_Write_Char *****************
   951 ;; Defined at:
   952 ;;		line 91 in file "lcd.h"
   953 ;; Parameters:    Size  Location     Type
   954 ;;  a               1    wreg     unsigned char 
   955 ;; Auto vars:     Size  Location     Type
   956 ;;  a               1    4[COMMON] unsigned char 
   957 ;;  y               1    3[COMMON] unsigned char 
   958 ;;  temp            1    2[COMMON] unsigned char 
   959 ;; Return value:  Size  Location     Type
   960 ;;                  1    wreg      void 
   961 ;; Registers used:
   962 ;;		wreg, status,2, status,0, pclath, cstack
   963 ;; Tracked objects:
   964 ;;		On entry : 0/0
   965 ;;		On exit  : 0/0
   966 ;;		Unchanged: 0/0
   967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   968 ;;      Params:         0       0       0       0       0
   969 ;;      Locals:         3       0       0       0       0
   970 ;;      Temps:          1       0       0       0       0
   971 ;;      Totals:         4       0       0       0       0
   972 ;;Total ram usage:        4 bytes
   973 ;; Hardware stack levels used:    1
   974 ;; Hardware stack levels required when called:    1
   975 ;; This function calls:
   976 ;;		_Lcd_Port
   977 ;; This function is called by:
   978 ;;		_Lcd_Write_String
   979 ;;		_main
   980 ;; This function uses a non-reentrant model
   981 ;;
   982                           
   983                           
   984                           ;psect for function _Lcd_Write_Char
   985  05DB                     _Lcd_Write_Char:	
   986                           
   987                           ;incstack = 0
   988                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
   989                           ;Lcd_Write_Char@a stored from wreg
   990  05DB  00F4               	movwf	Lcd_Write_Char@a
   991                           
   992                           ;lcd.h: 93: char temp,y;
   993                           ;lcd.h: 94: temp = a&0x0F;
   994  05DC  0874               	movf	Lcd_Write_Char@a,w
   995  05DD  390F               	andlw	15
   996  05DE  00F1               	movwf	??_Lcd_Write_Char
   997  05DF  0871               	movf	??_Lcd_Write_Char,w
   998  05E0  00F2               	movwf	Lcd_Write_Char@temp
   999                           
  1000                           ;lcd.h: 95: y = a&0xF0;
  1001  05E1  0874               	movf	Lcd_Write_Char@a,w
  1002  05E2  39F0               	andlw	240
  1003  05E3  00F1               	movwf	??_Lcd_Write_Char
  1004  05E4  0871               	movf	??_Lcd_Write_Char,w
  1005  05E5  00F3               	movwf	Lcd_Write_Char@y
  1006                           
  1007                           ;lcd.h: 96: RD2 = 1;
  1008  05E6  1283               	bcf	3,5	;RP0=0, select bank0
  1009  05E7  1303               	bcf	3,6	;RP1=0, select bank0
  1010  05E8  1508               	bsf	8,2	;volatile
  1011                           
  1012                           ;lcd.h: 97: Lcd_Port(y>>4);
  1013  05E9  0873               	movf	Lcd_Write_Char@y,w
  1014  05EA  00F1               	movwf	??_Lcd_Write_Char
  1015  05EB  3004               	movlw	4
  1016  05EC                     u465:	
  1017  05EC  1003               	clrc
  1018  05ED  0CF1               	rrf	??_Lcd_Write_Char,f
  1019  05EE  3EFF               	addlw	-1
  1020  05EF  1D03               	skipz
  1021  05F0  2DEC               	goto	u465
  1022  05F1  0871               	movf	??_Lcd_Write_Char,w
  1023  05F2  120A  118A  2585  120A  118A  	fcall	_Lcd_Port
  1024                           
  1025                           ;lcd.h: 98: RD3 = 1;
  1026  05F7  1283               	bcf	3,5	;RP0=0, select bank0
  1027  05F8  1303               	bcf	3,6	;RP1=0, select bank0
  1028  05F9  1588               	bsf	8,3	;volatile
  1029                           
  1030                           ;lcd.h: 99: _delay((unsigned long)((40)*(8000000/4000000.0)));
  1031  05FA  301A               	movlw	26
  1032  05FB  00F1               	movwf	??_Lcd_Write_Char
  1033  05FC                     u847:	
  1034  05FC  0BF1               	decfsz	??_Lcd_Write_Char,f
  1035  05FD  2DFC               	goto	u847
  1036  05FE  0000               	nop
  1037                           
  1038                           ;lcd.h: 100: RD3 = 0;
  1039  05FF  1283               	bcf	3,5	;RP0=0, select bank0
  1040  0600  1303               	bcf	3,6	;RP1=0, select bank0
  1041  0601  1188               	bcf	8,3	;volatile
  1042                           
  1043                           ;lcd.h: 101: Lcd_Port(temp);
  1044  0602  0872               	movf	Lcd_Write_Char@temp,w
  1045  0603  120A  118A  2585  120A  118A  	fcall	_Lcd_Port
  1046                           
  1047                           ;lcd.h: 102: RD3 = 1;
  1048  0608  1283               	bcf	3,5	;RP0=0, select bank0
  1049  0609  1303               	bcf	3,6	;RP1=0, select bank0
  1050  060A  1588               	bsf	8,3	;volatile
  1051                           
  1052                           ;lcd.h: 103: _delay((unsigned long)((40)*(8000000/4000000.0)));
  1053  060B  301A               	movlw	26
  1054  060C  00F1               	movwf	??_Lcd_Write_Char
  1055  060D                     u857:	
  1056  060D  0BF1               	decfsz	??_Lcd_Write_Char,f
  1057  060E  2E0D               	goto	u857
  1058  060F  0000               	nop
  1059                           
  1060                           ;lcd.h: 104: RD3 = 0;
  1061  0610  1283               	bcf	3,5	;RP0=0, select bank0
  1062  0611  1303               	bcf	3,6	;RP1=0, select bank0
  1063  0612  1188               	bcf	8,3	;volatile
  1064  0613  0008               	return
  1065  0614                     __end_of_Lcd_Write_Char:	
  1066                           
  1067                           	psect	text5
  1068  0614                     __ptext5:	
  1069 ;; *************** function _Lcd_Set_Cursor *****************
  1070 ;; Defined at:
  1071 ;;		line 51 in file "lcd.h"
  1072 ;; Parameters:    Size  Location     Type
  1073 ;;  a               1    wreg     unsigned char 
  1074 ;;  b               1    4[COMMON] unsigned char 
  1075 ;; Auto vars:     Size  Location     Type
  1076 ;;  a               1    7[COMMON] unsigned char 
  1077 ;;  temp            1   10[COMMON] unsigned char 
  1078 ;;  y               1    9[COMMON] unsigned char 
  1079 ;;  z               1    8[COMMON] unsigned char 
  1080 ;; Return value:  Size  Location     Type
  1081 ;;                  1    wreg      void 
  1082 ;; Registers used:
  1083 ;;		wreg, status,2, status,0, pclath, cstack
  1084 ;; Tracked objects:
  1085 ;;		On entry : 0/0
  1086 ;;		On exit  : 0/0
  1087 ;;		Unchanged: 0/0
  1088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1089 ;;      Params:         1       0       0       0       0
  1090 ;;      Locals:         4       0       0       0       0
  1091 ;;      Temps:          2       0       0       0       0
  1092 ;;      Totals:         7       0       0       0       0
  1093 ;;Total ram usage:        7 bytes
  1094 ;; Hardware stack levels used:    1
  1095 ;; Hardware stack levels required when called:    2
  1096 ;; This function calls:
  1097 ;;		_Lcd_Cmd
  1098 ;; This function is called by:
  1099 ;;		_main
  1100 ;; This function uses a non-reentrant model
  1101 ;;
  1102                           
  1103                           
  1104                           ;psect for function _Lcd_Set_Cursor
  1105  0614                     _Lcd_Set_Cursor:	
  1106                           
  1107                           ;incstack = 0
  1108                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  1109                           ;Lcd_Set_Cursor@a stored from wreg
  1110  0614  00F7               	movwf	Lcd_Set_Cursor@a
  1111                           
  1112                           ;lcd.h: 53: char temp,z,y;
  1113                           ;lcd.h: 54: if(a == 1)
  1114  0615  0377               	decf	Lcd_Set_Cursor@a,w
  1115  0616  1D03               	btfss	3,2
  1116  0617  2E39               	goto	l1080
  1117                           
  1118                           ;lcd.h: 55: {
  1119                           ;lcd.h: 56: temp = 0x80 + b - 1;
  1120  0618  0874               	movf	Lcd_Set_Cursor@b,w
  1121  0619  3E7F               	addlw	127
  1122  061A  00F5               	movwf	??_Lcd_Set_Cursor
  1123  061B  0875               	movf	??_Lcd_Set_Cursor,w
  1124  061C  00FA               	movwf	Lcd_Set_Cursor@temp
  1125                           
  1126                           ;lcd.h: 57: z = temp>>4;
  1127  061D  087A               	movf	Lcd_Set_Cursor@temp,w
  1128  061E  00F5               	movwf	??_Lcd_Set_Cursor
  1129  061F  3004               	movlw	4
  1130  0620                     u685:	
  1131  0620  1003               	clrc
  1132  0621  0CF5               	rrf	??_Lcd_Set_Cursor,f
  1133  0622  3EFF               	addlw	-1
  1134  0623  1D03               	skipz
  1135  0624  2E20               	goto	u685
  1136  0625  0875               	movf	??_Lcd_Set_Cursor,w
  1137  0626  00F6               	movwf	??_Lcd_Set_Cursor+1
  1138  0627  0876               	movf	??_Lcd_Set_Cursor+1,w
  1139  0628  00F8               	movwf	Lcd_Set_Cursor@z
  1140                           
  1141                           ;lcd.h: 58: y = temp & 0x0F;
  1142  0629  087A               	movf	Lcd_Set_Cursor@temp,w
  1143  062A  390F               	andlw	15
  1144  062B  00F5               	movwf	??_Lcd_Set_Cursor
  1145  062C  0875               	movf	??_Lcd_Set_Cursor,w
  1146  062D  00F9               	movwf	Lcd_Set_Cursor@y
  1147                           
  1148                           ;lcd.h: 59: Lcd_Cmd(z);
  1149  062E  0878               	movf	Lcd_Set_Cursor@z,w
  1150  062F  120A  118A  259F  120A  118A  	fcall	_Lcd_Cmd
  1151                           
  1152                           ;lcd.h: 60: Lcd_Cmd(y);
  1153  0634  0879               	movf	Lcd_Set_Cursor@y,w
  1154  0635  120A  118A  259F   	fcall	_Lcd_Cmd
  1155                           
  1156                           ;lcd.h: 61: }
  1157  0638  0008               	return
  1158  0639                     l1080:	
  1159                           
  1160                           ;lcd.h: 62: else if(a == 2)
  1161  0639  3002               	movlw	2
  1162  063A  0677               	xorwf	Lcd_Set_Cursor@a,w
  1163  063B  1D03               	btfss	3,2
  1164  063C  0008               	return
  1165                           
  1166                           ;lcd.h: 63: {
  1167                           ;lcd.h: 64: temp = 0xC0 + b - 1;
  1168  063D  0874               	movf	Lcd_Set_Cursor@b,w
  1169  063E  3EBF               	addlw	191
  1170  063F  00F5               	movwf	??_Lcd_Set_Cursor
  1171  0640  0875               	movf	??_Lcd_Set_Cursor,w
  1172  0641  00FA               	movwf	Lcd_Set_Cursor@temp
  1173                           
  1174                           ;lcd.h: 65: z = temp>>4;
  1175  0642  087A               	movf	Lcd_Set_Cursor@temp,w
  1176  0643  00F5               	movwf	??_Lcd_Set_Cursor
  1177  0644  3004               	movlw	4
  1178  0645                     u705:	
  1179  0645  1003               	clrc
  1180  0646  0CF5               	rrf	??_Lcd_Set_Cursor,f
  1181  0647  3EFF               	addlw	-1
  1182  0648  1D03               	skipz
  1183  0649  2E45               	goto	u705
  1184  064A  0875               	movf	??_Lcd_Set_Cursor,w
  1185  064B  00F6               	movwf	??_Lcd_Set_Cursor+1
  1186  064C  0876               	movf	??_Lcd_Set_Cursor+1,w
  1187  064D  00F8               	movwf	Lcd_Set_Cursor@z
  1188                           
  1189                           ;lcd.h: 66: y = temp & 0x0F;
  1190  064E  087A               	movf	Lcd_Set_Cursor@temp,w
  1191  064F  390F               	andlw	15
  1192  0650  00F5               	movwf	??_Lcd_Set_Cursor
  1193  0651  0875               	movf	??_Lcd_Set_Cursor,w
  1194  0652  00F9               	movwf	Lcd_Set_Cursor@y
  1195                           
  1196                           ;lcd.h: 67: Lcd_Cmd(z);
  1197  0653  0878               	movf	Lcd_Set_Cursor@z,w
  1198  0654  120A  118A  259F  120A  118A  	fcall	_Lcd_Cmd
  1199                           
  1200                           ;lcd.h: 68: Lcd_Cmd(y);
  1201  0659  0879               	movf	Lcd_Set_Cursor@y,w
  1202  065A  120A  118A  259F   	fcall	_Lcd_Cmd
  1203  065D  0008               	return
  1204  065E                     __end_of_Lcd_Set_Cursor:	
  1205                           
  1206                           	psect	text6
  1207  06B6                     __ptext6:	
  1208 ;; *************** function _Lcd_Init *****************
  1209 ;; Defined at:
  1210 ;;		line 72 in file "lcd.h"
  1211 ;; Parameters:    Size  Location     Type
  1212 ;;		None
  1213 ;; Auto vars:     Size  Location     Type
  1214 ;;		None
  1215 ;; Return value:  Size  Location     Type
  1216 ;;                  1    wreg      void 
  1217 ;; Registers used:
  1218 ;;		wreg, status,2, status,0, pclath, cstack
  1219 ;; Tracked objects:
  1220 ;;		On entry : 0/0
  1221 ;;		On exit  : 0/0
  1222 ;;		Unchanged: 0/0
  1223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1224 ;;      Params:         0       0       0       0       0
  1225 ;;      Locals:         0       0       0       0       0
  1226 ;;      Temps:          2       0       0       0       0
  1227 ;;      Totals:         2       0       0       0       0
  1228 ;;Total ram usage:        2 bytes
  1229 ;; Hardware stack levels used:    1
  1230 ;; Hardware stack levels required when called:    2
  1231 ;; This function calls:
  1232 ;;		_Lcd_Cmd
  1233 ;;		_Lcd_Port
  1234 ;; This function is called by:
  1235 ;;		_main
  1236 ;; This function uses a non-reentrant model
  1237 ;;
  1238                           
  1239                           
  1240                           ;psect for function _Lcd_Init
  1241  06B6                     _Lcd_Init:	
  1242                           
  1243                           ;lcd.h: 74: Lcd_Port(0x00);
  1244                           
  1245                           ;incstack = 0
  1246                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  1247  06B6  3000               	movlw	0
  1248  06B7  120A  118A  2585  120A  118A  	fcall	_Lcd_Port
  1249                           
  1250                           ;lcd.h: 75: _delay((unsigned long)((20)*(8000000/4000.0)));
  1251  06BC  3034               	movlw	52
  1252  06BD  00F5               	movwf	??_Lcd_Init+1
  1253  06BE  30F1               	movlw	241
  1254  06BF  00F4               	movwf	??_Lcd_Init
  1255  06C0                     u867:	
  1256  06C0  0BF4               	decfsz	??_Lcd_Init,f
  1257  06C1  2EC0               	goto	u867
  1258  06C2  0BF5               	decfsz	??_Lcd_Init+1,f
  1259  06C3  2EC0               	goto	u867
  1260  06C4  2EC5               	nop2
  1261                           
  1262                           ;lcd.h: 76: Lcd_Cmd(0x03);
  1263  06C5  3003               	movlw	3
  1264  06C6  120A  118A  259F  120A  118A  	fcall	_Lcd_Cmd
  1265                           
  1266                           ;lcd.h: 77: _delay((unsigned long)((5)*(8000000/4000.0)));
  1267  06CB  300D               	movlw	13
  1268  06CC  00F5               	movwf	??_Lcd_Init+1
  1269  06CD  30FB               	movlw	251
  1270  06CE  00F4               	movwf	??_Lcd_Init
  1271  06CF                     u877:	
  1272  06CF  0BF4               	decfsz	??_Lcd_Init,f
  1273  06D0  2ECF               	goto	u877
  1274  06D1  0BF5               	decfsz	??_Lcd_Init+1,f
  1275  06D2  2ECF               	goto	u877
  1276  06D3  2ED4               	nop2
  1277                           
  1278                           ;lcd.h: 78: Lcd_Cmd(0x03);
  1279  06D4  3003               	movlw	3
  1280  06D5  120A  118A  259F  120A  118A  	fcall	_Lcd_Cmd
  1281                           
  1282                           ;lcd.h: 79: _delay((unsigned long)((11)*(8000000/4000.0)));
  1283  06DA  301D               	movlw	29
  1284  06DB  00F5               	movwf	??_Lcd_Init+1
  1285  06DC  3091               	movlw	145
  1286  06DD  00F4               	movwf	??_Lcd_Init
  1287  06DE                     u887:	
  1288  06DE  0BF4               	decfsz	??_Lcd_Init,f
  1289  06DF  2EDE               	goto	u887
  1290  06E0  0BF5               	decfsz	??_Lcd_Init+1,f
  1291  06E1  2EDE               	goto	u887
  1292                           
  1293                           ;lcd.h: 80: Lcd_Cmd(0x03);
  1294  06E2  3003               	movlw	3
  1295  06E3  120A  118A  259F  120A  118A  	fcall	_Lcd_Cmd
  1296                           
  1297                           ;lcd.h: 82: Lcd_Cmd(0x02);
  1298  06E8  3002               	movlw	2
  1299  06E9  120A  118A  259F  120A  118A  	fcall	_Lcd_Cmd
  1300                           
  1301                           ;lcd.h: 83: Lcd_Cmd(0x02);
  1302  06EE  3002               	movlw	2
  1303  06EF  120A  118A  259F  120A  118A  	fcall	_Lcd_Cmd
  1304                           
  1305                           ;lcd.h: 84: Lcd_Cmd(0x08);
  1306  06F4  3008               	movlw	8
  1307  06F5  120A  118A  259F  120A  118A  	fcall	_Lcd_Cmd
  1308                           
  1309                           ;lcd.h: 85: Lcd_Cmd(0x00);
  1310  06FA  3000               	movlw	0
  1311  06FB  120A  118A  259F  120A  118A  	fcall	_Lcd_Cmd
  1312                           
  1313                           ;lcd.h: 86: Lcd_Cmd(0x0C);
  1314  0700  300C               	movlw	12
  1315  0701  120A  118A  259F  120A  118A  	fcall	_Lcd_Cmd
  1316                           
  1317                           ;lcd.h: 87: Lcd_Cmd(0x00);
  1318  0706  3000               	movlw	0
  1319  0707  120A  118A  259F  120A  118A  	fcall	_Lcd_Cmd
  1320                           
  1321                           ;lcd.h: 88: Lcd_Cmd(0x06);
  1322  070C  3006               	movlw	6
  1323  070D  120A  118A  259F   	fcall	_Lcd_Cmd
  1324  0710  0008               	return
  1325  0711                     __end_of_Lcd_Init:	
  1326                           
  1327                           	psect	text7
  1328  056A                     __ptext7:	
  1329 ;; *************** function _Lcd_Config *****************
  1330 ;; Defined at:
  1331 ;;		line 2 in file "lcd.h"
  1332 ;; Parameters:    Size  Location     Type
  1333 ;;		None
  1334 ;; Auto vars:     Size  Location     Type
  1335 ;;		None
  1336 ;; Return value:  Size  Location     Type
  1337 ;;                  1    wreg      void 
  1338 ;; Registers used:
  1339 ;;		status,2
  1340 ;; Tracked objects:
  1341 ;;		On entry : 0/0
  1342 ;;		On exit  : 0/0
  1343 ;;		Unchanged: 0/0
  1344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1345 ;;      Params:         0       0       0       0       0
  1346 ;;      Locals:         0       0       0       0       0
  1347 ;;      Temps:          0       0       0       0       0
  1348 ;;      Totals:         0       0       0       0       0
  1349 ;;Total ram usage:        0 bytes
  1350 ;; Hardware stack levels used:    1
  1351 ;; This function calls:
  1352 ;;		Nothing
  1353 ;; This function is called by:
  1354 ;;		_main
  1355 ;; This function uses a non-reentrant model
  1356 ;;
  1357                           
  1358                           
  1359                           ;psect for function _Lcd_Config
  1360  056A                     _Lcd_Config:	
  1361                           
  1362                           ;lcd.h: 4: TRISD = 0x00;
  1363                           
  1364                           ;incstack = 0
  1365                           ; Regs used in _Lcd_Config: [status,2]
  1366  056A  1683               	bsf	3,5	;RP0=1, select bank1
  1367  056B  1303               	bcf	3,6	;RP1=0, select bank1
  1368  056C  0188               	clrf	8	;volatile
  1369  056D  0008               	return
  1370  056E                     __end_of_Lcd_Config:	
  1371                           
  1372                           	psect	text8
  1373  056E                     __ptext8:	
  1374 ;; *************** function _Lcd_Clear *****************
  1375 ;; Defined at:
  1376 ;;		line 45 in file "lcd.h"
  1377 ;; Parameters:    Size  Location     Type
  1378 ;;		None
  1379 ;; Auto vars:     Size  Location     Type
  1380 ;;		None
  1381 ;; Return value:  Size  Location     Type
  1382 ;;                  1    wreg      void 
  1383 ;; Registers used:
  1384 ;;		wreg, status,2, status,0, pclath, cstack
  1385 ;; Tracked objects:
  1386 ;;		On entry : 0/0
  1387 ;;		On exit  : 0/0
  1388 ;;		Unchanged: 0/0
  1389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1390 ;;      Params:         0       0       0       0       0
  1391 ;;      Locals:         0       0       0       0       0
  1392 ;;      Temps:          0       0       0       0       0
  1393 ;;      Totals:         0       0       0       0       0
  1394 ;;Total ram usage:        0 bytes
  1395 ;; Hardware stack levels used:    1
  1396 ;; Hardware stack levels required when called:    2
  1397 ;; This function calls:
  1398 ;;		_Lcd_Cmd
  1399 ;; This function is called by:
  1400 ;;		_main
  1401 ;; This function uses a non-reentrant model
  1402 ;;
  1403                           
  1404                           
  1405                           ;psect for function _Lcd_Clear
  1406  056E                     _Lcd_Clear:	
  1407                           
  1408                           ;lcd.h: 47: Lcd_Cmd(0);
  1409                           
  1410                           ;incstack = 0
  1411                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  1412  056E  3000               	movlw	0
  1413  056F  120A  118A  259F  120A  118A  	fcall	_Lcd_Cmd
  1414                           
  1415                           ;lcd.h: 48: Lcd_Cmd(1);
  1416  0574  3001               	movlw	1
  1417  0575  120A  118A  259F   	fcall	_Lcd_Cmd
  1418  0578  0008               	return
  1419  0579                     __end_of_Lcd_Clear:	
  1420                           
  1421                           	psect	text9
  1422  059F                     __ptext9:	
  1423 ;; *************** function _Lcd_Cmd *****************
  1424 ;; Defined at:
  1425 ;;		line 36 in file "lcd.h"
  1426 ;; Parameters:    Size  Location     Type
  1427 ;;  a               1    wreg     unsigned char 
  1428 ;; Auto vars:     Size  Location     Type
  1429 ;;  a               1    3[COMMON] unsigned char 
  1430 ;; Return value:  Size  Location     Type
  1431 ;;                  1    wreg      void 
  1432 ;; Registers used:
  1433 ;;		wreg, status,2, status,0, pclath, cstack
  1434 ;; Tracked objects:
  1435 ;;		On entry : 0/0
  1436 ;;		On exit  : 0/0
  1437 ;;		Unchanged: 0/0
  1438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1439 ;;      Params:         0       0       0       0       0
  1440 ;;      Locals:         1       0       0       0       0
  1441 ;;      Temps:          2       0       0       0       0
  1442 ;;      Totals:         3       0       0       0       0
  1443 ;;Total ram usage:        3 bytes
  1444 ;; Hardware stack levels used:    1
  1445 ;; Hardware stack levels required when called:    1
  1446 ;; This function calls:
  1447 ;;		_Lcd_Port
  1448 ;; This function is called by:
  1449 ;;		_Lcd_Clear
  1450 ;;		_Lcd_Set_Cursor
  1451 ;;		_Lcd_Init
  1452 ;;		_Lcd_Shift_Right
  1453 ;;		_Lcd_Shift_Left
  1454 ;; This function uses a non-reentrant model
  1455 ;;
  1456                           
  1457                           
  1458                           ;psect for function _Lcd_Cmd
  1459  059F                     _Lcd_Cmd:	
  1460                           
  1461                           ;incstack = 0
  1462                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  1463                           ;Lcd_Cmd@a stored from wreg
  1464  059F  00F3               	movwf	Lcd_Cmd@a
  1465                           
  1466                           ;lcd.h: 38: RD2 = 0;
  1467  05A0  1283               	bcf	3,5	;RP0=0, select bank0
  1468  05A1  1303               	bcf	3,6	;RP1=0, select bank0
  1469  05A2  1108               	bcf	8,2	;volatile
  1470                           
  1471                           ;lcd.h: 39: Lcd_Port(a);
  1472  05A3  0873               	movf	Lcd_Cmd@a,w
  1473  05A4  120A  118A  2585  120A  118A  	fcall	_Lcd_Port
  1474                           
  1475                           ;lcd.h: 40: RD3 = 1;
  1476  05A9  1283               	bcf	3,5	;RP0=0, select bank0
  1477  05AA  1303               	bcf	3,6	;RP1=0, select bank0
  1478  05AB  1588               	bsf	8,3	;volatile
  1479                           
  1480                           ;lcd.h: 41: _delay((unsigned long)((4)*(8000000/4000.0)));
  1481  05AC  300B               	movlw	11
  1482  05AD  00F2               	movwf	??_Lcd_Cmd+1
  1483  05AE  3062               	movlw	98
  1484  05AF  00F1               	movwf	??_Lcd_Cmd
  1485  05B0                     u897:	
  1486  05B0  0BF1               	decfsz	??_Lcd_Cmd,f
  1487  05B1  2DB0               	goto	u897
  1488  05B2  0BF2               	decfsz	??_Lcd_Cmd+1,f
  1489  05B3  2DB0               	goto	u897
  1490  05B4  0000               	nop
  1491                           
  1492                           ;lcd.h: 42: RD3 = 0;
  1493  05B5  1283               	bcf	3,5	;RP0=0, select bank0
  1494  05B6  1303               	bcf	3,6	;RP1=0, select bank0
  1495  05B7  1188               	bcf	8,3	;volatile
  1496  05B8  0008               	return
  1497  05B9                     __end_of_Lcd_Cmd:	
  1498                           
  1499                           	psect	text10
  1500  0585                     __ptext10:	
  1501 ;; *************** function _Lcd_Port *****************
  1502 ;; Defined at:
  1503 ;;		line 14 in file "lcd.h"
  1504 ;; Parameters:    Size  Location     Type
  1505 ;;  a               1    wreg     unsigned char 
  1506 ;; Auto vars:     Size  Location     Type
  1507 ;;  a               1    0[COMMON] unsigned char 
  1508 ;; Return value:  Size  Location     Type
  1509 ;;                  1    wreg      void 
  1510 ;; Registers used:
  1511 ;;		wreg
  1512 ;; Tracked objects:
  1513 ;;		On entry : 0/0
  1514 ;;		On exit  : 0/0
  1515 ;;		Unchanged: 0/0
  1516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1517 ;;      Params:         0       0       0       0       0
  1518 ;;      Locals:         1       0       0       0       0
  1519 ;;      Temps:          0       0       0       0       0
  1520 ;;      Totals:         1       0       0       0       0
  1521 ;;Total ram usage:        1 bytes
  1522 ;; Hardware stack levels used:    1
  1523 ;; This function calls:
  1524 ;;		Nothing
  1525 ;; This function is called by:
  1526 ;;		_Lcd_Cmd
  1527 ;;		_Lcd_Init
  1528 ;;		_Lcd_Write_Char
  1529 ;; This function uses a non-reentrant model
  1530 ;;
  1531                           
  1532                           
  1533                           ;psect for function _Lcd_Port
  1534  0585                     _Lcd_Port:	
  1535                           
  1536                           ;incstack = 0
  1537                           ; Regs used in _Lcd_Port: [wreg]
  1538                           ;Lcd_Port@a stored from wreg
  1539  0585  00F0               	movwf	Lcd_Port@a
  1540                           
  1541                           ;lcd.h: 16: if(a & 1)
  1542  0586  1C70               	btfss	Lcd_Port@a,0
  1543  0587  2D8C               	goto	l38
  1544                           
  1545                           ;lcd.h: 17: RD4 = 1;
  1546  0588  1283               	bcf	3,5	;RP0=0, select bank0
  1547  0589  1303               	bcf	3,6	;RP1=0, select bank0
  1548  058A  1608               	bsf	8,4	;volatile
  1549  058B  2D8F               	goto	l39
  1550  058C                     l38:	
  1551                           
  1552                           ;lcd.h: 18: else
  1553                           ;lcd.h: 19: RD4 = 0;
  1554  058C  1283               	bcf	3,5	;RP0=0, select bank0
  1555  058D  1303               	bcf	3,6	;RP1=0, select bank0
  1556  058E  1208               	bcf	8,4	;volatile
  1557  058F                     l39:	
  1558                           
  1559                           ;lcd.h: 21: if(a & 2)
  1560  058F  1CF0               	btfss	Lcd_Port@a,1
  1561  0590  2D93               	goto	l40
  1562                           
  1563                           ;lcd.h: 22: RD5 = 1;
  1564  0591  1688               	bsf	8,5	;volatile
  1565  0592  2D94               	goto	l41
  1566  0593                     l40:	
  1567                           
  1568                           ;lcd.h: 23: else
  1569                           ;lcd.h: 24: RD5 = 0;
  1570  0593  1288               	bcf	8,5	;volatile
  1571  0594                     l41:	
  1572                           
  1573                           ;lcd.h: 26: if(a & 4)
  1574  0594  1D70               	btfss	Lcd_Port@a,2
  1575  0595  2D98               	goto	l42
  1576                           
  1577                           ;lcd.h: 27: RD6 = 1;
  1578  0596  1708               	bsf	8,6	;volatile
  1579  0597  2D99               	goto	l43
  1580  0598                     l42:	
  1581                           
  1582                           ;lcd.h: 28: else
  1583                           ;lcd.h: 29: RD6 = 0;
  1584  0598  1308               	bcf	8,6	;volatile
  1585  0599                     l43:	
  1586                           
  1587                           ;lcd.h: 31: if(a & 8)
  1588  0599  1DF0               	btfss	Lcd_Port@a,3
  1589  059A  2D9D               	goto	l44
  1590                           
  1591                           ;lcd.h: 32: RD7 = 1;
  1592  059B  1788               	bsf	8,7	;volatile
  1593  059C  0008               	return
  1594  059D                     l44:	
  1595                           
  1596                           ;lcd.h: 33: else
  1597                           ;lcd.h: 34: RD7 = 0;
  1598  059D  1388               	bcf	8,7	;volatile
  1599  059E  0008               	return
  1600  059F                     __end_of_Lcd_Port:	
  1601                           
  1602                           	psect	text11
  1603  0579                     __ptext11:	
  1604 ;; *************** function _Keypad_Init *****************
  1605 ;; Defined at:
  1606 ;;		line 1 in file "keypad.h"
  1607 ;; Parameters:    Size  Location     Type
  1608 ;;		None
  1609 ;; Auto vars:     Size  Location     Type
  1610 ;;		None
  1611 ;; Return value:  Size  Location     Type
  1612 ;;                  1    wreg      void 
  1613 ;; Registers used:
  1614 ;;		wreg, status,2
  1615 ;; Tracked objects:
  1616 ;;		On entry : 0/0
  1617 ;;		On exit  : 0/0
  1618 ;;		Unchanged: 0/0
  1619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1620 ;;      Params:         0       0       0       0       0
  1621 ;;      Locals:         0       0       0       0       0
  1622 ;;      Temps:          0       0       0       0       0
  1623 ;;      Totals:         0       0       0       0       0
  1624 ;;Total ram usage:        0 bytes
  1625 ;; Hardware stack levels used:    1
  1626 ;; This function calls:
  1627 ;;		Nothing
  1628 ;; This function is called by:
  1629 ;;		_main
  1630 ;; This function uses a non-reentrant model
  1631 ;;
  1632                           
  1633                           
  1634                           ;psect for function _Keypad_Init
  1635  0579                     _Keypad_Init:	
  1636                           
  1637                           ;keypad.h: 3: TRISB=0b11110000;
  1638                           
  1639                           ;incstack = 0
  1640                           ; Regs used in _Keypad_Init: [wreg+status,2]
  1641  0579  30F0               	movlw	240
  1642  057A  1683               	bsf	3,5	;RP0=1, select bank1
  1643  057B  1303               	bcf	3,6	;RP1=0, select bank1
  1644  057C  0086               	movwf	6	;volatile
  1645                           
  1646                           ;keypad.h: 4: PORTB=0x00;
  1647  057D  1283               	bcf	3,5	;RP0=0, select bank0
  1648  057E  1303               	bcf	3,6	;RP1=0, select bank0
  1649  057F  0186               	clrf	6	;volatile
  1650                           
  1651                           ;keypad.h: 5: ANSEL=0;
  1652  0580  1683               	bsf	3,5	;RP0=1, select bank3
  1653  0581  1703               	bsf	3,6	;RP1=1, select bank3
  1654  0582  0188               	clrf	8	;volatile
  1655                           
  1656                           ;keypad.h: 6: ANSELH=0;
  1657  0583  0189               	clrf	9	;volatile
  1658  0584  0008               	return
  1659  0585                     __end_of_Keypad_Init:	
  1660  007E                     btemp	set	126	;btemp
  1661  007E                     wtemp	set	126
  1662  007E                     wtemp0	set	126
  1663  0080                     wtemp1	set	128
  1664  0082                     wtemp2	set	130
  1665  0084                     wtemp3	set	132
  1666  0086                     wtemp4	set	134
  1667  0088                     wtemp5	set	136
  1668  007F                     wtemp6	set	127
  1669  007E                     ttemp	set	126
  1670  007E                     ttemp0	set	126
  1671  0081                     ttemp1	set	129
  1672  0084                     ttemp2	set	132
  1673  0087                     ttemp3	set	135
  1674  007F                     ttemp4	set	127
  1675  007E                     ltemp	set	126
  1676  007E                     ltemp0	set	126
  1677  0082                     ltemp1	set	130
  1678  0086                     ltemp2	set	134
  1679  0080                     ltemp3	set	128


Data Sizes:
    Strings     8
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      1       1
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 8
		 -> STR_1(CODE[8]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Set_Cursor
    _readKeyboard->_findKey
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    2399
                                             11 COMMON     3     3      0
                                              0 BANK0      1     1      0
                        _Keypad_Init
                          _Lcd_Clear
                         _Lcd_Config
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                       _readKeyboard
 ---------------------------------------------------------------------------------
 (1) _readKeyboard                                         2     2      0    1087
                                              4 COMMON     2     2      0
                            _findKey
 ---------------------------------------------------------------------------------
 (2) _findKey                                              4     0      4     864
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     3     3      0     295
                                              5 COMMON     3     3      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     486
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Config                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Keypad_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Keypad_Init
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Config
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _readKeyboard
     _findKey

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      1       1       5        1.3%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Mon Dec 12 23:50:46 2016

                        pc 0002                __CFG_CP$OFF 0000                         l40 0593  
                       l41 0594                         l42 0598                         l43 0599  
                       l44 059D                         l38 058C                         l39 058F  
                       fsr 0004                        l131 0755                        l132 0763  
                      l129 0747                        l960 0798                        l952 0792  
                      l944 078B                        l966 079E                        l992 07B6  
                      l984 07B0                        l976 07A9                        l998 07BC  
                      _RB4 0034                        _RB5 0035                        _RD2 0042  
                      _RB6 0036                        _RD3 0043                        _RB7 0037  
                      _RD4 0044                        _RD5 0045                        _RD6 0046  
                      _RD7 0047               __CFG_CPD$OFF 0000                        u705 0645  
                      u465 05EC                        u685 0620                        u837 0686  
                      u847 05FC                        u857 060D                        u867 06C0  
                      u877 06CF                        u887 06DE                        u897 05B0  
                      fsr0 0004               __CFG_FOSC$HS 0000               __CFG_LVP$OFF 0000  
                     l1030 07DB                       l1040 07E7                       l1024 07D5  
                     l1016 07CF                       l1008 07C8                       l1106 05BC  
                     l1130 0728                       l1122 071C                       l1062 07FA  
                     l1134 072F                       l1126 0722                       l1080 0639  
                     l1056 07F4                       l1048 07EE                       l1138 0738  
                     l1156 0771                       l1158 077E                       l1182 0692  
                     STR_1 0009               __CFG_WRT$OFF 0000          ?_Lcd_Write_String 0070  
                     _main 065E                       btemp 007E                       ltemp 007E  
                     start 0000                       ttemp 007E         ??_Lcd_Write_String 0075  
                     wtemp 007E              __CFG_IESO$OFF 0000            __end_of_Lcd_Cmd 05B9  
            __CFG_MCLRE$ON 0000                 _Lcd_Config 056A                      ?_main 0070  
            __CFG_WDTE$OFF 0000                      _ANSEL 0188              ??_Keypad_Init 0070  
                    _PORTB 0006    __size_of_Lcd_Set_Cursor 004A                      _TRISB 0086  
                    _TRISD 0088            __end_of_findKey 07FC             __CFG_FCMEN$OFF 0000  
           __CFG_BOREN$OFF 0000                      pclath 000A                      ltemp0 007E  
                    ltemp1 0082                      ltemp2 0086                      ltemp3 0080  
                    ttemp0 007E                      ttemp1 0081                      ttemp2 0084  
                    ttemp3 0087                      ttemp4 007F                      status 0003  
                    wtemp0 007E                      wtemp1 0080                      wtemp2 0082  
                    wtemp3 0084                      wtemp4 0086                      wtemp5 0088  
                    wtemp6 007F           __end_of_Lcd_Init 0711           __end_of_Lcd_Port 059F  
          __initialization 07FC               __end_of_main 06B6                     ??_main 007B  
       __size_of_Lcd_Clear 000B              ?_readKeyboard 0070                     _ANSELH 0189  
      __end_of_Keypad_Init 0585                  ??_Lcd_Cmd 0071    __size_of_Lcd_Write_Char 0039  
           __CFG_PWRTE$OFF 0000                ?_Lcd_Config 0070                  ??_findKey 0074  
           ??_readKeyboard 0074            Lcd_Set_Cursor@a 0077            Lcd_Set_Cursor@b 0074  
          Lcd_Set_Cursor@y 0079            Lcd_Set_Cursor@z 0078    __end_of__initialization 07FC  
        __end_of_Lcd_Clear 0579             __pcstackCOMMON 0070             _Lcd_Set_Cursor 0614  
              _Keypad_Init 0579                  ?_Lcd_Init 0070                  ?_Lcd_Port 0070  
      __size_of_Lcd_Config 0004                 __pmaintext 065E  __size_of_Lcd_Write_String 0022  
   __end_of_Lcd_Set_Cursor 065E                 ??_Lcd_Init 0074                 ??_Lcd_Port 0070  
               __stringtab 0003             _Lcd_Write_Char 05DB                    _Lcd_Cmd 059F  
     __end_of_readKeyboard 0780            ?_Lcd_Set_Cursor 0074                    _findKey 0780  
                  __ptext1 0711                    __ptext2 0780                    __ptext3 05B9  
                  __ptext4 05DB                    __ptext5 0614                    __ptext6 06B6  
                  __ptext7 056A                    __ptext8 056E                    __ptext9 059F  
                  main@key 0020     __end_of_Lcd_Write_Char 0614       end_of_initialization 07FC  
             ??_Lcd_Config 0070                  Lcd_Port@a 0070            ?_Lcd_Write_Char 0070  
        Lcd_Write_String@a 0077          Lcd_Write_String@i 0075         __end_of_Lcd_Config 056E  
                _Lcd_Clear 056E           _Lcd_Write_String 05B9               ?_Keypad_Init 0070  
      start_initialization 07FC          __size_of_Lcd_Init 005B      __size_of_readKeyboard 006F  
        __size_of_Lcd_Port 001A                 ?_Lcd_Clear 0070            Lcd_Write_Char@a 0074  
          Lcd_Write_Char@y 0073               _readKeyboard 0711                  ___latbits 0002  
            __pcstackBANK0 0020                   ?_Lcd_Cmd 0070           ??_Lcd_Set_Cursor 0075  
                __pstrings 0003                   ?_findKey 0070                   Lcd_Cmd@a 0073  
              ??_Lcd_Clear 0074                __stringbase 0008           ??_Lcd_Write_Char 0071  
                 _Lcd_Init 06B6       __size_of_Keypad_Init 000C                   _Lcd_Port 0585  
 __end_of_Lcd_Write_String 05DB              readKeyboard@i 0074           __size_of_Lcd_Cmd 001A  
       __end_of__stringtab 0009           __size_of_findKey 007C                   __ptext10 0585  
                 __ptext11 0579          __CFG_BOR4V$BOR40V 0000              __size_of_main 0058  
                 findKey@a 0070                   findKey@b 0072         Lcd_Write_Char@temp 0072  
                stringcode 0003         Lcd_Set_Cursor@temp 007A                   stringdir 0003  
                 stringtab 0003  
