

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Wed Dec 14 09:08:08 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
     9                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2
    41                           	psect	text28,local,class=CODE,merge=1,delta=2
    42                           	psect	text29,local,class=CODE,merge=1,delta=2
    43                           	psect	text30,local,class=CODE,merge=1,delta=2
    44                           	psect	text31,local,class=CODE,merge=1,delta=2
    45                           	psect	text32,local,class=CODE,merge=1,delta=2
    46                           	psect	intentry,global,class=CODE,delta=2
    47                           	psect	text33,local,class=CODE,merge=1,delta=2
    48                           	psect	text34,local,class=CODE,merge=1,delta=2
    49                           	psect	text35,local,class=CODE,merge=1,delta=2
    50                           	psect	text36,local,class=CODE,merge=1,delta=2
    51                           	dabs	1,0x7E,2
    52  0000                     	;# 
    53  0001                     	;# 
    54  0002                     	;# 
    55  0003                     	;# 
    56  0004                     	;# 
    57  0005                     	;# 
    58  0006                     	;# 
    59  0007                     	;# 
    60  0008                     	;# 
    61  0009                     	;# 
    62  000A                     	;# 
    63  000B                     	;# 
    64  000C                     	;# 
    65  000D                     	;# 
    66  000E                     	;# 
    67  000E                     	;# 
    68  000F                     	;# 
    69  0010                     	;# 
    70  0011                     	;# 
    71  0012                     	;# 
    72  0013                     	;# 
    73  0014                     	;# 
    74  0015                     	;# 
    75  0015                     	;# 
    76  0016                     	;# 
    77  0017                     	;# 
    78  0018                     	;# 
    79  0019                     	;# 
    80  001A                     	;# 
    81  001B                     	;# 
    82  001B                     	;# 
    83  001C                     	;# 
    84  001D                     	;# 
    85  001E                     	;# 
    86  001F                     	;# 
    87  0081                     	;# 
    88  0085                     	;# 
    89  0086                     	;# 
    90  0087                     	;# 
    91  0088                     	;# 
    92  0089                     	;# 
    93  008C                     	;# 
    94  008D                     	;# 
    95  008E                     	;# 
    96  008F                     	;# 
    97  0090                     	;# 
    98  0091                     	;# 
    99  0092                     	;# 
   100  0093                     	;# 
   101  0093                     	;# 
   102  0093                     	;# 
   103  0094                     	;# 
   104  0095                     	;# 
   105  0096                     	;# 
   106  0097                     	;# 
   107  0098                     	;# 
   108  0099                     	;# 
   109  009A                     	;# 
   110  009B                     	;# 
   111  009C                     	;# 
   112  009D                     	;# 
   113  009E                     	;# 
   114  009F                     	;# 
   115  0105                     	;# 
   116  0107                     	;# 
   117  0108                     	;# 
   118  0109                     	;# 
   119  010C                     	;# 
   120  010C                     	;# 
   121  010D                     	;# 
   122  010E                     	;# 
   123  010F                     	;# 
   124  0185                     	;# 
   125  0187                     	;# 
   126  0188                     	;# 
   127  0189                     	;# 
   128  018C                     	;# 
   129  018D                     	;# 
   130                           
   131                           	psect	idataBANK3
   132  086B                     __pidataBANK3:	
   133                           
   134                           ;initializer for _tol
   135  086B  34D7               	retlw	215
   136  086C  3423               	retlw	35
   137  086D  343C               	retlw	60
   138                           
   139                           ;initializer for _avg
   140  086E  3419               	retlw	25
   141  086F  3400               	retlw	0
   142                           
   143                           	psect	strings
   144  0800                     __pstrings:	
   145  0800                     stringtab:	
   146  0800                     __stringtab:	
   147  0800                     stringcode:	
   148                           ;	String table - string pointers are 1 byte each
   149                           
   150  0800                     stringdir:	
   151  0800  3008               	movlw	high stringdir
   152  0801  008A               	movwf	10
   153  0802  0804               	movf	4,w
   154  0803  0A84               	incf	4,f
   155  0804  0782               	addwf	2,f
   156  0805                     __stringbase:	
   157  0805  3400               	retlw	0
   158  0806                     __end_of__stringtab:	
   159  0806                     exp@coeff:	
   160  0806  3400               	retlw	0
   161  0807  3480               	retlw	128
   162  0808  343F               	retlw	63
   163  0809  3472               	retlw	114
   164  080A  3431               	retlw	49
   165  080B  343F               	retlw	63
   166  080C  34FE               	retlw	254
   167  080D  3475               	retlw	117
   168  080E  343E               	retlw	62
   169  080F  3458               	retlw	88
   170  0810  3463               	retlw	99
   171  0811  343D               	retlw	61
   172  0812  3495               	retlw	149
   173  0813  341D               	retlw	29
   174  0814  343C               	retlw	60
   175  0815  34C5               	retlw	197
   176  0816  34AE               	retlw	174
   177  0817  343A               	retlw	58
   178  0818  3479               	retlw	121
   179  0819  3421               	retlw	33
   180  081A  3439               	retlw	57
   181  081B  3494               	retlw	148
   182  081C  3480               	retlw	128
   183  081D  3437               	retlw	55
   184  081E  3493               	retlw	147
   185  081F  34A7               	retlw	167
   186  0820  3435               	retlw	53
   187  0821  3456               	retlw	86
   188  0822  3415               	retlw	21
   189  0823  3434               	retlw	52
   190  0824                     __end_ofexp@coeff:	
   191  0824                     log@coeff:	
   192  0824  3400               	retlw	0
   193  0825  3400               	retlw	0
   194  0826  3400               	retlw	0
   195  0827  3400               	retlw	0
   196  0828  3480               	retlw	128
   197  0829  343F               	retlw	63
   198  082A  34F0               	retlw	240
   199  082B  34FF               	retlw	255
   200  082C  34BE               	retlw	190
   201  082D  34E2               	retlw	226
   202  082E  34A9               	retlw	169
   203  082F  343E               	retlw	62
   204  0830  3483               	retlw	131
   205  0831  3476               	retlw	118
   206  0832  34BE               	retlw	190
   207  0833  34AE               	retlw	174
   208  0834  342B               	retlw	43
   209  0835  343E               	retlw	62
   210  0836  343C               	retlw	60
   211  0837  34C3               	retlw	195
   212  0838  34BD               	retlw	189
   213  0839  34D2               	retlw	210
   214  083A  3413               	retlw	19
   215  083B  343D               	retlw	61
   216  083C  3478               	retlw	120
   217  083D  34D3               	retlw	211
   218  083E  34BB               	retlw	187
   219  083F                     __end_oflog@coeff:	
   220  001F                     _ADCON0bits	set	31
   221  001E                     _ADRESH	set	30
   222  000B                     _INTCONbits	set	11
   223  0006                     _PORTBbits	set	6
   224  0010                     _T1CON	set	16
   225  0010                     _T1CONbits	set	16
   226  000F                     _TMR1H	set	15
   227  000E                     _TMR1L	set	14
   228  0042                     _RD2	set	66
   229  0043                     _RD3	set	67
   230  0044                     _RD4	set	68
   231  0045                     _RD5	set	69
   232  0046                     _RD6	set	70
   233  0047                     _RD7	set	71
   234  009F                     _ADCON1bits	set	159
   235  009E                     _ADRESL	set	158
   236  0096                     _IOCBbits	set	150
   237  0085                     _TRISA	set	133
   238  0085                     _TRISAbits	set	133
   239  0086                     _TRISB	set	134
   240  0088                     _TRISD	set	136
   241  0188                     _ANSEL	set	392
   242  0189                     _ANSELH	set	393
   243  0188                     _ANSELbits	set	392
   244  083F                     STR_2:	
   245  083F  3448               	retlw	72	;'H'
   246  0840  3469               	retlw	105	;'i'
   247  0841  3472               	retlw	114	;'r'
   248  0842  3461               	retlw	97	;'a'
   249  0843  346E               	retlw	110	;'n'
   250  0844  3420               	retlw	32	;' '
   251  0845  3450               	retlw	80	;'P'
   252  0846  3465               	retlw	101	;'e'
   253  0847  3472               	retlw	114	;'r'
   254  0848  3465               	retlw	101	;'e'
   255  0849  3472               	retlw	114	;'r'
   256  084A  3461               	retlw	97	;'a'
   257  084B  3400               	retlw	0
   258  084C                     STR_1:	
   259  084C  3444               	retlw	68	;'D'
   260  084D  3465               	retlw	101	;'e'
   261  084E  3476               	retlw	118	;'v'
   262  084F  3465               	retlw	101	;'e'
   263  0850  346C               	retlw	108	;'l'
   264  0851  346F               	retlw	111	;'o'
   265  0852  3470               	retlw	112	;'p'
   266  0853  3465               	retlw	101	;'e'
   267  0854  3464               	retlw	100	;'d'
   268  0855  3420               	retlw	32	;' '
   269  0856  3442               	retlw	66	;'B'
   270  0857  3479               	retlw	121	;'y'
   271  0858  3400               	retlw	0
   272  0859                     STR_3:	
   273  0859  3444               	retlw	68	;'D'
   274  085A  3469               	retlw	105	;'i'
   275  085B  3473               	retlw	115	;'s'
   276  085C  3474               	retlw	116	;'t'
   277  085D  3461               	retlw	97	;'a'
   278  085E  346E               	retlw	110	;'n'
   279  085F  3463               	retlw	99	;'c'
   280  0860  3465               	retlw	101	;'e'
   281  0861  3420               	retlw	32	;' '
   282  0862  343D               	retlw	61	;'='
   283  0863  3420               	retlw	32	;' '
   284  0864  3400               	retlw	0
   285  0865                     STR_4:	
   286  0865  3463               	retlw	99	;'c'
   287  0866  346D               	retlw	109	;'m'
   288  0867  3400               	retlw	0
   289  0859                     
   290                           ; #config settings
   291  0000                     
   292                           	psect	cinit
   293  0015                     start_initialization:	
   294  0015                     __initialization:	
   295                           
   296                           ; Initialize objects allocated to BANK3
   297  0015  1683               	bsf	3,5	;RP0=1, select bank3
   298  0016  1703               	bsf	3,6	;RP1=1, select bank3
   299  0017  120A  158A  206B  120A  118A  	fcall	__pidataBANK3	;fetch initializer
   300  001C  00BB               	movwf	__pdataBANK3& (0+127)
   301  001D  120A  158A  206C  120A  118A  	fcall	__pidataBANK3+1	;fetch initializer
   302  0022  00BC               	movwf	(__pdataBANK3+1)& (0+127)
   303  0023  120A  158A  206D  120A  118A  	fcall	__pidataBANK3+2	;fetch initializer
   304  0028  00BD               	movwf	(__pdataBANK3+2)& (0+127)
   305  0029  120A  158A  206E  120A  118A  	fcall	__pidataBANK3+3	;fetch initializer
   306  002E  00BE               	movwf	(__pdataBANK3+3)& (0+127)
   307  002F  120A  158A  206F   	fcall	__pidataBANK3+4	;fetch initializer
   308  0032  00BF               	movwf	(__pdataBANK3+4)& (0+127)
   309                           
   310                           ; Clear objects allocated to BANK0
   311  0033  1283               	bcf	3,5	;RP0=0, select bank0
   312  0034  1303               	bcf	3,6	;RP1=0, select bank0
   313  0035  01C4               	clrf	__pbssBANK0& (0+127)
   314  0036  01C5               	clrf	(__pbssBANK0+1)& (0+127)
   315  0037  01C6               	clrf	(__pbssBANK0+2)& (0+127)
   316  0038  01C7               	clrf	(__pbssBANK0+3)& (0+127)
   317  0039  01C8               	clrf	(__pbssBANK0+4)& (0+127)
   318  003A  01C9               	clrf	(__pbssBANK0+5)& (0+127)
   319  003B  01CA               	clrf	(__pbssBANK0+6)& (0+127)
   320  003C  01CB               	clrf	(__pbssBANK0+7)& (0+127)
   321  003D  01CC               	clrf	(__pbssBANK0+8)& (0+127)
   322  003E                     end_of_initialization:	
   323                           ;End of C runtime variable initialization code
   324                           
   325  003E                     __end_of__initialization:	
   326  003E  0183               	clrf	3
   327  003F  120A  118A  2842   	ljmp	_main	;jump to C main() function
   328                           
   329                           	psect	bssBANK0
   330  0044                     __pbssBANK0:	
   331  0044                     _b:	
   332  0044                     	ds	3
   333  0047                     _a:	
   334  0047                     	ds	2
   335  0049                     _errno:	
   336  0049                     	ds	2
   337  004B                     _r:	
   338  004B                     	ds	2
   339                           
   340                           	psect	dataBANK3
   341  01BB                     __pdataBANK3:	
   342  01BB                     _tol:	
   343  01BB                     	ds	3
   344  01BE                     _avg:	
   345  01BE                     	ds	2
   346                           
   347                           	psect	cstackBANK3
   348  0190                     __pcstackBANK3:	
   349  0190                     ?_pow:	
   350  0190                     pow@x:	
   351                           ; 3 bytes @ 0x0
   352                           
   353                           
   354                           ; 3 bytes @ 0x0
   355  0190                     	ds	3
   356  0193                     pow@y:	
   357                           
   358                           ; 3 bytes @ 0x3
   359  0193                     	ds	3
   360  0196                     _pow$899:	
   361                           
   362                           ; 3 bytes @ 0x6
   363  0196                     	ds	3
   364  0199                     _pow$900:	
   365                           
   366                           ; 3 bytes @ 0x9
   367  0199                     	ds	3
   368  019C                     pow@sign:	
   369                           
   370                           ; 1 bytes @ 0xC
   371  019C                     	ds	1
   372  019D                     pow@yi:	
   373                           
   374                           ; 4 bytes @ 0xD
   375  019D                     	ds	4
   376  01A1                     analogRead@volt:	
   377                           
   378                           ; 3 bytes @ 0x11
   379  01A1                     	ds	3
   380  01A4                     _analogRead$898:	
   381                           
   382                           ; 3 bytes @ 0x14
   383  01A4                     	ds	3
   384  01A7                     analogRead@raw:	
   385                           
   386                           ; 2 bytes @ 0x17
   387  01A7                     	ds	2
   388  01A9                     ?_Process:	
   389  01A9                     Process@channel:	
   390                           ; 2 bytes @ 0x19
   391                           
   392                           
   393                           ; 2 bytes @ 0x19
   394  01A9                     	ds	2
   395  01AB                     ??_Process:	
   396                           
   397                           ; 1 bytes @ 0x1B
   398  01AB                     	ds	1
   399  01AC                     Process@previousDistance:	
   400                           
   401                           ; 2 bytes @ 0x1C
   402  01AC                     	ds	2
   403  01AE                     Process@accurateDistance:	
   404                           
   405                           ; 2 bytes @ 0x1E
   406  01AE                     	ds	2
   407  01B0                     Process@p:	
   408                           
   409                           ; 2 bytes @ 0x20
   410  01B0                     	ds	2
   411  01B2                     Process@i:	
   412                           
   413                           ; 2 bytes @ 0x22
   414  01B2                     	ds	2
   415  01B4                     Process@sum:	
   416                           
   417                           ; 2 bytes @ 0x24
   418  01B4                     	ds	2
   419  01B6                     Process@foo:	
   420                           
   421                           ; 2 bytes @ 0x26
   422  01B6                     	ds	2
   423  01B8                     ??_main:	
   424                           
   425                           ; 1 bytes @ 0x28
   426  01B8                     	ds	3
   427                           
   428                           	psect	cstackBANK1
   429  00A0                     __pcstackBANK1:	
   430  00A0                     ??_Lcd_Port:	
   431  00A0                     ??_Sharp_Init:	
   432                           ; 1 bytes @ 0x0
   433                           
   434  00A0                     ?___bmul:	
   435                           ; 1 bytes @ 0x0
   436                           
   437  00A0                     ?___awdiv:	
   438                           ; 1 bytes @ 0x0
   439                           
   440  00A0                     ?___awmod:	
   441                           ; 2 bytes @ 0x0
   442                           
   443  00A0                     ?___ftpack:	
   444                           ; 2 bytes @ 0x0
   445                           
   446  00A0                     ?_frexp:	
   447                           ; 3 bytes @ 0x0
   448                           
   449  00A0                     ?___ftneg:	
   450                           ; 3 bytes @ 0x0
   451                           
   452  00A0                     Lcd_Port@a:	
   453                           ; 3 bytes @ 0x0
   454                           
   455  00A0                     ___bmul@multiplicand:	
   456                           ; 1 bytes @ 0x0
   457                           
   458  00A0                     ___awdiv@divisor:	
   459                           ; 1 bytes @ 0x0
   460                           
   461  00A0                     ___awmod@divisor:	
   462                           ; 2 bytes @ 0x0
   463                           
   464  00A0                     ___ftpack@arg:	
   465                           ; 2 bytes @ 0x0
   466                           
   467  00A0                     ___ftneg@f1:	
   468                           ; 3 bytes @ 0x0
   469                           
   470  00A0                     frexp@value:	
   471                           ; 3 bytes @ 0x0
   472                           
   473                           
   474                           ; 3 bytes @ 0x0
   475  00A0                     	ds	1
   476  00A1                     ??_Lcd_Cmd:	
   477  00A1                     ??_Lcd_Write_Char:	
   478                           ; 1 bytes @ 0x1
   479                           
   480  00A1                     ??___bmul:	
   481                           ; 1 bytes @ 0x1
   482                           
   483                           
   484                           ; 1 bytes @ 0x1
   485  00A1                     	ds	1
   486  00A2                     Lcd_Write_Char@temp:	
   487  00A2                     ___bmul@product:	
   488                           ; 1 bytes @ 0x2
   489                           
   490  00A2                     ___awdiv@dividend:	
   491                           ; 1 bytes @ 0x2
   492                           
   493  00A2                     ___awmod@dividend:	
   494                           ; 2 bytes @ 0x2
   495                           
   496                           
   497                           ; 2 bytes @ 0x2
   498  00A2                     	ds	1
   499  00A3                     ??___ftneg:	
   500  00A3                     Lcd_Cmd@a:	
   501                           ; 1 bytes @ 0x3
   502                           
   503  00A3                     Lcd_Write_Char@y:	
   504                           ; 1 bytes @ 0x3
   505                           
   506  00A3                     ___bmul@multiplier:	
   507                           ; 1 bytes @ 0x3
   508                           
   509  00A3                     ___ftpack@exp:	
   510                           ; 1 bytes @ 0x3
   511                           
   512  00A3                     frexp@eptr:	
   513                           ; 1 bytes @ 0x3
   514                           
   515                           
   516                           ; 1 bytes @ 0x3
   517  00A3                     	ds	1
   518  00A4                     ??_frexp:	
   519  00A4                     ??_Lcd_Clear:	
   520                           ; 1 bytes @ 0x4
   521                           
   522  00A4                     ?_Lcd_Set_Cursor:	
   523                           ; 1 bytes @ 0x4
   524                           
   525  00A4                     ??_Lcd_Init:	
   526                           ; 1 bytes @ 0x4
   527                           
   528  00A4                     ??___awdiv:	
   529                           ; 1 bytes @ 0x4
   530                           
   531  00A4                     ??___awmod:	
   532                           ; 1 bytes @ 0x4
   533                           
   534  00A4                     Lcd_Set_Cursor@b:	
   535                           ; 1 bytes @ 0x4
   536                           
   537  00A4                     Lcd_Write_Char@a:	
   538                           ; 1 bytes @ 0x4
   539                           
   540  00A4                     ___ftpack@sign:	
   541                           ; 1 bytes @ 0x4
   542                           
   543                           
   544                           ; 1 bytes @ 0x4
   545  00A4                     	ds	1
   546  00A5                     ??___ftpack:	
   547  00A5                     ??_Lcd_Set_Cursor:	
   548                           ; 1 bytes @ 0x5
   549                           
   550  00A5                     ??_Lcd_Write_String:	
   551                           ; 1 bytes @ 0x5
   552                           
   553  00A5                     ___awdiv@counter:	
   554                           ; 1 bytes @ 0x5
   555                           
   556  00A5                     ___awmod@counter:	
   557                           ; 1 bytes @ 0x5
   558                           
   559  00A5                     Lcd_Write_String@i:	
   560                           ; 1 bytes @ 0x5
   561                           
   562                           
   563                           ; 2 bytes @ 0x5
   564  00A5                     	ds	1
   565  00A6                     ___awdiv@sign:	
   566  00A6                     ___awmod@sign:	
   567                           ; 1 bytes @ 0x6
   568                           
   569                           
   570                           ; 1 bytes @ 0x6
   571  00A6                     	ds	1
   572  00A7                     Lcd_Set_Cursor@a:	
   573  00A7                     Lcd_Write_String@a:	
   574                           ; 1 bytes @ 0x7
   575                           
   576  00A7                     ___awdiv@quotient:	
   577                           ; 1 bytes @ 0x7
   578                           
   579                           
   580                           ; 2 bytes @ 0x7
   581  00A7                     	ds	1
   582  00A8                     ?___awtoft:	
   583  00A8                     ?___lltoft:	
   584                           ; 3 bytes @ 0x8
   585                           
   586  00A8                     Lcd_Set_Cursor@z:	
   587                           ; 3 bytes @ 0x8
   588                           
   589  00A8                     ___awtoft@c:	
   590                           ; 1 bytes @ 0x8
   591                           
   592  00A8                     ___lltoft@c:	
   593                           ; 2 bytes @ 0x8
   594                           
   595                           
   596                           ; 4 bytes @ 0x8
   597  00A8                     	ds	1
   598  00A9                     Lcd_Set_Cursor@y:	
   599                           
   600                           ; 1 bytes @ 0x9
   601  00A9                     	ds	1
   602  00AA                     Lcd_Set_Cursor@temp:	
   603                           
   604                           ; 1 bytes @ 0xA
   605  00AA                     	ds	1
   606  00AB                     ??___awtoft:	
   607                           
   608                           ; 1 bytes @ 0xB
   609  00AB                     	ds	1
   610  00AC                     ??___lltoft:	
   611                           
   612                           ; 1 bytes @ 0xC
   613  00AC                     	ds	1
   614  00AD                     ___awtoft@sign:	
   615  00AD                     ___lltoft@exp:	
   616                           ; 1 bytes @ 0xD
   617                           
   618                           
   619                           ; 1 bytes @ 0xD
   620  00AD                     	ds	1
   621  00AE                     ?___ftmul:	
   622  00AE                     ___ftmul@f1:	
   623                           ; 3 bytes @ 0xE
   624                           
   625                           
   626                           ; 3 bytes @ 0xE
   627  00AE                     	ds	3
   628  00B1                     ___ftmul@f2:	
   629                           
   630                           ; 3 bytes @ 0x11
   631  00B1                     	ds	3
   632  00B4                     ??___ftmul:	
   633                           
   634                           ; 1 bytes @ 0x14
   635  00B4                     	ds	4
   636  00B8                     ___ftmul@exp:	
   637                           
   638                           ; 1 bytes @ 0x18
   639  00B8                     	ds	1
   640  00B9                     ___ftmul@f3_as_product:	
   641                           
   642                           ; 3 bytes @ 0x19
   643  00B9                     	ds	3
   644  00BC                     ___ftmul@cntr:	
   645                           
   646                           ; 1 bytes @ 0x1C
   647  00BC                     	ds	1
   648  00BD                     ___ftmul@sign:	
   649                           
   650                           ; 1 bytes @ 0x1D
   651  00BD                     	ds	1
   652  00BE                     ?___ftge:	
   653  00BE                     ?___ftadd:	
   654                           ; 1 bit 
   655                           
   656  00BE                     ?___ftdiv:	
   657                           ; 3 bytes @ 0x1E
   658                           
   659  00BE                     ?___fttol:	
   660                           ; 3 bytes @ 0x1E
   661                           
   662  00BE                     ___ftadd@f1:	
   663                           ; 4 bytes @ 0x1E
   664                           
   665  00BE                     ___ftdiv@f2:	
   666                           ; 3 bytes @ 0x1E
   667                           
   668  00BE                     ___ftge@ff1:	
   669                           ; 3 bytes @ 0x1E
   670                           
   671  00BE                     ___fttol@f1:	
   672                           ; 3 bytes @ 0x1E
   673                           
   674                           
   675                           ; 3 bytes @ 0x1E
   676  00BE                     	ds	3
   677  00C1                     ___ftadd@f2:	
   678  00C1                     ___ftdiv@f1:	
   679                           ; 3 bytes @ 0x21
   680                           
   681  00C1                     ___ftge@ff2:	
   682                           ; 3 bytes @ 0x21
   683                           
   684                           
   685                           ; 3 bytes @ 0x21
   686  00C1                     	ds	1
   687  00C2                     ??___fttol:	
   688                           
   689                           ; 1 bytes @ 0x22
   690  00C2                     	ds	2
   691  00C4                     ??___ftadd:	
   692  00C4                     ??___ftdiv:	
   693                           ; 1 bytes @ 0x24
   694                           
   695  00C4                     ??___ftge:	
   696                           ; 1 bytes @ 0x24
   697                           
   698                           
   699                           ; 1 bytes @ 0x24
   700  00C4                     	ds	2
   701  00C6                     ___fttol@sign1:	
   702                           
   703                           ; 1 bytes @ 0x26
   704  00C6                     	ds	1
   705  00C7                     ___fttol@lval:	
   706                           
   707                           ; 4 bytes @ 0x27
   708  00C7                     	ds	1
   709  00C8                     ___ftadd@sign:	
   710  00C8                     ___ftdiv@cntr:	
   711                           ; 1 bytes @ 0x28
   712                           
   713                           
   714                           ; 1 bytes @ 0x28
   715  00C8                     	ds	1
   716  00C9                     ___ftadd@exp2:	
   717  00C9                     ___ftdiv@f3:	
   718                           ; 1 bytes @ 0x29
   719                           
   720                           
   721                           ; 3 bytes @ 0x29
   722  00C9                     	ds	1
   723  00CA                     ___ftadd@exp1:	
   724                           
   725                           ; 1 bytes @ 0x2A
   726  00CA                     	ds	1
   727  00CB                     ?_eval_poly:	
   728  00CB                     ?___ftsub:	
   729                           ; 3 bytes @ 0x2B
   730                           
   731  00CB                     ___fttol@exp1:	
   732                           ; 3 bytes @ 0x2B
   733                           
   734  00CB                     ___ftsub@f2:	
   735                           ; 1 bytes @ 0x2B
   736                           
   737  00CB                     eval_poly@x:	
   738                           ; 3 bytes @ 0x2B
   739                           
   740                           
   741                           ; 3 bytes @ 0x2B
   742  00CB                     	ds	1
   743  00CC                     ?___altoft:	
   744  00CC                     ___ftdiv@exp:	
   745                           ; 3 bytes @ 0x2C
   746                           
   747  00CC                     ___altoft@c:	
   748                           ; 1 bytes @ 0x2C
   749                           
   750                           
   751                           ; 4 bytes @ 0x2C
   752  00CC                     	ds	1
   753  00CD                     ___ftdiv@sign:	
   754                           
   755                           ; 1 bytes @ 0x2D
   756  00CD                     	ds	1
   757  00CE                     eval_poly@d:	
   758  00CE                     ___ftsub@f1:	
   759                           ; 1 bytes @ 0x2E
   760                           
   761                           
   762                           ; 3 bytes @ 0x2E
   763  00CE                     	ds	1
   764  00CF                     eval_poly@n:	
   765                           
   766                           ; 2 bytes @ 0x2F
   767  00CF                     	ds	1
   768  00D0                     ??___altoft:	
   769                           
   770                           ; 1 bytes @ 0x30
   771  00D0                     	ds	1
   772  00D1                     ??_eval_poly:	
   773  00D1                     ??___ftsub:	
   774                           ; 1 bytes @ 0x31
   775                           
   776                           
   777                           ; 1 bytes @ 0x31
   778  00D1                     	ds	1
   779  00D2                     ___altoft@exp:	
   780  00D2                     eval_poly@res:	
   781                           ; 1 bytes @ 0x32
   782                           
   783                           
   784                           ; 3 bytes @ 0x32
   785  00D2                     	ds	1
   786  00D3                     ___altoft@sign:	
   787                           
   788                           ; 1 bytes @ 0x33
   789  00D3                     	ds	1
   790  00D4                     ?_floor:	
   791  00D4                     floor@x:	
   792                           ; 3 bytes @ 0x34
   793                           
   794                           
   795                           ; 3 bytes @ 0x34
   796  00D4                     	ds	1
   797  00D5                     ?_log:	
   798  00D5                     ?_ldexp:	
   799                           ; 3 bytes @ 0x35
   800                           
   801  00D5                     ldexp@value:	
   802                           ; 3 bytes @ 0x35
   803                           
   804  00D5                     log@x:	
   805                           ; 3 bytes @ 0x35
   806                           
   807                           
   808                           ; 3 bytes @ 0x35
   809  00D5                     	ds	2
   810  00D7                     ??_floor:	
   811                           
   812                           ; 1 bytes @ 0x37
   813  00D7                     	ds	1
   814  00D8                     ??_log:	
   815  00D8                     ldexp@newexp:	
   816                           ; 1 bytes @ 0x38
   817                           
   818  00D8                     floor@i:	
   819                           ; 2 bytes @ 0x38
   820                           
   821                           
   822                           ; 3 bytes @ 0x38
   823  00D8                     	ds	1
   824  00D9                     log@exponent:	
   825                           
   826                           ; 2 bytes @ 0x39
   827  00D9                     	ds	1
   828  00DA                     ??_ldexp:	
   829                           
   830                           ; 1 bytes @ 0x3A
   831  00DA                     	ds	1
   832  00DB                     floor@expon:	
   833                           
   834                           ; 2 bytes @ 0x3B
   835  00DB                     	ds	1
   836  00DC                     _ldexp$704:	
   837                           
   838                           ; 3 bytes @ 0x3C
   839  00DC                     	ds	3
   840  00DF                     ?_exp:	
   841  00DF                     exp@x:	
   842                           ; 3 bytes @ 0x3F
   843                           
   844                           
   845                           ; 3 bytes @ 0x3F
   846  00DF                     	ds	3
   847  00E2                     ??_exp:	
   848                           
   849                           ; 1 bytes @ 0x42
   850  00E2                     	ds	1
   851  00E3                     _exp$901:	
   852                           
   853                           ; 3 bytes @ 0x43
   854  00E3                     	ds	3
   855  00E6                     _exp$667:	
   856                           
   857                           ; 3 bytes @ 0x46
   858  00E6                     	ds	3
   859  00E9                     exp@exponent:	
   860                           
   861                           ; 2 bytes @ 0x49
   862  00E9                     	ds	2
   863  00EB                     exp@sign:	
   864                           
   865                           ; 1 bytes @ 0x4B
   866  00EB                     	ds	1
   867  00EC                     ??_pow:	
   868                           
   869                           ; 1 bytes @ 0x4C
   870  00EC                     	ds	1
   871  00ED                     ?_analogRead:	
   872  00ED                     analogRead@channel:	
   873                           ; 2 bytes @ 0x4D
   874                           
   875                           
   876                           ; 2 bytes @ 0x4D
   877  00ED                     	ds	2
   878  00EF                     ??_analogRead:	
   879                           
   880                           ; 1 bytes @ 0x4F
   881  00EF                     	ds	1
   882                           
   883                           	psect	cstackCOMMON
   884  0070                     __pcstackCOMMON:	
   885  0070                     ?_Lcd_Port:	
   886  0070                     ?_Lcd_Cmd:	
   887                           ; 1 bytes @ 0x0
   888                           
   889  0070                     ?_Lcd_Init:	
   890                           ; 1 bytes @ 0x0
   891                           
   892  0070                     ?_Lcd_Write_Char:	
   893                           ; 1 bytes @ 0x0
   894                           
   895  0070                     ?_Lcd_Write_String:	
   896                           ; 1 bytes @ 0x0
   897                           
   898  0070                     ?_Sharp_Init:	
   899                           ; 1 bytes @ 0x0
   900                           
   901  0070                     ?_ISR_HANDLER:	
   902                           ; 1 bytes @ 0x0
   903                           
   904  0070                     ?_Lcd_Clear:	
   905                           ; 1 bytes @ 0x0
   906                           
   907  0070                     ?_main:	
   908                           ; 2 bytes @ 0x0
   909                           
   910  0070                     ?i1___ftpack:	
   911                           ; 2 bytes @ 0x0
   912                           
   913  0070                     i1___ftpack@arg:	
   914                           ; 3 bytes @ 0x0
   915                           
   916                           
   917                           ; 3 bytes @ 0x0
   918  0070                     	ds	3
   919  0073                     i1___ftpack@exp:	
   920                           
   921                           ; 1 bytes @ 0x3
   922  0073                     	ds	1
   923  0074                     i1___ftpack@sign:	
   924                           
   925                           ; 1 bytes @ 0x4
   926  0074                     	ds	1
   927  0075                     ??i1___ftpack:	
   928                           
   929                           ; 1 bytes @ 0x5
   930  0075                     	ds	3
   931  0078                     ?i1___awtoft:	
   932  0078                     i1___awtoft@c:	
   933                           ; 3 bytes @ 0x8
   934                           
   935                           
   936                           ; 2 bytes @ 0x8
   937  0078                     	ds	3
   938  007B                     ??i1___awtoft:	
   939                           
   940                           ; 1 bytes @ 0xB
   941  007B                     	ds	2
   942  007D                     i1___awtoft@sign:	
   943                           
   944                           ; 1 bytes @ 0xD
   945  007D                     	ds	1
   946                           
   947                           	psect	cstackBANK0
   948  0020                     __pcstackBANK0:	
   949  0020                     ?i1___ftdiv:	
   950  0020                     i1___ftdiv@f2:	
   951                           ; 3 bytes @ 0x0
   952                           
   953                           
   954                           ; 3 bytes @ 0x0
   955  0020                     	ds	3
   956  0023                     i1___ftdiv@f1:	
   957                           
   958                           ; 3 bytes @ 0x3
   959  0023                     	ds	3
   960  0026                     ??i1___ftdiv:	
   961                           
   962                           ; 1 bytes @ 0x6
   963  0026                     	ds	4
   964  002A                     i1___ftdiv@cntr:	
   965                           
   966                           ; 1 bytes @ 0xA
   967  002A                     	ds	1
   968  002B                     i1___ftdiv@f3:	
   969                           
   970                           ; 3 bytes @ 0xB
   971  002B                     	ds	3
   972  002E                     i1___ftdiv@exp:	
   973                           
   974                           ; 1 bytes @ 0xE
   975  002E                     	ds	1
   976  002F                     i1___ftdiv@sign:	
   977                           
   978                           ; 1 bytes @ 0xF
   979  002F                     	ds	1
   980  0030                     ?i1___fttol:	
   981  0030                     i1___fttol@f1:	
   982                           ; 4 bytes @ 0x10
   983                           
   984                           
   985                           ; 3 bytes @ 0x10
   986  0030                     	ds	4
   987  0034                     ??i1___fttol:	
   988                           
   989                           ; 1 bytes @ 0x14
   990  0034                     	ds	4
   991  0038                     i1___fttol@sign1:	
   992                           
   993                           ; 1 bytes @ 0x18
   994  0038                     	ds	1
   995  0039                     i1___fttol@lval:	
   996                           
   997                           ; 4 bytes @ 0x19
   998  0039                     	ds	4
   999  003D                     i1___fttol@exp1:	
  1000                           
  1001                           ; 1 bytes @ 0x1D
  1002  003D                     	ds	1
  1003  003E                     ??_ISR_HANDLER:	
  1004                           
  1005                           ; 1 bytes @ 0x1E
  1006  003E                     	ds	6
  1007                           
  1008                           	psect	maintext
  1009  0042                     __pmaintext:	
  1010 ;;
  1011 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1012 ;;
  1013 ;; *************** function _main *****************
  1014 ;; Defined at:
  1015 ;;		line 53 in file "main.c"
  1016 ;; Parameters:    Size  Location     Type
  1017 ;;		None
  1018 ;; Auto vars:     Size  Location     Type
  1019 ;;		None
  1020 ;; Return value:  Size  Location     Type
  1021 ;;                  2  127[None  ] int 
  1022 ;; Registers used:
  1023 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1024 ;; Tracked objects:
  1025 ;;		On entry : B00/0
  1026 ;;		On exit  : 0/0
  1027 ;;		Unchanged: 0/0
  1028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1029 ;;      Params:         0       0       0       0       0
  1030 ;;      Locals:         0       0       0       0       0
  1031 ;;      Temps:          0       0       0       3       0
  1032 ;;      Totals:         0       0       0       3       0
  1033 ;;Total ram usage:        3 bytes
  1034 ;; Hardware stack levels required when called:   10
  1035 ;; This function calls:
  1036 ;;		_Lcd_Clear
  1037 ;;		_Lcd_Init
  1038 ;;		_Lcd_Set_Cursor
  1039 ;;		_Lcd_Write_Char
  1040 ;;		_Lcd_Write_String
  1041 ;;		_Process
  1042 ;;		_Sharp_Init
  1043 ;;		___awdiv
  1044 ;;		___awmod
  1045 ;; This function is called by:
  1046 ;;		Startup code after reset
  1047 ;; This function uses a non-reentrant model
  1048 ;;
  1049                           
  1050                           
  1051                           ;psect for function _main
  1052  0042                     _main:	
  1053                           
  1054                           ;main.c: 55: TRISB=0b00010000;
  1055                           
  1056                           ;incstack = 0
  1057 ;; hardware stack exceeded
  1058                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1059  0042  3010               	movlw	16
  1060  0043  1683               	bsf	3,5	;RP0=1, select bank1
  1061  0044  1303               	bcf	3,6	;RP1=0, select bank1
  1062  0045  0086               	movwf	6	;volatile
  1063                           
  1064                           ;main.c: 57: TRISD = 0x00;
  1065  0046  0188               	clrf	8	;volatile
  1066                           
  1067                           ;main.c: 60: INTCONbits.GIE=1;
  1068  0047  178B               	bsf	11,7	;volatile
  1069                           
  1070                           ;main.c: 61: INTCONbits.RBIF=0;
  1071  0048  100B               	bcf	11,0	;volatile
  1072                           
  1073                           ;main.c: 62: INTCONbits.RBIE=1;
  1074  0049  158B               	bsf	11,3	;volatile
  1075                           
  1076                           ;main.c: 63: IOCBbits.IOCB4=1;
  1077  004A  1616               	bsf	22,4	;volatile
  1078                           
  1079                           ;main.c: 67: Sharp_Init();
  1080  004B  160A  118A  2461  120A  118A  	fcall	_Sharp_Init
  1081                           
  1082                           ;main.c: 68: Lcd_Init();
  1083  0050  160A  118A  279F  120A  118A  	fcall	_Lcd_Init
  1084                           
  1085                           ;main.c: 70: Lcd_Set_Cursor(1,1);
  1086  0055  1683               	bsf	3,5	;RP0=1, select bank1
  1087  0056  1303               	bcf	3,6	;RP1=0, select bank1
  1088  0057  01A4               	clrf	Lcd_Set_Cursor@b^(0+128)
  1089  0058  0AA4               	incf	Lcd_Set_Cursor@b^(0+128),f
  1090  0059  3001               	movlw	1
  1091  005A  160A  118A  2693  120A  118A  	fcall	_Lcd_Set_Cursor
  1092                           
  1093                           ;main.c: 71: Lcd_Write_String("Developed By");
  1094  005F  3047               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1095  0060  160A  118A  24DF  120A  118A  	fcall	_Lcd_Write_String
  1096                           
  1097                           ;main.c: 72: Lcd_Set_Cursor(2,1);
  1098  0065  1683               	bsf	3,5	;RP0=1, select bank1
  1099  0066  1303               	bcf	3,6	;RP1=0, select bank1
  1100  0067  01A4               	clrf	Lcd_Set_Cursor@b^(0+128)
  1101  0068  0AA4               	incf	Lcd_Set_Cursor@b^(0+128),f
  1102  0069  3002               	movlw	2
  1103  006A  160A  118A  2693  120A  118A  	fcall	_Lcd_Set_Cursor
  1104                           
  1105                           ;main.c: 73: Lcd_Write_String("Hiran Perera");
  1106  006F  303A               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1107  0070  160A  118A  24DF  120A  118A  	fcall	_Lcd_Write_String
  1108                           
  1109                           ;main.c: 74: _delay((unsigned long)((3000)*(8000000/4000.0)));
  1110  0075  301F               	movlw	31
  1111  0076  1683               	bsf	3,5	;RP0=1, select bank3
  1112  0077  1703               	bsf	3,6	;RP1=1, select bank3
  1113  0078  00BA               	movwf	(??_main^(0+384)+2)
  1114  0079  3071               	movlw	113
  1115  007A  00B9               	movwf	(??_main^(0+384)+1)
  1116  007B  303B               	movlw	59
  1117  007C  00B8               	movwf	??_main^(0+384)
  1118  007D                     u4777:	
  1119  007D  0BB8               	decfsz	??_main^(0+384),f
  1120  007E  287D               	goto	u4777
  1121  007F  0BB9               	decfsz	(??_main^(0+384)+1),f
  1122  0080  287D               	goto	u4777
  1123  0081  0BBA               	decfsz	(??_main^(0+384)+2),f
  1124  0082  287D               	goto	u4777
  1125  0083  0000               	nop
  1126                           
  1127                           ;main.c: 75: Lcd_Clear();
  1128  0084  160A  118A  2443  120A  118A  	fcall	_Lcd_Clear
  1129                           
  1130                           ;main.c: 77: T1CON=0x10;
  1131  0089  3010               	movlw	16
  1132  008A  1283               	bcf	3,5	;RP0=0, select bank0
  1133  008B  1303               	bcf	3,6	;RP1=0, select bank0
  1134  008C  0090               	movwf	16	;volatile
  1135  008D                     l3464:	
  1136                           ;main.c: 79: while(1)
  1137                           
  1138                           
  1139                           ;main.c: 80: {
  1140                           ;main.c: 81: TMR1H=0x00;
  1141  008D  1283               	bcf	3,5	;RP0=0, select bank0
  1142  008E  1303               	bcf	3,6	;RP1=0, select bank0
  1143  008F  018F               	clrf	15	;volatile
  1144                           
  1145                           ;main.c: 82: TMR1L=0x00;
  1146  0090  018E               	clrf	14	;volatile
  1147                           
  1148                           ;main.c: 84: PORTBbits.RB0=0;
  1149  0091  1006               	bcf	6,0	;volatile
  1150                           
  1151                           ;main.c: 85: _delay((unsigned long)((2)*(8000000/4000000.0)));
  1152  0092  2893               	nop2	;2 cycle nop
  1153  0093  2894               	nop2	;2 cycle nop
  1154                           
  1155                           ;main.c: 86: PORTBbits.RB0=1;
  1156  0094  1283               	bcf	3,5	;RP0=0, select bank0
  1157  0095  1303               	bcf	3,6	;RP1=0, select bank0
  1158  0096  1406               	bsf	6,0	;volatile
  1159                           
  1160                           ;main.c: 87: _delay((unsigned long)((10)*(8000000/4000000.0)));
  1161  0097  3006               	movlw	6
  1162  0098  1683               	bsf	3,5	;RP0=1, select bank3
  1163  0099  1703               	bsf	3,6	;RP1=1, select bank3
  1164  009A  00B8               	movwf	??_main^(0+384)
  1165  009B                     u4787:	
  1166  009B  0BB8               	decfsz	??_main^(0+384),f
  1167  009C  289B               	goto	u4787
  1168  009D  0000               	nop
  1169                           
  1170                           ;main.c: 88: PORTBbits.RB0=0;
  1171  009E  1283               	bcf	3,5	;RP0=0, select bank0
  1172  009F  1303               	bcf	3,6	;RP1=0, select bank0
  1173  00A0  1006               	bcf	6,0	;volatile
  1174                           
  1175                           ;main.c: 90: _delay((unsigned long)((100)*(8000000/4000.0)));
  1176  00A1  3002               	movlw	2
  1177  00A2  1683               	bsf	3,5	;RP0=1, select bank3
  1178  00A3  1703               	bsf	3,6	;RP1=1, select bank3
  1179  00A4  00BA               	movwf	(??_main^(0+384)+2)
  1180  00A5  3004               	movlw	4
  1181  00A6  00B9               	movwf	(??_main^(0+384)+1)
  1182  00A7  30BA               	movlw	186
  1183  00A8  00B8               	movwf	??_main^(0+384)
  1184  00A9                     u4797:	
  1185  00A9  0BB8               	decfsz	??_main^(0+384),f
  1186  00AA  28A9               	goto	u4797
  1187  00AB  0BB9               	decfsz	(??_main^(0+384)+1),f
  1188  00AC  28A9               	goto	u4797
  1189  00AD  0BBA               	decfsz	(??_main^(0+384)+2),f
  1190  00AE  28A9               	goto	u4797
  1191  00AF  0000               	nop
  1192                           
  1193                           ;main.c: 92: r=Process(2);
  1194  00B0  3002               	movlw	2
  1195  00B1  1683               	bsf	3,5	;RP0=1, select bank3
  1196  00B2  1703               	bsf	3,6	;RP1=1, select bank3
  1197  00B3  00A9               	movwf	Process@channel^(0+384)
  1198  00B4  3000               	movlw	0
  1199  00B5  00AA               	movwf	(Process@channel^(0+384)+1)
  1200  00B6  120A  158A  2730  120A  118A  	fcall	_Process
  1201  00BB  1683               	bsf	3,5	;RP0=1, select bank3
  1202  00BC  1703               	bsf	3,6	;RP1=1, select bank3
  1203  00BD  082A               	movf	(?_Process+1)^(0+384),w
  1204  00BE  1283               	bcf	3,5	;RP0=0, select bank0
  1205  00BF  1303               	bcf	3,6	;RP1=0, select bank0
  1206  00C0  00CC               	movwf	_r+1
  1207  00C1  1683               	bsf	3,5	;RP0=1, select bank3
  1208  00C2  1703               	bsf	3,6	;RP1=1, select bank3
  1209  00C3  0829               	movf	?_Process^(0+384),w
  1210  00C4  1283               	bcf	3,5	;RP0=0, select bank0
  1211  00C5  1303               	bcf	3,6	;RP1=0, select bank0
  1212  00C6  00CB               	movwf	_r
  1213                           
  1214                           ;main.c: 98: Lcd_Clear();
  1215  00C7  160A  118A  2443  120A  118A  	fcall	_Lcd_Clear
  1216                           
  1217                           ;main.c: 99: Lcd_Set_Cursor(1,1);
  1218  00CC  1683               	bsf	3,5	;RP0=1, select bank1
  1219  00CD  1303               	bcf	3,6	;RP1=0, select bank1
  1220  00CE  01A4               	clrf	Lcd_Set_Cursor@b^(0+128)
  1221  00CF  0AA4               	incf	Lcd_Set_Cursor@b^(0+128),f
  1222  00D0  3001               	movlw	1
  1223  00D1  160A  118A  2693  120A  118A  	fcall	_Lcd_Set_Cursor
  1224                           
  1225                           ;main.c: 100: Lcd_Write_String("Distance = ");
  1226  00D6  3054               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1227  00D7  160A  118A  24DF  120A  118A  	fcall	_Lcd_Write_String
  1228                           
  1229                           ;main.c: 106: Lcd_Set_Cursor(1,14);
  1230  00DC  300E               	movlw	14
  1231  00DD  1683               	bsf	3,5	;RP0=1, select bank3
  1232  00DE  1703               	bsf	3,6	;RP1=1, select bank3
  1233  00DF  00B8               	movwf	??_main^(0+384)
  1234  00E0  0838               	movf	??_main^(0+384),w
  1235  00E1  1683               	bsf	3,5	;RP0=1, select bank1
  1236  00E2  1303               	bcf	3,6	;RP1=0, select bank1
  1237  00E3  00A4               	movwf	Lcd_Set_Cursor@b^(0+128)
  1238  00E4  3001               	movlw	1
  1239  00E5  160A  118A  2693  120A  118A  	fcall	_Lcd_Set_Cursor
  1240                           
  1241                           ;main.c: 107: Lcd_Write_Char(a%10+48);
  1242  00EA  300A               	movlw	10
  1243  00EB  1683               	bsf	3,5	;RP0=1, select bank1
  1244  00EC  1303               	bcf	3,6	;RP1=0, select bank1
  1245  00ED  00A0               	movwf	___awmod@divisor^(0+128)
  1246  00EE  3000               	movlw	0
  1247  00EF  00A1               	movwf	(___awmod@divisor^(0+128)+1)
  1248  00F0  1283               	bcf	3,5	;RP0=0, select bank0
  1249  00F1  1303               	bcf	3,6	;RP1=0, select bank0
  1250  00F2  0848               	movf	_a+1,w
  1251  00F3  1683               	bsf	3,5	;RP0=1, select bank1
  1252  00F4  1303               	bcf	3,6	;RP1=0, select bank1
  1253  00F5  00A3               	movwf	(___awmod@dividend+1)^(0+128)
  1254  00F6  1283               	bcf	3,5	;RP0=0, select bank0
  1255  00F7  1303               	bcf	3,6	;RP1=0, select bank0
  1256  00F8  0847               	movf	_a,w
  1257  00F9  1683               	bsf	3,5	;RP0=1, select bank1
  1258  00FA  1303               	bcf	3,6	;RP1=0, select bank1
  1259  00FB  00A2               	movwf	___awmod@dividend^(0+128)
  1260  00FC  160A  118A  2646  120A  118A  	fcall	___awmod
  1261  0101  1683               	bsf	3,5	;RP0=1, select bank1
  1262  0102  1303               	bcf	3,6	;RP1=0, select bank1
  1263  0103  0820               	movf	?___awmod^(0+128),w
  1264  0104  3E30               	addlw	48
  1265  0105  160A  118A  25B7  120A  118A  	fcall	_Lcd_Write_Char
  1266                           
  1267                           ;main.c: 109: a=a/10;
  1268  010A  300A               	movlw	10
  1269  010B  1683               	bsf	3,5	;RP0=1, select bank1
  1270  010C  1303               	bcf	3,6	;RP1=0, select bank1
  1271  010D  00A0               	movwf	___awdiv@divisor^(0+128)
  1272  010E  3000               	movlw	0
  1273  010F  00A1               	movwf	(___awdiv@divisor^(0+128)+1)
  1274  0110  1283               	bcf	3,5	;RP0=0, select bank0
  1275  0111  1303               	bcf	3,6	;RP1=0, select bank0
  1276  0112  0848               	movf	_a+1,w
  1277  0113  1683               	bsf	3,5	;RP0=1, select bank1
  1278  0114  1303               	bcf	3,6	;RP1=0, select bank1
  1279  0115  00A3               	movwf	(___awdiv@dividend+1)^(0+128)
  1280  0116  1283               	bcf	3,5	;RP0=0, select bank0
  1281  0117  1303               	bcf	3,6	;RP1=0, select bank0
  1282  0118  0847               	movf	_a,w
  1283  0119  1683               	bsf	3,5	;RP0=1, select bank1
  1284  011A  1303               	bcf	3,6	;RP1=0, select bank1
  1285  011B  00A2               	movwf	___awdiv@dividend^(0+128)
  1286  011C  160A  118A  26E5  120A  118A  	fcall	___awdiv
  1287  0121  1683               	bsf	3,5	;RP0=1, select bank1
  1288  0122  1303               	bcf	3,6	;RP1=0, select bank1
  1289  0123  0821               	movf	(?___awdiv+1)^(0+128),w
  1290  0124  1283               	bcf	3,5	;RP0=0, select bank0
  1291  0125  1303               	bcf	3,6	;RP1=0, select bank0
  1292  0126  00C8               	movwf	_a+1
  1293  0127  1683               	bsf	3,5	;RP0=1, select bank1
  1294  0128  1303               	bcf	3,6	;RP1=0, select bank1
  1295  0129  0820               	movf	?___awdiv^(0+128),w
  1296  012A  1283               	bcf	3,5	;RP0=0, select bank0
  1297  012B  1303               	bcf	3,6	;RP1=0, select bank0
  1298  012C  00C7               	movwf	_a
  1299                           
  1300                           ;main.c: 110: Lcd_Set_Cursor(1,13);
  1301  012D  300D               	movlw	13
  1302  012E  1683               	bsf	3,5	;RP0=1, select bank3
  1303  012F  1703               	bsf	3,6	;RP1=1, select bank3
  1304  0130  00B8               	movwf	??_main^(0+384)
  1305  0131  0838               	movf	??_main^(0+384),w
  1306  0132  1683               	bsf	3,5	;RP0=1, select bank1
  1307  0133  1303               	bcf	3,6	;RP1=0, select bank1
  1308  0134  00A4               	movwf	Lcd_Set_Cursor@b^(0+128)
  1309  0135  3001               	movlw	1
  1310  0136  160A  118A  2693  120A  118A  	fcall	_Lcd_Set_Cursor
  1311                           
  1312                           ;main.c: 111: Lcd_Write_Char(a%10+48);
  1313  013B  300A               	movlw	10
  1314  013C  1683               	bsf	3,5	;RP0=1, select bank1
  1315  013D  1303               	bcf	3,6	;RP1=0, select bank1
  1316  013E  00A0               	movwf	___awmod@divisor^(0+128)
  1317  013F  3000               	movlw	0
  1318  0140  00A1               	movwf	(___awmod@divisor^(0+128)+1)
  1319  0141  1283               	bcf	3,5	;RP0=0, select bank0
  1320  0142  1303               	bcf	3,6	;RP1=0, select bank0
  1321  0143  0848               	movf	_a+1,w
  1322  0144  1683               	bsf	3,5	;RP0=1, select bank1
  1323  0145  1303               	bcf	3,6	;RP1=0, select bank1
  1324  0146  00A3               	movwf	(___awmod@dividend+1)^(0+128)
  1325  0147  1283               	bcf	3,5	;RP0=0, select bank0
  1326  0148  1303               	bcf	3,6	;RP1=0, select bank0
  1327  0149  0847               	movf	_a,w
  1328  014A  1683               	bsf	3,5	;RP0=1, select bank1
  1329  014B  1303               	bcf	3,6	;RP1=0, select bank1
  1330  014C  00A2               	movwf	___awmod@dividend^(0+128)
  1331  014D  160A  118A  2646  120A  118A  	fcall	___awmod
  1332  0152  1683               	bsf	3,5	;RP0=1, select bank1
  1333  0153  1303               	bcf	3,6	;RP1=0, select bank1
  1334  0154  0820               	movf	?___awmod^(0+128),w
  1335  0155  3E30               	addlw	48
  1336  0156  160A  118A  25B7  120A  118A  	fcall	_Lcd_Write_Char
  1337                           
  1338                           ;main.c: 113: a=a/10;
  1339  015B  300A               	movlw	10
  1340  015C  1683               	bsf	3,5	;RP0=1, select bank1
  1341  015D  1303               	bcf	3,6	;RP1=0, select bank1
  1342  015E  00A0               	movwf	___awdiv@divisor^(0+128)
  1343  015F  3000               	movlw	0
  1344  0160  00A1               	movwf	(___awdiv@divisor^(0+128)+1)
  1345  0161  1283               	bcf	3,5	;RP0=0, select bank0
  1346  0162  1303               	bcf	3,6	;RP1=0, select bank0
  1347  0163  0848               	movf	_a+1,w
  1348  0164  1683               	bsf	3,5	;RP0=1, select bank1
  1349  0165  1303               	bcf	3,6	;RP1=0, select bank1
  1350  0166  00A3               	movwf	(___awdiv@dividend+1)^(0+128)
  1351  0167  1283               	bcf	3,5	;RP0=0, select bank0
  1352  0168  1303               	bcf	3,6	;RP1=0, select bank0
  1353  0169  0847               	movf	_a,w
  1354  016A  1683               	bsf	3,5	;RP0=1, select bank1
  1355  016B  1303               	bcf	3,6	;RP1=0, select bank1
  1356  016C  00A2               	movwf	___awdiv@dividend^(0+128)
  1357  016D  160A  118A  26E5  120A  118A  	fcall	___awdiv
  1358  0172  1683               	bsf	3,5	;RP0=1, select bank1
  1359  0173  1303               	bcf	3,6	;RP1=0, select bank1
  1360  0174  0821               	movf	(?___awdiv+1)^(0+128),w
  1361  0175  1283               	bcf	3,5	;RP0=0, select bank0
  1362  0176  1303               	bcf	3,6	;RP1=0, select bank0
  1363  0177  00C8               	movwf	_a+1
  1364  0178  1683               	bsf	3,5	;RP0=1, select bank1
  1365  0179  1303               	bcf	3,6	;RP1=0, select bank1
  1366  017A  0820               	movf	?___awdiv^(0+128),w
  1367  017B  1283               	bcf	3,5	;RP0=0, select bank0
  1368  017C  1303               	bcf	3,6	;RP1=0, select bank0
  1369  017D  00C7               	movwf	_a
  1370                           
  1371                           ;main.c: 114: Lcd_Set_Cursor(1,12);
  1372  017E  300C               	movlw	12
  1373  017F  1683               	bsf	3,5	;RP0=1, select bank3
  1374  0180  1703               	bsf	3,6	;RP1=1, select bank3
  1375  0181  00B8               	movwf	??_main^(0+384)
  1376  0182  0838               	movf	??_main^(0+384),w
  1377  0183  1683               	bsf	3,5	;RP0=1, select bank1
  1378  0184  1303               	bcf	3,6	;RP1=0, select bank1
  1379  0185  00A4               	movwf	Lcd_Set_Cursor@b^(0+128)
  1380  0186  3001               	movlw	1
  1381  0187  160A  118A  2693  120A  118A  	fcall	_Lcd_Set_Cursor
  1382                           
  1383                           ;main.c: 115: Lcd_Write_Char(a%10+48);
  1384  018C  300A               	movlw	10
  1385  018D  1683               	bsf	3,5	;RP0=1, select bank1
  1386  018E  1303               	bcf	3,6	;RP1=0, select bank1
  1387  018F  00A0               	movwf	___awmod@divisor^(0+128)
  1388  0190  3000               	movlw	0
  1389  0191  00A1               	movwf	(___awmod@divisor^(0+128)+1)
  1390  0192  1283               	bcf	3,5	;RP0=0, select bank0
  1391  0193  1303               	bcf	3,6	;RP1=0, select bank0
  1392  0194  0848               	movf	_a+1,w
  1393  0195  1683               	bsf	3,5	;RP0=1, select bank1
  1394  0196  1303               	bcf	3,6	;RP1=0, select bank1
  1395  0197  00A3               	movwf	(___awmod@dividend+1)^(0+128)
  1396  0198  1283               	bcf	3,5	;RP0=0, select bank0
  1397  0199  1303               	bcf	3,6	;RP1=0, select bank0
  1398  019A  0847               	movf	_a,w
  1399  019B  1683               	bsf	3,5	;RP0=1, select bank1
  1400  019C  1303               	bcf	3,6	;RP1=0, select bank1
  1401  019D  00A2               	movwf	___awmod@dividend^(0+128)
  1402  019E  160A  118A  2646  120A  118A  	fcall	___awmod
  1403  01A3  1683               	bsf	3,5	;RP0=1, select bank1
  1404  01A4  1303               	bcf	3,6	;RP1=0, select bank1
  1405  01A5  0820               	movf	?___awmod^(0+128),w
  1406  01A6  3E30               	addlw	48
  1407  01A7  160A  118A  25B7  120A  118A  	fcall	_Lcd_Write_Char
  1408                           
  1409                           ;main.c: 117: Lcd_Set_Cursor(1,15);
  1410  01AC  300F               	movlw	15
  1411  01AD  1683               	bsf	3,5	;RP0=1, select bank3
  1412  01AE  1703               	bsf	3,6	;RP1=1, select bank3
  1413  01AF  00B8               	movwf	??_main^(0+384)
  1414  01B0  0838               	movf	??_main^(0+384),w
  1415  01B1  1683               	bsf	3,5	;RP0=1, select bank1
  1416  01B2  1303               	bcf	3,6	;RP1=0, select bank1
  1417  01B3  00A4               	movwf	Lcd_Set_Cursor@b^(0+128)
  1418  01B4  3001               	movlw	1
  1419  01B5  160A  118A  2693  120A  118A  	fcall	_Lcd_Set_Cursor
  1420                           
  1421                           ;main.c: 118: Lcd_Write_String("cm");
  1422  01BA  3060               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1423  01BB  160A  118A  24DF  120A  118A  	fcall	_Lcd_Write_String
  1424                           
  1425                           ;main.c: 120: Lcd_Set_Cursor(2,1);
  1426  01C0  1683               	bsf	3,5	;RP0=1, select bank1
  1427  01C1  1303               	bcf	3,6	;RP1=0, select bank1
  1428  01C2  01A4               	clrf	Lcd_Set_Cursor@b^(0+128)
  1429  01C3  0AA4               	incf	Lcd_Set_Cursor@b^(0+128),f
  1430  01C4  3002               	movlw	2
  1431  01C5  160A  118A  2693  120A  118A  	fcall	_Lcd_Set_Cursor
  1432                           
  1433                           ;main.c: 121: Lcd_Write_String("Distance = ");
  1434  01CA  3054               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1435  01CB  160A  118A  24DF  120A  118A  	fcall	_Lcd_Write_String
  1436                           
  1437                           ;main.c: 123: Lcd_Set_Cursor(2,15);
  1438  01D0  300F               	movlw	15
  1439  01D1  1683               	bsf	3,5	;RP0=1, select bank3
  1440  01D2  1703               	bsf	3,6	;RP1=1, select bank3
  1441  01D3  00B8               	movwf	??_main^(0+384)
  1442  01D4  0838               	movf	??_main^(0+384),w
  1443  01D5  1683               	bsf	3,5	;RP0=1, select bank1
  1444  01D6  1303               	bcf	3,6	;RP1=0, select bank1
  1445  01D7  00A4               	movwf	Lcd_Set_Cursor@b^(0+128)
  1446  01D8  3002               	movlw	2
  1447  01D9  160A  118A  2693  120A  118A  	fcall	_Lcd_Set_Cursor
  1448                           
  1449                           ;main.c: 124: Lcd_Write_Char(r%10+48);
  1450  01DE  300A               	movlw	10
  1451  01DF  1683               	bsf	3,5	;RP0=1, select bank1
  1452  01E0  1303               	bcf	3,6	;RP1=0, select bank1
  1453  01E1  00A0               	movwf	___awmod@divisor^(0+128)
  1454  01E2  3000               	movlw	0
  1455  01E3  00A1               	movwf	(___awmod@divisor^(0+128)+1)
  1456  01E4  1283               	bcf	3,5	;RP0=0, select bank0
  1457  01E5  1303               	bcf	3,6	;RP1=0, select bank0
  1458  01E6  084C               	movf	_r+1,w
  1459  01E7  1683               	bsf	3,5	;RP0=1, select bank1
  1460  01E8  1303               	bcf	3,6	;RP1=0, select bank1
  1461  01E9  00A3               	movwf	(___awmod@dividend+1)^(0+128)
  1462  01EA  1283               	bcf	3,5	;RP0=0, select bank0
  1463  01EB  1303               	bcf	3,6	;RP1=0, select bank0
  1464  01EC  084B               	movf	_r,w
  1465  01ED  1683               	bsf	3,5	;RP0=1, select bank1
  1466  01EE  1303               	bcf	3,6	;RP1=0, select bank1
  1467  01EF  00A2               	movwf	___awmod@dividend^(0+128)
  1468  01F0  160A  118A  2646  120A  118A  	fcall	___awmod
  1469  01F5  1683               	bsf	3,5	;RP0=1, select bank1
  1470  01F6  1303               	bcf	3,6	;RP1=0, select bank1
  1471  01F7  0820               	movf	?___awmod^(0+128),w
  1472  01F8  3E30               	addlw	48
  1473  01F9  160A  118A  25B7  120A  118A  	fcall	_Lcd_Write_Char
  1474                           
  1475                           ;main.c: 126: r=r/10;
  1476  01FE  300A               	movlw	10
  1477  01FF  1683               	bsf	3,5	;RP0=1, select bank1
  1478  0200  1303               	bcf	3,6	;RP1=0, select bank1
  1479  0201  00A0               	movwf	___awdiv@divisor^(0+128)
  1480  0202  3000               	movlw	0
  1481  0203  00A1               	movwf	(___awdiv@divisor^(0+128)+1)
  1482  0204  1283               	bcf	3,5	;RP0=0, select bank0
  1483  0205  1303               	bcf	3,6	;RP1=0, select bank0
  1484  0206  084C               	movf	_r+1,w
  1485  0207  1683               	bsf	3,5	;RP0=1, select bank1
  1486  0208  1303               	bcf	3,6	;RP1=0, select bank1
  1487  0209  00A3               	movwf	(___awdiv@dividend+1)^(0+128)
  1488  020A  1283               	bcf	3,5	;RP0=0, select bank0
  1489  020B  1303               	bcf	3,6	;RP1=0, select bank0
  1490  020C  084B               	movf	_r,w
  1491  020D  1683               	bsf	3,5	;RP0=1, select bank1
  1492  020E  1303               	bcf	3,6	;RP1=0, select bank1
  1493  020F  00A2               	movwf	___awdiv@dividend^(0+128)
  1494  0210  160A  118A  26E5  120A  118A  	fcall	___awdiv
  1495  0215  1683               	bsf	3,5	;RP0=1, select bank1
  1496  0216  1303               	bcf	3,6	;RP1=0, select bank1
  1497  0217  0821               	movf	(?___awdiv+1)^(0+128),w
  1498  0218  1283               	bcf	3,5	;RP0=0, select bank0
  1499  0219  1303               	bcf	3,6	;RP1=0, select bank0
  1500  021A  00CC               	movwf	_r+1
  1501  021B  1683               	bsf	3,5	;RP0=1, select bank1
  1502  021C  1303               	bcf	3,6	;RP1=0, select bank1
  1503  021D  0820               	movf	?___awdiv^(0+128),w
  1504  021E  1283               	bcf	3,5	;RP0=0, select bank0
  1505  021F  1303               	bcf	3,6	;RP1=0, select bank0
  1506  0220  00CB               	movwf	_r
  1507                           
  1508                           ;main.c: 127: Lcd_Set_Cursor(2,14);
  1509  0221  300E               	movlw	14
  1510  0222  1683               	bsf	3,5	;RP0=1, select bank3
  1511  0223  1703               	bsf	3,6	;RP1=1, select bank3
  1512  0224  00B8               	movwf	??_main^(0+384)
  1513  0225  0838               	movf	??_main^(0+384),w
  1514  0226  1683               	bsf	3,5	;RP0=1, select bank1
  1515  0227  1303               	bcf	3,6	;RP1=0, select bank1
  1516  0228  00A4               	movwf	Lcd_Set_Cursor@b^(0+128)
  1517  0229  3002               	movlw	2
  1518  022A  160A  118A  2693  120A  118A  	fcall	_Lcd_Set_Cursor
  1519                           
  1520                           ;main.c: 128: Lcd_Write_Char(r%10+48);
  1521  022F  300A               	movlw	10
  1522  0230  1683               	bsf	3,5	;RP0=1, select bank1
  1523  0231  1303               	bcf	3,6	;RP1=0, select bank1
  1524  0232  00A0               	movwf	___awmod@divisor^(0+128)
  1525  0233  3000               	movlw	0
  1526  0234  00A1               	movwf	(___awmod@divisor^(0+128)+1)
  1527  0235  1283               	bcf	3,5	;RP0=0, select bank0
  1528  0236  1303               	bcf	3,6	;RP1=0, select bank0
  1529  0237  084C               	movf	_r+1,w
  1530  0238  1683               	bsf	3,5	;RP0=1, select bank1
  1531  0239  1303               	bcf	3,6	;RP1=0, select bank1
  1532  023A  00A3               	movwf	(___awmod@dividend+1)^(0+128)
  1533  023B  1283               	bcf	3,5	;RP0=0, select bank0
  1534  023C  1303               	bcf	3,6	;RP1=0, select bank0
  1535  023D  084B               	movf	_r,w
  1536  023E  1683               	bsf	3,5	;RP0=1, select bank1
  1537  023F  1303               	bcf	3,6	;RP1=0, select bank1
  1538  0240  00A2               	movwf	___awmod@dividend^(0+128)
  1539  0241  160A  118A  2646  120A  118A  	fcall	___awmod
  1540  0246  1683               	bsf	3,5	;RP0=1, select bank1
  1541  0247  1303               	bcf	3,6	;RP1=0, select bank1
  1542  0248  0820               	movf	?___awmod^(0+128),w
  1543  0249  3E30               	addlw	48
  1544  024A  160A  118A  25B7  120A  118A  	fcall	_Lcd_Write_Char
  1545                           
  1546                           ;main.c: 130: r=r/10;
  1547  024F  300A               	movlw	10
  1548  0250  1683               	bsf	3,5	;RP0=1, select bank1
  1549  0251  1303               	bcf	3,6	;RP1=0, select bank1
  1550  0252  00A0               	movwf	___awdiv@divisor^(0+128)
  1551  0253  3000               	movlw	0
  1552  0254  00A1               	movwf	(___awdiv@divisor^(0+128)+1)
  1553  0255  1283               	bcf	3,5	;RP0=0, select bank0
  1554  0256  1303               	bcf	3,6	;RP1=0, select bank0
  1555  0257  084C               	movf	_r+1,w
  1556  0258  1683               	bsf	3,5	;RP0=1, select bank1
  1557  0259  1303               	bcf	3,6	;RP1=0, select bank1
  1558  025A  00A3               	movwf	(___awdiv@dividend+1)^(0+128)
  1559  025B  1283               	bcf	3,5	;RP0=0, select bank0
  1560  025C  1303               	bcf	3,6	;RP1=0, select bank0
  1561  025D  084B               	movf	_r,w
  1562  025E  1683               	bsf	3,5	;RP0=1, select bank1
  1563  025F  1303               	bcf	3,6	;RP1=0, select bank1
  1564  0260  00A2               	movwf	___awdiv@dividend^(0+128)
  1565  0261  160A  118A  26E5  120A  118A  	fcall	___awdiv
  1566  0266  1683               	bsf	3,5	;RP0=1, select bank1
  1567  0267  1303               	bcf	3,6	;RP1=0, select bank1
  1568  0268  0821               	movf	(?___awdiv+1)^(0+128),w
  1569  0269  1283               	bcf	3,5	;RP0=0, select bank0
  1570  026A  1303               	bcf	3,6	;RP1=0, select bank0
  1571  026B  00CC               	movwf	_r+1
  1572  026C  1683               	bsf	3,5	;RP0=1, select bank1
  1573  026D  1303               	bcf	3,6	;RP1=0, select bank1
  1574  026E  0820               	movf	?___awdiv^(0+128),w
  1575  026F  1283               	bcf	3,5	;RP0=0, select bank0
  1576  0270  1303               	bcf	3,6	;RP1=0, select bank0
  1577  0271  00CB               	movwf	_r
  1578                           
  1579                           ;main.c: 131: Lcd_Set_Cursor(2,13);
  1580  0272  300D               	movlw	13
  1581  0273  1683               	bsf	3,5	;RP0=1, select bank3
  1582  0274  1703               	bsf	3,6	;RP1=1, select bank3
  1583  0275  00B8               	movwf	??_main^(0+384)
  1584  0276  0838               	movf	??_main^(0+384),w
  1585  0277  1683               	bsf	3,5	;RP0=1, select bank1
  1586  0278  1303               	bcf	3,6	;RP1=0, select bank1
  1587  0279  00A4               	movwf	Lcd_Set_Cursor@b^(0+128)
  1588  027A  3002               	movlw	2
  1589  027B  160A  118A  2693  120A  118A  	fcall	_Lcd_Set_Cursor
  1590                           
  1591                           ;main.c: 132: Lcd_Write_Char(r%10+48);
  1592  0280  300A               	movlw	10
  1593  0281  1683               	bsf	3,5	;RP0=1, select bank1
  1594  0282  1303               	bcf	3,6	;RP1=0, select bank1
  1595  0283  00A0               	movwf	___awmod@divisor^(0+128)
  1596  0284  3000               	movlw	0
  1597  0285  00A1               	movwf	(___awmod@divisor^(0+128)+1)
  1598  0286  1283               	bcf	3,5	;RP0=0, select bank0
  1599  0287  1303               	bcf	3,6	;RP1=0, select bank0
  1600  0288  084C               	movf	_r+1,w
  1601  0289  1683               	bsf	3,5	;RP0=1, select bank1
  1602  028A  1303               	bcf	3,6	;RP1=0, select bank1
  1603  028B  00A3               	movwf	(___awmod@dividend+1)^(0+128)
  1604  028C  1283               	bcf	3,5	;RP0=0, select bank0
  1605  028D  1303               	bcf	3,6	;RP1=0, select bank0
  1606  028E  084B               	movf	_r,w
  1607  028F  1683               	bsf	3,5	;RP0=1, select bank1
  1608  0290  1303               	bcf	3,6	;RP1=0, select bank1
  1609  0291  00A2               	movwf	___awmod@dividend^(0+128)
  1610  0292  160A  118A  2646  120A  118A  	fcall	___awmod
  1611  0297  1683               	bsf	3,5	;RP0=1, select bank1
  1612  0298  1303               	bcf	3,6	;RP1=0, select bank1
  1613  0299  0820               	movf	?___awmod^(0+128),w
  1614  029A  3E30               	addlw	48
  1615  029B  160A  118A  25B7  120A  118A  	fcall	_Lcd_Write_Char
  1616                           
  1617                           ;main.c: 134: r=r/10;
  1618  02A0  300A               	movlw	10
  1619  02A1  1683               	bsf	3,5	;RP0=1, select bank1
  1620  02A2  1303               	bcf	3,6	;RP1=0, select bank1
  1621  02A3  00A0               	movwf	___awdiv@divisor^(0+128)
  1622  02A4  3000               	movlw	0
  1623  02A5  00A1               	movwf	(___awdiv@divisor^(0+128)+1)
  1624  02A6  1283               	bcf	3,5	;RP0=0, select bank0
  1625  02A7  1303               	bcf	3,6	;RP1=0, select bank0
  1626  02A8  084C               	movf	_r+1,w
  1627  02A9  1683               	bsf	3,5	;RP0=1, select bank1
  1628  02AA  1303               	bcf	3,6	;RP1=0, select bank1
  1629  02AB  00A3               	movwf	(___awdiv@dividend+1)^(0+128)
  1630  02AC  1283               	bcf	3,5	;RP0=0, select bank0
  1631  02AD  1303               	bcf	3,6	;RP1=0, select bank0
  1632  02AE  084B               	movf	_r,w
  1633  02AF  1683               	bsf	3,5	;RP0=1, select bank1
  1634  02B0  1303               	bcf	3,6	;RP1=0, select bank1
  1635  02B1  00A2               	movwf	___awdiv@dividend^(0+128)
  1636  02B2  160A  118A  26E5  120A  118A  	fcall	___awdiv
  1637  02B7  1683               	bsf	3,5	;RP0=1, select bank1
  1638  02B8  1303               	bcf	3,6	;RP1=0, select bank1
  1639  02B9  0821               	movf	(?___awdiv+1)^(0+128),w
  1640  02BA  1283               	bcf	3,5	;RP0=0, select bank0
  1641  02BB  1303               	bcf	3,6	;RP1=0, select bank0
  1642  02BC  00CC               	movwf	_r+1
  1643  02BD  1683               	bsf	3,5	;RP0=1, select bank1
  1644  02BE  1303               	bcf	3,6	;RP1=0, select bank1
  1645  02BF  0820               	movf	?___awdiv^(0+128),w
  1646  02C0  1283               	bcf	3,5	;RP0=0, select bank0
  1647  02C1  1303               	bcf	3,6	;RP1=0, select bank0
  1648  02C2  00CB               	movwf	_r
  1649                           
  1650                           ;main.c: 135: Lcd_Set_Cursor(2,12);
  1651  02C3  300C               	movlw	12
  1652  02C4  1683               	bsf	3,5	;RP0=1, select bank3
  1653  02C5  1703               	bsf	3,6	;RP1=1, select bank3
  1654  02C6  00B8               	movwf	??_main^(0+384)
  1655  02C7  0838               	movf	??_main^(0+384),w
  1656  02C8  1683               	bsf	3,5	;RP0=1, select bank1
  1657  02C9  1303               	bcf	3,6	;RP1=0, select bank1
  1658  02CA  00A4               	movwf	Lcd_Set_Cursor@b^(0+128)
  1659  02CB  3002               	movlw	2
  1660  02CC  160A  118A  2693  120A  118A  	fcall	_Lcd_Set_Cursor
  1661                           
  1662                           ;main.c: 136: Lcd_Write_Char(r%10+48);
  1663  02D1  300A               	movlw	10
  1664  02D2  1683               	bsf	3,5	;RP0=1, select bank1
  1665  02D3  1303               	bcf	3,6	;RP1=0, select bank1
  1666  02D4  00A0               	movwf	___awmod@divisor^(0+128)
  1667  02D5  3000               	movlw	0
  1668  02D6  00A1               	movwf	(___awmod@divisor^(0+128)+1)
  1669  02D7  1283               	bcf	3,5	;RP0=0, select bank0
  1670  02D8  1303               	bcf	3,6	;RP1=0, select bank0
  1671  02D9  084C               	movf	_r+1,w
  1672  02DA  1683               	bsf	3,5	;RP0=1, select bank1
  1673  02DB  1303               	bcf	3,6	;RP1=0, select bank1
  1674  02DC  00A3               	movwf	(___awmod@dividend+1)^(0+128)
  1675  02DD  1283               	bcf	3,5	;RP0=0, select bank0
  1676  02DE  1303               	bcf	3,6	;RP1=0, select bank0
  1677  02DF  084B               	movf	_r,w
  1678  02E0  1683               	bsf	3,5	;RP0=1, select bank1
  1679  02E1  1303               	bcf	3,6	;RP1=0, select bank1
  1680  02E2  00A2               	movwf	___awmod@dividend^(0+128)
  1681  02E3  160A  118A  2646  120A  118A  	fcall	___awmod
  1682  02E8  1683               	bsf	3,5	;RP0=1, select bank1
  1683  02E9  1303               	bcf	3,6	;RP1=0, select bank1
  1684  02EA  0820               	movf	?___awmod^(0+128),w
  1685  02EB  3E30               	addlw	48
  1686  02EC  160A  118A  25B7  120A  118A  	fcall	_Lcd_Write_Char
  1687                           
  1688                           ;main.c: 145: _delay((unsigned long)((100)*(8000000/4000.0)));
  1689  02F1  3002               	movlw	2
  1690  02F2  1683               	bsf	3,5	;RP0=1, select bank3
  1691  02F3  1703               	bsf	3,6	;RP1=1, select bank3
  1692  02F4  00BA               	movwf	(??_main^(0+384)+2)
  1693  02F5  3004               	movlw	4
  1694  02F6  00B9               	movwf	(??_main^(0+384)+1)
  1695  02F7  30BA               	movlw	186
  1696  02F8  00B8               	movwf	??_main^(0+384)
  1697  02F9                     u4807:	
  1698  02F9  0BB8               	decfsz	??_main^(0+384),f
  1699  02FA  2AF9               	goto	u4807
  1700  02FB  0BB9               	decfsz	(??_main^(0+384)+1),f
  1701  02FC  2AF9               	goto	u4807
  1702  02FD  0BBA               	decfsz	(??_main^(0+384)+2),f
  1703  02FE  2AF9               	goto	u4807
  1704  02FF  0000               	nop
  1705  0300  288D               	goto	l3464
  1706  0301                     __end_of_main:	
  1707                           ;main.c: 146: }
  1708                           ;main.c: 147: return 0;
  1709                           ;	Return value of _main is never used
  1710                           
  1711                           
  1712                           	psect	text1
  1713  1646                     __ptext1:	
  1714 ;; *************** function ___awmod *****************
  1715 ;; Defined at:
  1716 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
  1717 ;; Parameters:    Size  Location     Type
  1718 ;;  divisor         2    0[BANK1 ] int 
  1719 ;;  dividend        2    2[BANK1 ] int 
  1720 ;; Auto vars:     Size  Location     Type
  1721 ;;  sign            1    6[BANK1 ] unsigned char 
  1722 ;;  counter         1    5[BANK1 ] unsigned char 
  1723 ;; Return value:  Size  Location     Type
  1724 ;;                  2    0[BANK1 ] int 
  1725 ;; Registers used:
  1726 ;;		wreg, status,2, status,0
  1727 ;; Tracked objects:
  1728 ;;		On entry : 0/0
  1729 ;;		On exit  : 0/0
  1730 ;;		Unchanged: 0/0
  1731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1732 ;;      Params:         0       0       4       0       0
  1733 ;;      Locals:         0       0       2       0       0
  1734 ;;      Temps:          0       0       1       0       0
  1735 ;;      Totals:         0       0       7       0       0
  1736 ;;Total ram usage:        7 bytes
  1737 ;; Hardware stack levels used:    1
  1738 ;; Hardware stack levels required when called:    3
  1739 ;; This function calls:
  1740 ;;		Nothing
  1741 ;; This function is called by:
  1742 ;;		_main
  1743 ;; This function uses a non-reentrant model
  1744 ;;
  1745                           
  1746                           
  1747                           ;psect for function ___awmod
  1748  1646                     ___awmod:	
  1749                           
  1750                           ;incstack = 0
  1751                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  1752  1646  1683               	bsf	3,5	;RP0=1, select bank1
  1753  1647  1303               	bcf	3,6	;RP1=0, select bank1
  1754  1648  01A6               	clrf	___awmod@sign^(0+128)
  1755  1649  1FA3               	btfss	(___awmod@dividend+1)^(0+128),7
  1756  164A  2E52               	goto	l3400
  1757  164B  09A2               	comf	___awmod@dividend^(0+128),f
  1758  164C  09A3               	comf	(___awmod@dividend+1)^(0+128),f
  1759  164D  0AA2               	incf	___awmod@dividend^(0+128),f
  1760  164E  1903               	skipnz
  1761  164F  0AA3               	incf	(___awmod@dividend+1)^(0+128),f
  1762  1650  01A6               	clrf	___awmod@sign^(0+128)
  1763  1651  0AA6               	incf	___awmod@sign^(0+128),f
  1764  1652                     l3400:	
  1765  1652  1FA1               	btfss	(___awmod@divisor+1)^(0+128),7
  1766  1653  2E59               	goto	l3404
  1767  1654  09A0               	comf	___awmod@divisor^(0+128),f
  1768  1655  09A1               	comf	(___awmod@divisor+1)^(0+128),f
  1769  1656  0AA0               	incf	___awmod@divisor^(0+128),f
  1770  1657  1903               	skipnz
  1771  1658  0AA1               	incf	(___awmod@divisor+1)^(0+128),f
  1772  1659                     l3404:	
  1773  1659  0820               	movf	___awmod@divisor^(0+128),w
  1774  165A  0421               	iorwf	(___awmod@divisor+1)^(0+128),w
  1775  165B  1903               	btfsc	3,2
  1776  165C  2E86               	goto	l3422
  1777  165D  01A5               	clrf	___awmod@counter^(0+128)
  1778  165E  0AA5               	incf	___awmod@counter^(0+128),f
  1779  165F                     l3412:	
  1780  165F  1BA1               	btfsc	(___awmod@divisor+1)^(0+128),7
  1781  1660  2E6D               	goto	l3414
  1782  1661  3001               	movlw	1
  1783  1662                     u4715:	
  1784  1662  1003               	clrc
  1785  1663  0DA0               	rlf	___awmod@divisor^(0+128),f
  1786  1664  0DA1               	rlf	(___awmod@divisor+1)^(0+128),f
  1787  1665  3EFF               	addlw	-1
  1788  1666  1D03               	skipz
  1789  1667  2E62               	goto	u4715
  1790  1668  3001               	movlw	1
  1791  1669  00A4               	movwf	??___awmod^(0+128)
  1792  166A  0824               	movf	??___awmod^(0+128),w
  1793  166B  07A5               	addwf	___awmod@counter^(0+128),f
  1794  166C  2E5F               	goto	l3412
  1795  166D                     l3414:	
  1796  166D  0821               	movf	(___awmod@divisor+1)^(0+128),w
  1797  166E  0223               	subwf	(___awmod@dividend+1)^(0+128),w
  1798  166F  1D03               	skipz
  1799  1670  2E73               	goto	u4735
  1800  1671  0820               	movf	___awmod@divisor^(0+128),w
  1801  1672  0222               	subwf	___awmod@dividend^(0+128),w
  1802  1673                     u4735:	
  1803  1673  1C03               	skipc
  1804  1674  2E7B               	goto	l3418
  1805  1675  0820               	movf	___awmod@divisor^(0+128),w
  1806  1676  02A2               	subwf	___awmod@dividend^(0+128),f
  1807  1677  0821               	movf	(___awmod@divisor+1)^(0+128),w
  1808  1678  1C03               	skipc
  1809  1679  03A3               	decf	(___awmod@dividend+1)^(0+128),f
  1810  167A  02A3               	subwf	(___awmod@dividend+1)^(0+128),f
  1811  167B                     l3418:	
  1812  167B  3001               	movlw	1
  1813  167C                     u4745:	
  1814  167C  1003               	clrc
  1815  167D  0CA1               	rrf	(___awmod@divisor+1)^(0+128),f
  1816  167E  0CA0               	rrf	___awmod@divisor^(0+128),f
  1817  167F  3EFF               	addlw	-1
  1818  1680  1D03               	skipz
  1819  1681  2E7C               	goto	u4745
  1820  1682  3001               	movlw	1
  1821  1683  02A5               	subwf	___awmod@counter^(0+128),f
  1822  1684  1D03               	btfss	3,2
  1823  1685  2E6D               	goto	l3414
  1824  1686                     l3422:	
  1825  1686  0826               	movf	___awmod@sign^(0+128),w
  1826  1687  1903               	btfsc	3,2
  1827  1688  2E8E               	goto	l3426
  1828  1689  09A2               	comf	___awmod@dividend^(0+128),f
  1829  168A  09A3               	comf	(___awmod@dividend+1)^(0+128),f
  1830  168B  0AA2               	incf	___awmod@dividend^(0+128),f
  1831  168C  1903               	skipnz
  1832  168D  0AA3               	incf	(___awmod@dividend+1)^(0+128),f
  1833  168E                     l3426:	
  1834  168E  0823               	movf	(___awmod@dividend+1)^(0+128),w
  1835  168F  00A1               	movwf	(?___awmod+1)^(0+128)
  1836  1690  0822               	movf	___awmod@dividend^(0+128),w
  1837  1691  00A0               	movwf	?___awmod^(0+128)
  1838  1692  0008               	return
  1839  1693                     __end_of___awmod:	
  1840                           
  1841                           	psect	text2
  1842  1461                     __ptext2:	
  1843 ;; *************** function _Sharp_Init *****************
  1844 ;; Defined at:
  1845 ;;		line 6 in file "SharpIR.h"
  1846 ;; Parameters:    Size  Location     Type
  1847 ;;		None
  1848 ;; Auto vars:     Size  Location     Type
  1849 ;;		None
  1850 ;; Return value:  Size  Location     Type
  1851 ;;                  1    wreg      void 
  1852 ;; Registers used:
  1853 ;;		wreg, status,2, status,0
  1854 ;; Tracked objects:
  1855 ;;		On entry : 0/0
  1856 ;;		On exit  : 0/0
  1857 ;;		Unchanged: 0/0
  1858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1859 ;;      Params:         0       0       0       0       0
  1860 ;;      Locals:         0       0       0       0       0
  1861 ;;      Temps:          0       0       0       0       0
  1862 ;;      Totals:         0       0       0       0       0
  1863 ;;Total ram usage:        0 bytes
  1864 ;; Hardware stack levels used:    1
  1865 ;; Hardware stack levels required when called:    3
  1866 ;; This function calls:
  1867 ;;		Nothing
  1868 ;; This function is called by:
  1869 ;;		_main
  1870 ;; This function uses a non-reentrant model
  1871 ;;
  1872                           
  1873                           
  1874                           ;psect for function _Sharp_Init
  1875  1461                     _Sharp_Init:	
  1876                           
  1877                           ;SharpIR.h: 8: ANSEL=0x00;
  1878                           
  1879                           ;incstack = 0
  1880                           ; Regs used in _Sharp_Init: [wreg+status,2+status,0]
  1881  1461  1683               	bsf	3,5	;RP0=1, select bank3
  1882  1462  1703               	bsf	3,6	;RP1=1, select bank3
  1883  1463  0188               	clrf	8	;volatile
  1884                           
  1885                           ;SharpIR.h: 9: ANSELH=0x00;
  1886  1464  0189               	clrf	9	;volatile
  1887                           
  1888                           ;SharpIR.h: 10: TRISA=0xFF;
  1889  1465  30FF               	movlw	255
  1890  1466  1683               	bsf	3,5	;RP0=1, select bank1
  1891  1467  1303               	bcf	3,6	;RP1=0, select bank1
  1892  1468  0085               	movwf	5	;volatile
  1893                           
  1894                           ;SharpIR.h: 13: TRISAbits.TRISA2=1;
  1895  1469  1505               	bsf	5,2	;volatile
  1896                           
  1897                           ;SharpIR.h: 14: ANSELbits.ANS2=1;
  1898  146A  1683               	bsf	3,5	;RP0=1, select bank3
  1899  146B  1703               	bsf	3,6	;RP1=1, select bank3
  1900  146C  1508               	bsf	8,2	;volatile
  1901                           
  1902                           ;SharpIR.h: 16: ADCON1bits.ADFM=1;
  1903  146D  1683               	bsf	3,5	;RP0=1, select bank1
  1904  146E  1303               	bcf	3,6	;RP1=0, select bank1
  1905  146F  179F               	bsf	31,7	;volatile
  1906                           
  1907                           ;SharpIR.h: 17: ADCON1bits.VCFG0=0;
  1908  1470  121F               	bcf	31,4	;volatile
  1909                           
  1910                           ;SharpIR.h: 18: ADCON0bits.ADCS=0b101;
  1911  1471  1283               	bcf	3,5	;RP0=0, select bank0
  1912  1472  1303               	bcf	3,6	;RP1=0, select bank0
  1913  1473  081F               	movf	31,w	;volatile
  1914  1474  393F               	andlw	-193
  1915  1475  3840               	iorlw	64
  1916  1476  009F               	movwf	31	;volatile
  1917                           
  1918                           ;SharpIR.h: 20: ADCON0bits.CHS=2;
  1919  1477  081F               	movf	31,w	;volatile
  1920  1478  39C3               	andlw	-61
  1921  1479  3808               	iorlw	8
  1922  147A  009F               	movwf	31	;volatile
  1923                           
  1924                           ;SharpIR.h: 21: ADCON0bits.ADON=1;
  1925  147B  141F               	bsf	31,0	;volatile
  1926  147C  0008               	return
  1927  147D                     __end_of_Sharp_Init:	
  1928                           
  1929                           	psect	text3
  1930  0F30                     __ptext3:	
  1931 ;; *************** function _Process *****************
  1932 ;; Defined at:
  1933 ;;		line 39 in file "SharpIR.h"
  1934 ;; Parameters:    Size  Location     Type
  1935 ;;  channel         2   25[BANK3 ] int 
  1936 ;; Auto vars:     Size  Location     Type
  1937 ;;  foo             2   38[BANK3 ] int 
  1938 ;;  i               2   34[BANK3 ] int 
  1939 ;;  sum             2   36[BANK3 ] int 
  1940 ;;  p               2   32[BANK3 ] int 
  1941 ;;  accurateDist    2   30[BANK3 ] int 
  1942 ;;  previousDist    2   28[BANK3 ] int 
  1943 ;; Return value:  Size  Location     Type
  1944 ;;                  2   25[BANK3 ] int 
  1945 ;; Registers used:
  1946 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1947 ;; Tracked objects:
  1948 ;;		On entry : 0/0
  1949 ;;		On exit  : 0/0
  1950 ;;		Unchanged: 0/0
  1951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1952 ;;      Params:         0       0       0       2       0
  1953 ;;      Locals:         0       0       0      12       0
  1954 ;;      Temps:          0       0       0       1       0
  1955 ;;      Totals:         0       0       0      15       0
  1956 ;;Total ram usage:       15 bytes
  1957 ;; Hardware stack levels used:    1
  1958 ;; Hardware stack levels required when called:    9
  1959 ;; This function calls:
  1960 ;;		___awdiv
  1961 ;;		___awtoft
  1962 ;;		___ftge
  1963 ;;		___ftmul
  1964 ;;		_analogRead
  1965 ;; This function is called by:
  1966 ;;		_main
  1967 ;; This function uses a non-reentrant model
  1968 ;;
  1969                           
  1970                           
  1971                           ;psect for function _Process
  1972  0F30                     _Process:	
  1973                           
  1974                           ;SharpIR.h: 42: int p=0;
  1975                           
  1976                           ;incstack = 0
  1977 ;; hardware stack exceeded
  1978                           ; Regs used in _Process: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1979  0F30  1683               	bsf	3,5	;RP0=1, select bank3
  1980  0F31  1703               	bsf	3,6	;RP1=1, select bank3
  1981  0F32  01B0               	clrf	Process@p^(0+384)
  1982  0F33  01B1               	clrf	(Process@p+1)^(0+384)
  1983                           
  1984                           ;SharpIR.h: 43: int sum=0;
  1985  0F34  01B4               	clrf	Process@sum^(0+384)
  1986  0F35  01B5               	clrf	(Process@sum+1)^(0+384)
  1987                           
  1988                           ;SharpIR.h: 44: int previousDistance;
  1989                           ;SharpIR.h: 46: for (int i=0; i<avg; i++){
  1990  0F36  01B2               	clrf	Process@i^(0+384)
  1991  0F37  01B3               	clrf	(Process@i+1)^(0+384)
  1992  0F38                     l3384:	
  1993  0F38  0833               	movf	(Process@i+1)^(0+384),w
  1994  0F39  3A80               	xorlw	128
  1995  0F3A  00AB               	movwf	??_Process^(0+384)
  1996  0F3B  083F               	movf	(_avg+1)^(0+384),w
  1997  0F3C  3A80               	xorlw	128
  1998  0F3D  022B               	subwf	??_Process^(0+384),w
  1999  0F3E  1D03               	skipz
  2000  0F3F  2F42               	goto	u4675
  2001  0F40  083E               	movf	_avg^(0+384),w
  2002  0F41  0232               	subwf	Process@i^(0+384),w
  2003  0F42                     u4675:	
  2004  0F42  1803               	btfsc	3,0
  2005  0F43  2FD4               	goto	l3386
  2006                           
  2007                           ;SharpIR.h: 48: int foo=analogRead(channel);
  2008  0F44  1683               	bsf	3,5	;RP0=1, select bank3
  2009  0F45  1703               	bsf	3,6	;RP1=1, select bank3
  2010  0F46  082A               	movf	(Process@channel+1)^(0+384),w
  2011  0F47  1683               	bsf	3,5	;RP0=1, select bank1
  2012  0F48  1303               	bcf	3,6	;RP1=0, select bank1
  2013  0F49  00EE               	movwf	(analogRead@channel+1)^(0+128)
  2014  0F4A  1683               	bsf	3,5	;RP0=1, select bank3
  2015  0F4B  1703               	bsf	3,6	;RP1=1, select bank3
  2016  0F4C  0829               	movf	Process@channel^(0+384),w
  2017  0F4D  1683               	bsf	3,5	;RP0=1, select bank1
  2018  0F4E  1303               	bcf	3,6	;RP1=0, select bank1
  2019  0F4F  00ED               	movwf	analogRead@channel^(0+128)
  2020  0F50  120A  158A  2440  120A  158A  	fcall	_analogRead
  2021  0F55  1683               	bsf	3,5	;RP0=1, select bank1
  2022  0F56  1303               	bcf	3,6	;RP1=0, select bank1
  2023  0F57  086E               	movf	(?_analogRead+1)^(0+128),w
  2024  0F58  1683               	bsf	3,5	;RP0=1, select bank3
  2025  0F59  1703               	bsf	3,6	;RP1=1, select bank3
  2026  0F5A  00B7               	movwf	(Process@foo+1)^(0+384)
  2027  0F5B  1683               	bsf	3,5	;RP0=1, select bank1
  2028  0F5C  1303               	bcf	3,6	;RP1=0, select bank1
  2029  0F5D  086D               	movf	?_analogRead^(0+128),w
  2030  0F5E  1683               	bsf	3,5	;RP0=1, select bank3
  2031  0F5F  1703               	bsf	3,6	;RP1=1, select bank3
  2032  0F60  00B6               	movwf	Process@foo^(0+384)
  2033                           
  2034                           ;SharpIR.h: 50: if (foo>=(tol*previousDistance)){
  2035  0F61  0837               	movf	(Process@foo+1)^(0+384),w
  2036  0F62  1683               	bsf	3,5	;RP0=1, select bank1
  2037  0F63  1303               	bcf	3,6	;RP1=0, select bank1
  2038  0F64  00A9               	movwf	(___awtoft@c+1)^(0+128)
  2039  0F65  1683               	bsf	3,5	;RP0=1, select bank3
  2040  0F66  1703               	bsf	3,6	;RP1=1, select bank3
  2041  0F67  0836               	movf	Process@foo^(0+384),w
  2042  0F68  1683               	bsf	3,5	;RP0=1, select bank1
  2043  0F69  1303               	bcf	3,6	;RP1=0, select bank1
  2044  0F6A  00A8               	movwf	___awtoft@c^(0+128)
  2045  0F6B  120A  118A  27DB  120A  158A  	fcall	___awtoft
  2046  0F70  1683               	bsf	3,5	;RP0=1, select bank1
  2047  0F71  1303               	bcf	3,6	;RP1=0, select bank1
  2048  0F72  0828               	movf	?___awtoft^(0+128),w
  2049  0F73  00BE               	movwf	___ftge@ff1^(0+128)
  2050  0F74  0829               	movf	(?___awtoft+1)^(0+128),w
  2051  0F75  00BF               	movwf	(___ftge@ff1+1)^(0+128)
  2052  0F76  082A               	movf	(?___awtoft+2)^(0+128),w
  2053  0F77  00C0               	movwf	(___ftge@ff1+2)^(0+128)
  2054  0F78  1683               	bsf	3,5	;RP0=1, select bank3
  2055  0F79  1703               	bsf	3,6	;RP1=1, select bank3
  2056  0F7A  082D               	movf	(Process@previousDistance+1)^(0+384),w
  2057  0F7B  1683               	bsf	3,5	;RP0=1, select bank1
  2058  0F7C  1303               	bcf	3,6	;RP1=0, select bank1
  2059  0F7D  00A9               	movwf	(___awtoft@c+1)^(0+128)
  2060  0F7E  1683               	bsf	3,5	;RP0=1, select bank3
  2061  0F7F  1703               	bsf	3,6	;RP1=1, select bank3
  2062  0F80  082C               	movf	Process@previousDistance^(0+384),w
  2063  0F81  1683               	bsf	3,5	;RP0=1, select bank1
  2064  0F82  1303               	bcf	3,6	;RP1=0, select bank1
  2065  0F83  00A8               	movwf	___awtoft@c^(0+128)
  2066  0F84  120A  118A  27DB  120A  158A  	fcall	___awtoft
  2067  0F89  1683               	bsf	3,5	;RP0=1, select bank1
  2068  0F8A  1303               	bcf	3,6	;RP1=0, select bank1
  2069  0F8B  0828               	movf	?___awtoft^(0+128),w
  2070  0F8C  00B1               	movwf	___ftmul@f2^(0+128)
  2071  0F8D  0829               	movf	(?___awtoft+1)^(0+128),w
  2072  0F8E  00B2               	movwf	(___ftmul@f2+1)^(0+128)
  2073  0F8F  082A               	movf	(?___awtoft+2)^(0+128),w
  2074  0F90  00B3               	movwf	(___ftmul@f2+2)^(0+128)
  2075  0F91  1683               	bsf	3,5	;RP0=1, select bank3
  2076  0F92  1703               	bsf	3,6	;RP1=1, select bank3
  2077  0F93  083B               	movf	_tol^(0+384),w
  2078  0F94  1683               	bsf	3,5	;RP0=1, select bank1
  2079  0F95  1303               	bcf	3,6	;RP1=0, select bank1
  2080  0F96  00AE               	movwf	___ftmul@f1^(0+128)
  2081  0F97  1683               	bsf	3,5	;RP0=1, select bank3
  2082  0F98  1703               	bsf	3,6	;RP1=1, select bank3
  2083  0F99  083C               	movf	(_tol+1)^(0+384),w
  2084  0F9A  1683               	bsf	3,5	;RP0=1, select bank1
  2085  0F9B  1303               	bcf	3,6	;RP1=0, select bank1
  2086  0F9C  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  2087  0F9D  1683               	bsf	3,5	;RP0=1, select bank3
  2088  0F9E  1703               	bsf	3,6	;RP1=1, select bank3
  2089  0F9F  083D               	movf	(_tol+2)^(0+384),w
  2090  0FA0  1683               	bsf	3,5	;RP0=1, select bank1
  2091  0FA1  1303               	bcf	3,6	;RP1=0, select bank1
  2092  0FA2  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  2093  0FA3  120A  118A  2708  120A  158A  	fcall	___ftmul
  2094  0FA8  1683               	bsf	3,5	;RP0=1, select bank1
  2095  0FA9  1303               	bcf	3,6	;RP1=0, select bank1
  2096  0FAA  082E               	movf	?___ftmul^(0+128),w
  2097  0FAB  00C1               	movwf	___ftge@ff2^(0+128)
  2098  0FAC  082F               	movf	(?___ftmul+1)^(0+128),w
  2099  0FAD  00C2               	movwf	(___ftge@ff2+1)^(0+128)
  2100  0FAE  0830               	movf	(?___ftmul+2)^(0+128),w
  2101  0FAF  00C3               	movwf	(___ftge@ff2+2)^(0+128)
  2102  0FB0  160A  118A  2740  120A  158A  	fcall	___ftge
  2103  0FB5  1C03               	btfss	3,0
  2104  0FB6  2FCB               	goto	l3382
  2105                           
  2106                           ;SharpIR.h: 52: previousDistance=foo;
  2107  0FB7  1683               	bsf	3,5	;RP0=1, select bank3
  2108  0FB8  1703               	bsf	3,6	;RP1=1, select bank3
  2109  0FB9  0837               	movf	(Process@foo+1)^(0+384),w
  2110  0FBA  00AD               	movwf	(Process@previousDistance+1)^(0+384)
  2111  0FBB  0836               	movf	Process@foo^(0+384),w
  2112  0FBC  00AC               	movwf	Process@previousDistance^(0+384)
  2113                           
  2114                           ;SharpIR.h: 53: sum=sum+foo;
  2115  0FBD  0836               	movf	Process@foo^(0+384),w
  2116  0FBE  0734               	addwf	Process@sum^(0+384),w
  2117  0FBF  00B4               	movwf	Process@sum^(0+384)
  2118  0FC0  0837               	movf	(Process@foo+1)^(0+384),w
  2119  0FC1  1803               	skipnc
  2120  0FC2  0A37               	incf	(Process@foo+1)^(0+384),w
  2121  0FC3  0735               	addwf	(Process@sum+1)^(0+384),w
  2122  0FC4  00B5               	movwf	(Process@sum+1)^(0+384)
  2123                           
  2124                           ;SharpIR.h: 54: p++;
  2125  0FC5  3001               	movlw	1
  2126  0FC6  07B0               	addwf	Process@p^(0+384),f
  2127  0FC7  1803               	skipnc
  2128  0FC8  0AB1               	incf	(Process@p+1)^(0+384),f
  2129  0FC9  3000               	movlw	0
  2130  0FCA  07B1               	addwf	(Process@p+1)^(0+384),f
  2131  0FCB                     l3382:	
  2132  0FCB  3001               	movlw	1
  2133  0FCC  1683               	bsf	3,5	;RP0=1, select bank3
  2134  0FCD  1703               	bsf	3,6	;RP1=1, select bank3
  2135  0FCE  07B2               	addwf	Process@i^(0+384),f
  2136  0FCF  1803               	skipnc
  2137  0FD0  0AB3               	incf	(Process@i+1)^(0+384),f
  2138  0FD1  3000               	movlw	0
  2139  0FD2  07B3               	addwf	(Process@i+1)^(0+384),f
  2140  0FD3  2F38               	goto	l3384
  2141  0FD4                     l3386:	
  2142                           
  2143                           ;SharpIR.h: 56: }
  2144                           ;SharpIR.h: 59: }
  2145                           ;SharpIR.h: 62: int accurateDistance=sum/p;
  2146  0FD4  1683               	bsf	3,5	;RP0=1, select bank3
  2147  0FD5  1703               	bsf	3,6	;RP1=1, select bank3
  2148  0FD6  0831               	movf	(Process@p+1)^(0+384),w
  2149  0FD7  1683               	bsf	3,5	;RP0=1, select bank1
  2150  0FD8  1303               	bcf	3,6	;RP1=0, select bank1
  2151  0FD9  00A1               	movwf	(___awdiv@divisor+1)^(0+128)
  2152  0FDA  1683               	bsf	3,5	;RP0=1, select bank3
  2153  0FDB  1703               	bsf	3,6	;RP1=1, select bank3
  2154  0FDC  0830               	movf	Process@p^(0+384),w
  2155  0FDD  1683               	bsf	3,5	;RP0=1, select bank1
  2156  0FDE  1303               	bcf	3,6	;RP1=0, select bank1
  2157  0FDF  00A0               	movwf	___awdiv@divisor^(0+128)
  2158  0FE0  1683               	bsf	3,5	;RP0=1, select bank3
  2159  0FE1  1703               	bsf	3,6	;RP1=1, select bank3
  2160  0FE2  0835               	movf	(Process@sum+1)^(0+384),w
  2161  0FE3  1683               	bsf	3,5	;RP0=1, select bank1
  2162  0FE4  1303               	bcf	3,6	;RP1=0, select bank1
  2163  0FE5  00A3               	movwf	(___awdiv@dividend+1)^(0+128)
  2164  0FE6  1683               	bsf	3,5	;RP0=1, select bank3
  2165  0FE7  1703               	bsf	3,6	;RP1=1, select bank3
  2166  0FE8  0834               	movf	Process@sum^(0+384),w
  2167  0FE9  1683               	bsf	3,5	;RP0=1, select bank1
  2168  0FEA  1303               	bcf	3,6	;RP1=0, select bank1
  2169  0FEB  00A2               	movwf	___awdiv@dividend^(0+128)
  2170  0FEC  160A  118A  26E5   	fcall	___awdiv
  2171  0FEF  1683               	bsf	3,5	;RP0=1, select bank1
  2172  0FF0  1303               	bcf	3,6	;RP1=0, select bank1
  2173  0FF1  0821               	movf	(?___awdiv+1)^(0+128),w
  2174  0FF2  1683               	bsf	3,5	;RP0=1, select bank3
  2175  0FF3  1703               	bsf	3,6	;RP1=1, select bank3
  2176  0FF4  00AF               	movwf	(Process@accurateDistance+1)^(0+384)
  2177  0FF5  1683               	bsf	3,5	;RP0=1, select bank1
  2178  0FF6  1303               	bcf	3,6	;RP1=0, select bank1
  2179  0FF7  0820               	movf	?___awdiv^(0+128),w
  2180  0FF8  1683               	bsf	3,5	;RP0=1, select bank3
  2181  0FF9  1703               	bsf	3,6	;RP1=1, select bank3
  2182  0FFA  00AE               	movwf	Process@accurateDistance^(0+384)
  2183                           
  2184                           ;SharpIR.h: 64: return accurateDistance;
  2185  0FFB  082F               	movf	(Process@accurateDistance+1)^(0+384),w
  2186  0FFC  00AA               	movwf	(?_Process+1)^(0+384)
  2187  0FFD  082E               	movf	Process@accurateDistance^(0+384),w
  2188  0FFE  00A9               	movwf	?_Process^(0+384)
  2189  0FFF  0008               	return
  2190  1000                     __end_of_Process:	
  2191                           
  2192                           	psect	text4
  2193  0C40                     __ptext4:	
  2194 ;; *************** function _analogRead *****************
  2195 ;; Defined at:
  2196 ;;		line 24 in file "SharpIR.h"
  2197 ;; Parameters:    Size  Location     Type
  2198 ;;  channel         2   77[BANK1 ] int 
  2199 ;; Auto vars:     Size  Location     Type
  2200 ;;  volt            3   17[BANK3 ] float 
  2201 ;;  raw             2   23[BANK3 ] int 
  2202 ;; Return value:  Size  Location     Type
  2203 ;;                  2   77[BANK1 ] int 
  2204 ;; Registers used:
  2205 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2206 ;; Tracked objects:
  2207 ;;		On entry : 0/0
  2208 ;;		On exit  : 0/0
  2209 ;;		Unchanged: 0/0
  2210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2211 ;;      Params:         0       0       2       0       0
  2212 ;;      Locals:         0       0       0       8       0
  2213 ;;      Temps:          0       0       1       0       0
  2214 ;;      Totals:         0       0       3       8       0
  2215 ;;Total ram usage:       11 bytes
  2216 ;; Hardware stack levels used:    1
  2217 ;; Hardware stack levels required when called:    8
  2218 ;; This function calls:
  2219 ;;		___awtoft
  2220 ;;		___ftdiv
  2221 ;;		___ftmul
  2222 ;;		___fttol
  2223 ;;		_pow
  2224 ;; This function is called by:
  2225 ;;		_Process
  2226 ;; This function uses a non-reentrant model
  2227 ;;
  2228                           
  2229                           
  2230                           ;psect for function _analogRead
  2231  0C40                     _analogRead:	
  2232                           
  2233                           ;SharpIR.h: 26: float volt;
  2234                           ;SharpIR.h: 28: ADCON0bits.CHS=channel;
  2235                           
  2236                           ;incstack = 0
  2237 ;; hardware stack exceeded
  2238                           ; Regs used in _analogRead: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2239  0C40  1683               	bsf	3,5	;RP0=1, select bank1
  2240  0C41  1303               	bcf	3,6	;RP1=0, select bank1
  2241  0C42  086D               	movf	analogRead@channel^(0+128),w
  2242  0C43  00EF               	movwf	??_analogRead^(0+128)
  2243  0C44  0DEF               	rlf	??_analogRead^(0+128),f
  2244  0C45  0DEF               	rlf	??_analogRead^(0+128),f
  2245  0C46  1283               	bcf	3,5	;RP0=0, select bank0
  2246  0C47  1303               	bcf	3,6	;RP1=0, select bank0
  2247  0C48  081F               	movf	31,w	;volatile
  2248  0C49  1683               	bsf	3,5	;RP0=1, select bank1
  2249  0C4A  1303               	bcf	3,6	;RP1=0, select bank1
  2250  0C4B  066F               	xorwf	??_analogRead^(0+128),w
  2251  0C4C  39C3               	andlw	-61
  2252  0C4D  066F               	xorwf	??_analogRead^(0+128),w
  2253  0C4E  1283               	bcf	3,5	;RP0=0, select bank0
  2254  0C4F  1303               	bcf	3,6	;RP1=0, select bank0
  2255  0C50  009F               	movwf	31	;volatile
  2256                           
  2257                           ;SharpIR.h: 29: ADCON0bits.GO=1;
  2258  0C51  149F               	bsf	31,1	;volatile
  2259  0C52                     l3258:	
  2260                           ;SharpIR.h: 30: while(ADCON0bits.GO==1)
  2261                           
  2262  0C52  1283               	bcf	3,5	;RP0=0, select bank0
  2263  0C53  1303               	bcf	3,6	;RP1=0, select bank0
  2264  0C54  1C9F               	btfss	31,1	;volatile
  2265  0C55  2C61               	goto	L1
  2266                           
  2267                           ;SharpIR.h: 31: {
  2268                           ;SharpIR.h: 32: raw=(ADRESH<<8)|ADRESL;
  2269  0C56  081E               	movf	30,w	;volatile
  2270  0C57  1683               	bsf	3,5	;RP0=1, select bank3
  2271  0C58  1703               	bsf	3,6	;RP1=1, select bank3
  2272  0C59  00A8               	movwf	(analogRead@raw+1)^(0+384)
  2273  0C5A  1683               	bsf	3,5	;RP0=1, select bank1
  2274  0C5B  1303               	bcf	3,6	;RP1=0, select bank1
  2275  0C5C  081E               	movf	30,w	;volatile
  2276  0C5D  1683               	bsf	3,5	;RP0=1, select bank3
  2277  0C5E  1703               	bsf	3,6	;RP1=1, select bank3
  2278  0C5F  00A7               	movwf	analogRead@raw^(0+384)
  2279  0C60  2C52               	goto	l3258
  2280  0C61                     L1:	
  2281                           ;SharpIR.h: 33: }
  2282                           ;SharpIR.h: 34: ADCON0bits.GO=0;
  2283                           
  2284                           
  2285                           ;SharpIR.h: 35: volt=(raw*5.0)/1023.0;
  2286  0C61  30C0               	movlw	192
  2287  0C62  1683               	bsf	3,5	;RP0=1, select bank1
  2288  0C63  1303               	bcf	3,6	;RP1=0, select bank1
  2289  0C64  00BE               	movwf	___ftdiv@f2^(0+128)
  2290  0C65  307F               	movlw	127
  2291  0C66  00BF               	movwf	(___ftdiv@f2+1)^(0+128)
  2292  0C67  3044               	movlw	68
  2293  0C68  00C0               	movwf	(___ftdiv@f2+2)^(0+128)
  2294  0C69  3000               	movlw	0
  2295  0C6A  00AE               	movwf	___ftmul@f1^(0+128)
  2296  0C6B  30A0               	movlw	160
  2297  0C6C  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  2298  0C6D  3040               	movlw	64
  2299  0C6E  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  2300  0C6F  1683               	bsf	3,5	;RP0=1, select bank3
  2301  0C70  1703               	bsf	3,6	;RP1=1, select bank3
  2302  0C71  0828               	movf	(analogRead@raw+1)^(0+384),w
  2303  0C72  1683               	bsf	3,5	;RP0=1, select bank1
  2304  0C73  1303               	bcf	3,6	;RP1=0, select bank1
  2305  0C74  00A9               	movwf	(___awtoft@c+1)^(0+128)
  2306  0C75  1683               	bsf	3,5	;RP0=1, select bank3
  2307  0C76  1703               	bsf	3,6	;RP1=1, select bank3
  2308  0C77  0827               	movf	analogRead@raw^(0+384),w
  2309  0C78  1683               	bsf	3,5	;RP0=1, select bank1
  2310  0C79  1303               	bcf	3,6	;RP1=0, select bank1
  2311  0C7A  00A8               	movwf	___awtoft@c^(0+128)
  2312  0C7B  120A  118A  27DB  120A  158A  	fcall	___awtoft
  2313  0C80  1683               	bsf	3,5	;RP0=1, select bank1
  2314  0C81  1303               	bcf	3,6	;RP1=0, select bank1
  2315  0C82  0828               	movf	?___awtoft^(0+128),w
  2316  0C83  00B1               	movwf	___ftmul@f2^(0+128)
  2317  0C84  0829               	movf	(?___awtoft+1)^(0+128),w
  2318  0C85  00B2               	movwf	(___ftmul@f2+1)^(0+128)
  2319  0C86  082A               	movf	(?___awtoft+2)^(0+128),w
  2320  0C87  00B3               	movwf	(___ftmul@f2+2)^(0+128)
  2321  0C88  120A  118A  2708  120A  158A  	fcall	___ftmul
  2322  0C8D  1683               	bsf	3,5	;RP0=1, select bank1
  2323  0C8E  1303               	bcf	3,6	;RP1=0, select bank1
  2324  0C8F  082E               	movf	?___ftmul^(0+128),w
  2325  0C90  00C1               	movwf	___ftdiv@f1^(0+128)
  2326  0C91  082F               	movf	(?___ftmul+1)^(0+128),w
  2327  0C92  00C2               	movwf	(___ftdiv@f1+1)^(0+128)
  2328  0C93  0830               	movf	(?___ftmul+2)^(0+128),w
  2329  0C94  00C3               	movwf	(___ftdiv@f1+2)^(0+128)
  2330  0C95  120A  158A  25AA  120A  158A  	fcall	___ftdiv
  2331  0C9A  1683               	bsf	3,5	;RP0=1, select bank1
  2332  0C9B  1303               	bcf	3,6	;RP1=0, select bank1
  2333  0C9C  083E               	movf	?___ftdiv^(0+128),w
  2334  0C9D  1683               	bsf	3,5	;RP0=1, select bank3
  2335  0C9E  1703               	bsf	3,6	;RP1=1, select bank3
  2336  0C9F  00A1               	movwf	analogRead@volt^(0+384)
  2337  0CA0  1683               	bsf	3,5	;RP0=1, select bank1
  2338  0CA1  1303               	bcf	3,6	;RP1=0, select bank1
  2339  0CA2  083F               	movf	(?___ftdiv+1)^(0+128),w
  2340  0CA3  1683               	bsf	3,5	;RP0=1, select bank3
  2341  0CA4  1703               	bsf	3,6	;RP1=1, select bank3
  2342  0CA5  00A2               	movwf	(analogRead@volt+1)^(0+384)
  2343  0CA6  1683               	bsf	3,5	;RP0=1, select bank1
  2344  0CA7  1303               	bcf	3,6	;RP1=0, select bank1
  2345  0CA8  0840               	movf	(?___ftdiv+2)^(0+128),w
  2346  0CA9  1683               	bsf	3,5	;RP0=1, select bank3
  2347  0CAA  1703               	bsf	3,6	;RP1=1, select bank3
  2348  0CAB  00A3               	movwf	(analogRead@volt+2)^(0+384)
  2349                           
  2350                           ;SharpIR.h: 36: return (int)(61.573*pow(volt, -1.1068));
  2351  0CAC  30AC               	movlw	172
  2352  0CAD  0093               	movwf	pow@y^(0+384)
  2353  0CAE  308D               	movlw	141
  2354  0CAF  0094               	movwf	(pow@y+1)^(0+384)
  2355  0CB0  30BF               	movlw	191
  2356  0CB1  0095               	movwf	(pow@y+2)^(0+384)
  2357  0CB2  0821               	movf	analogRead@volt^(0+384),w
  2358  0CB3  0090               	movwf	pow@x^(0+384)
  2359  0CB4  0822               	movf	(analogRead@volt+1)^(0+384),w
  2360  0CB5  0091               	movwf	(pow@x+1)^(0+384)
  2361  0CB6  0823               	movf	(analogRead@volt+2)^(0+384),w
  2362  0CB7  0092               	movwf	(pow@x+2)^(0+384)
  2363  0CB8  120A  118A  2301  120A  158A  	fcall	_pow
  2364  0CBD  1683               	bsf	3,5	;RP0=1, select bank3
  2365  0CBE  1703               	bsf	3,6	;RP1=1, select bank3
  2366  0CBF  0810               	movf	?_pow^(0+384),w
  2367  0CC0  00A4               	movwf	_analogRead$898^(0+384)
  2368  0CC1  0811               	movf	(?_pow+1)^(0+384),w
  2369  0CC2  00A5               	movwf	(_analogRead$898+1)^(0+384)
  2370  0CC3  0812               	movf	(?_pow+2)^(0+384),w
  2371  0CC4  00A6               	movwf	(_analogRead$898+2)^(0+384)
  2372                           
  2373                           ;SharpIR.h: 36: return (int)(61.573*pow(volt, -1.1068));
  2374  0CC5  0824               	movf	_analogRead$898^(0+384),w
  2375  0CC6  1683               	bsf	3,5	;RP0=1, select bank1
  2376  0CC7  1303               	bcf	3,6	;RP1=0, select bank1
  2377  0CC8  00B1               	movwf	___ftmul@f2^(0+128)
  2378  0CC9  1683               	bsf	3,5	;RP0=1, select bank3
  2379  0CCA  1703               	bsf	3,6	;RP1=1, select bank3
  2380  0CCB  0825               	movf	(_analogRead$898+1)^(0+384),w
  2381  0CCC  1683               	bsf	3,5	;RP0=1, select bank1
  2382  0CCD  1303               	bcf	3,6	;RP1=0, select bank1
  2383  0CCE  00B2               	movwf	(___ftmul@f2+1)^(0+128)
  2384  0CCF  1683               	bsf	3,5	;RP0=1, select bank3
  2385  0CD0  1703               	bsf	3,6	;RP1=1, select bank3
  2386  0CD1  0826               	movf	(_analogRead$898+2)^(0+384),w
  2387  0CD2  1683               	bsf	3,5	;RP0=1, select bank1
  2388  0CD3  1303               	bcf	3,6	;RP1=0, select bank1
  2389  0CD4  00B3               	movwf	(___ftmul@f2+2)^(0+128)
  2390  0CD5  304B               	movlw	75
  2391  0CD6  00AE               	movwf	___ftmul@f1^(0+128)
  2392  0CD7  3076               	movlw	118
  2393  0CD8  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  2394  0CD9  3042               	movlw	66
  2395  0CDA  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  2396  0CDB  120A  118A  2708  120A  158A  	fcall	___ftmul
  2397  0CE0  1683               	bsf	3,5	;RP0=1, select bank1
  2398  0CE1  1303               	bcf	3,6	;RP1=0, select bank1
  2399  0CE2  082E               	movf	?___ftmul^(0+128),w
  2400  0CE3  00BE               	movwf	___fttol@f1^(0+128)
  2401  0CE4  082F               	movf	(?___ftmul+1)^(0+128),w
  2402  0CE5  00BF               	movwf	(___fttol@f1+1)^(0+128)
  2403  0CE6  0830               	movf	(?___ftmul+2)^(0+128),w
  2404  0CE7  00C0               	movwf	(___fttol@f1+2)^(0+128)
  2405  0CE8  120A  158A  2280   	fcall	___fttol
  2406  0CEB  1683               	bsf	3,5	;RP0=1, select bank1
  2407  0CEC  1303               	bcf	3,6	;RP1=0, select bank1
  2408  0CED  083F               	movf	(?___fttol^(0+128)+1),w
  2409  0CEE  00EE               	movwf	(?_analogRead+1)^(0+128)
  2410  0CEF  083E               	movf	?___fttol^(0+128),w
  2411  0CF0  00ED               	movwf	?_analogRead^(0+128)
  2412  0CF1  0008               	return
  2413  0CF2                     __end_of_analogRead:	
  2414                           
  2415                           	psect	text5
  2416  0301                     __ptext5:	
  2417 ;; *************** function _pow *****************
  2418 ;; Defined at:
  2419 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\pow.c"
  2420 ;; Parameters:    Size  Location     Type
  2421 ;;  x               3    0[BANK3 ] int 
  2422 ;;  y               3    3[BANK3 ] int 
  2423 ;; Auto vars:     Size  Location     Type
  2424 ;;  yi              4   13[BANK3 ] unsigned long 
  2425 ;;  sign            1   12[BANK3 ] unsigned char 
  2426 ;; Return value:  Size  Location     Type
  2427 ;;                  3    0[BANK3 ] unsigned char 
  2428 ;; Registers used:
  2429 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2430 ;; Tracked objects:
  2431 ;;		On entry : 0/0
  2432 ;;		On exit  : 0/0
  2433 ;;		Unchanged: 0/0
  2434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2435 ;;      Params:         0       0       0       6       0
  2436 ;;      Locals:         0       0       0      11       0
  2437 ;;      Temps:          0       0       1       0       0
  2438 ;;      Totals:         0       0       1      17       0
  2439 ;;Total ram usage:       18 bytes
  2440 ;; Hardware stack levels used:    1
  2441 ;; Hardware stack levels required when called:    7
  2442 ;; This function calls:
  2443 ;;		___ftge
  2444 ;;		___ftmul
  2445 ;;		___ftneg
  2446 ;;		___fttol
  2447 ;;		___lltoft
  2448 ;;		_exp
  2449 ;;		_log
  2450 ;; This function is called by:
  2451 ;;		_analogRead
  2452 ;; This function uses a non-reentrant model
  2453 ;;
  2454                           
  2455                           
  2456                           ;psect for function _pow
  2457  0301                     _pow:	
  2458                           
  2459                           ;incstack = 0
  2460 ;; hardware stack exceeded
  2461                           ; Regs used in _pow: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2462  0301  1683               	bsf	3,5	;RP0=1, select bank3
  2463  0302  1703               	bsf	3,6	;RP1=1, select bank3
  2464  0303  019C               	clrf	pow@sign^(0+384)
  2465  0304  0812               	movf	(pow@x+2)^(0+384),w
  2466  0305  0411               	iorwf	(pow@x+1)^(0+384),w
  2467  0306  0410               	iorwf	pow@x^(0+384),w
  2468  0307  1D03               	skipz
  2469  0308  2B39               	goto	l3192
  2470  0309  3000               	movlw	0
  2471  030A  1683               	bsf	3,5	;RP0=1, select bank1
  2472  030B  1303               	bcf	3,6	;RP1=0, select bank1
  2473  030C  00BE               	movwf	___ftge@ff1^(0+128)
  2474  030D  3000               	movlw	0
  2475  030E  00BF               	movwf	(___ftge@ff1+1)^(0+128)
  2476  030F  3000               	movlw	0
  2477  0310  00C0               	movwf	(___ftge@ff1+2)^(0+128)
  2478  0311  1683               	bsf	3,5	;RP0=1, select bank3
  2479  0312  1703               	bsf	3,6	;RP1=1, select bank3
  2480  0313  0813               	movf	pow@y^(0+384),w
  2481  0314  1683               	bsf	3,5	;RP0=1, select bank1
  2482  0315  1303               	bcf	3,6	;RP1=0, select bank1
  2483  0316  00C1               	movwf	___ftge@ff2^(0+128)
  2484  0317  1683               	bsf	3,5	;RP0=1, select bank3
  2485  0318  1703               	bsf	3,6	;RP1=1, select bank3
  2486  0319  0814               	movf	(pow@y+1)^(0+384),w
  2487  031A  1683               	bsf	3,5	;RP0=1, select bank1
  2488  031B  1303               	bcf	3,6	;RP1=0, select bank1
  2489  031C  00C2               	movwf	(___ftge@ff2+1)^(0+128)
  2490  031D  1683               	bsf	3,5	;RP0=1, select bank3
  2491  031E  1703               	bsf	3,6	;RP1=1, select bank3
  2492  031F  0815               	movf	(pow@y+2)^(0+384),w
  2493  0320  1683               	bsf	3,5	;RP0=1, select bank1
  2494  0321  1303               	bcf	3,6	;RP1=0, select bank1
  2495  0322  00C3               	movwf	(___ftge@ff2+2)^(0+128)
  2496  0323  160A  118A  2740  120A  118A  	fcall	___ftge
  2497  0328  1C03               	btfss	3,0
  2498  0329  2B30               	goto	l579
  2499  032A  3021               	movlw	33
  2500  032B  1283               	bcf	3,5	;RP0=0, select bank0
  2501  032C  1303               	bcf	3,6	;RP1=0, select bank0
  2502  032D  00C9               	movwf	_errno
  2503  032E  3000               	movlw	0
  2504  032F  00CA               	movwf	_errno+1
  2505  0330                     l579:	
  2506  0330  3000               	movlw	0
  2507  0331  1683               	bsf	3,5	;RP0=1, select bank3
  2508  0332  1703               	bsf	3,6	;RP1=1, select bank3
  2509  0333  0090               	movwf	?_pow^(0+384)
  2510  0334  3000               	movlw	0
  2511  0335  0091               	movwf	(?_pow+1)^(0+384)
  2512  0336  3000               	movlw	0
  2513  0337  0092               	movwf	(?_pow+2)^(0+384)
  2514  0338  0008               	return
  2515  0339                     l3192:	
  2516  0339  0815               	movf	(pow@y+2)^(0+384),w
  2517  033A  0414               	iorwf	(pow@y+1)^(0+384),w
  2518  033B  0413               	iorwf	pow@y^(0+384),w
  2519  033C  1D03               	skipz
  2520  033D  2B45               	goto	l3198
  2521  033E  3000               	movlw	0
  2522  033F  0090               	movwf	?_pow^(0+384)
  2523  0340  3080               	movlw	128
  2524  0341  0091               	movwf	(?_pow+1)^(0+384)
  2525  0342  303F               	movlw	63
  2526  0343  0092               	movwf	(?_pow+2)^(0+384)
  2527  0344  0008               	return
  2528  0345                     l3198:	
  2529  0345  0810               	movf	pow@x^(0+384),w
  2530  0346  1683               	bsf	3,5	;RP0=1, select bank1
  2531  0347  1303               	bcf	3,6	;RP1=0, select bank1
  2532  0348  00BE               	movwf	___ftge@ff1^(0+128)
  2533  0349  1683               	bsf	3,5	;RP0=1, select bank3
  2534  034A  1703               	bsf	3,6	;RP1=1, select bank3
  2535  034B  0811               	movf	(pow@x+1)^(0+384),w
  2536  034C  1683               	bsf	3,5	;RP0=1, select bank1
  2537  034D  1303               	bcf	3,6	;RP1=0, select bank1
  2538  034E  00BF               	movwf	(___ftge@ff1+1)^(0+128)
  2539  034F  1683               	bsf	3,5	;RP0=1, select bank3
  2540  0350  1703               	bsf	3,6	;RP1=1, select bank3
  2541  0351  0812               	movf	(pow@x+2)^(0+384),w
  2542  0352  1683               	bsf	3,5	;RP0=1, select bank1
  2543  0353  1303               	bcf	3,6	;RP1=0, select bank1
  2544  0354  00C0               	movwf	(___ftge@ff1+2)^(0+128)
  2545  0355  3000               	movlw	0
  2546  0356  00C1               	movwf	___ftge@ff2^(0+128)
  2547  0357  3000               	movlw	0
  2548  0358  00C2               	movwf	(___ftge@ff2+1)^(0+128)
  2549  0359  3000               	movlw	0
  2550  035A  00C3               	movwf	(___ftge@ff2+2)^(0+128)
  2551  035B  160A  118A  2740  120A  118A  	fcall	___ftge
  2552  0360  1803               	btfsc	3,0
  2553  0361  2C05               	goto	l3210
  2554  0362  1683               	bsf	3,5	;RP0=1, select bank3
  2555  0363  1703               	bsf	3,6	;RP1=1, select bank3
  2556  0364  0813               	movf	pow@y^(0+384),w
  2557  0365  1683               	bsf	3,5	;RP0=1, select bank1
  2558  0366  1303               	bcf	3,6	;RP1=0, select bank1
  2559  0367  00BE               	movwf	___fttol@f1^(0+128)
  2560  0368  1683               	bsf	3,5	;RP0=1, select bank3
  2561  0369  1703               	bsf	3,6	;RP1=1, select bank3
  2562  036A  0814               	movf	(pow@y+1)^(0+384),w
  2563  036B  1683               	bsf	3,5	;RP0=1, select bank1
  2564  036C  1303               	bcf	3,6	;RP1=0, select bank1
  2565  036D  00BF               	movwf	(___fttol@f1+1)^(0+128)
  2566  036E  1683               	bsf	3,5	;RP0=1, select bank3
  2567  036F  1703               	bsf	3,6	;RP1=1, select bank3
  2568  0370  0815               	movf	(pow@y+2)^(0+384),w
  2569  0371  1683               	bsf	3,5	;RP0=1, select bank1
  2570  0372  1303               	bcf	3,6	;RP1=0, select bank1
  2571  0373  00C0               	movwf	(___fttol@f1+2)^(0+128)
  2572  0374  120A  158A  2280  120A  118A  	fcall	___fttol
  2573  0379  1683               	bsf	3,5	;RP0=1, select bank1
  2574  037A  1303               	bcf	3,6	;RP1=0, select bank1
  2575  037B  0841               	movf	(?___fttol+3)^(0+128),w
  2576  037C  1683               	bsf	3,5	;RP0=1, select bank3
  2577  037D  1703               	bsf	3,6	;RP1=1, select bank3
  2578  037E  00A0               	movwf	(pow@yi+3)^(0+384)
  2579  037F  1683               	bsf	3,5	;RP0=1, select bank1
  2580  0380  1303               	bcf	3,6	;RP1=0, select bank1
  2581  0381  0840               	movf	(?___fttol+2)^(0+128),w
  2582  0382  1683               	bsf	3,5	;RP0=1, select bank3
  2583  0383  1703               	bsf	3,6	;RP1=1, select bank3
  2584  0384  009F               	movwf	(pow@yi+2)^(0+384)
  2585  0385  1683               	bsf	3,5	;RP0=1, select bank1
  2586  0386  1303               	bcf	3,6	;RP1=0, select bank1
  2587  0387  083F               	movf	(?___fttol+1)^(0+128),w
  2588  0388  1683               	bsf	3,5	;RP0=1, select bank3
  2589  0389  1703               	bsf	3,6	;RP1=1, select bank3
  2590  038A  009E               	movwf	(pow@yi+1)^(0+384)
  2591  038B  1683               	bsf	3,5	;RP0=1, select bank1
  2592  038C  1303               	bcf	3,6	;RP1=0, select bank1
  2593  038D  083E               	movf	?___fttol^(0+128),w
  2594  038E  1683               	bsf	3,5	;RP0=1, select bank3
  2595  038F  1703               	bsf	3,6	;RP1=1, select bank3
  2596  0390  009D               	movwf	pow@yi^(0+384)
  2597  0391  0820               	movf	(pow@yi+3)^(0+384),w
  2598  0392  1683               	bsf	3,5	;RP0=1, select bank1
  2599  0393  1303               	bcf	3,6	;RP1=0, select bank1
  2600  0394  00AB               	movwf	(___lltoft@c+3)^(0+128)
  2601  0395  1683               	bsf	3,5	;RP0=1, select bank3
  2602  0396  1703               	bsf	3,6	;RP1=1, select bank3
  2603  0397  081F               	movf	(pow@yi+2)^(0+384),w
  2604  0398  1683               	bsf	3,5	;RP0=1, select bank1
  2605  0399  1303               	bcf	3,6	;RP1=0, select bank1
  2606  039A  00AA               	movwf	(___lltoft@c+2)^(0+128)
  2607  039B  1683               	bsf	3,5	;RP0=1, select bank3
  2608  039C  1703               	bsf	3,6	;RP1=1, select bank3
  2609  039D  081E               	movf	(pow@yi+1)^(0+384),w
  2610  039E  1683               	bsf	3,5	;RP0=1, select bank1
  2611  039F  1303               	bcf	3,6	;RP1=0, select bank1
  2612  03A0  00A9               	movwf	(___lltoft@c+1)^(0+128)
  2613  03A1  1683               	bsf	3,5	;RP0=1, select bank3
  2614  03A2  1703               	bsf	3,6	;RP1=1, select bank3
  2615  03A3  081D               	movf	pow@yi^(0+384),w
  2616  03A4  1683               	bsf	3,5	;RP0=1, select bank1
  2617  03A5  1303               	bcf	3,6	;RP1=0, select bank1
  2618  03A6  00A8               	movwf	___lltoft@c^(0+128)
  2619  03A7  120A  158A  2070  120A  118A  	fcall	___lltoft
  2620  03AC  1683               	bsf	3,5	;RP0=1, select bank3
  2621  03AD  1703               	bsf	3,6	;RP1=1, select bank3
  2622  03AE  0815               	movf	(pow@y+2)^(0+384),w
  2623  03AF  1683               	bsf	3,5	;RP0=1, select bank1
  2624  03B0  1303               	bcf	3,6	;RP1=0, select bank1
  2625  03B1  062A               	xorwf	(?___lltoft+2)^(0+128),w
  2626  03B2  1D03               	skipz
  2627  03B3  2BC2               	goto	u4475
  2628  03B4  1683               	bsf	3,5	;RP0=1, select bank3
  2629  03B5  1703               	bsf	3,6	;RP1=1, select bank3
  2630  03B6  0814               	movf	(pow@y+1)^(0+384),w
  2631  03B7  1683               	bsf	3,5	;RP0=1, select bank1
  2632  03B8  1303               	bcf	3,6	;RP1=0, select bank1
  2633  03B9  0629               	xorwf	(?___lltoft+1)^(0+128),w
  2634  03BA  1D03               	skipz
  2635  03BB  2BC2               	goto	u4475
  2636  03BC  1683               	bsf	3,5	;RP0=1, select bank3
  2637  03BD  1703               	bsf	3,6	;RP1=1, select bank3
  2638  03BE  0813               	movf	pow@y^(0+384),w
  2639  03BF  1683               	bsf	3,5	;RP0=1, select bank1
  2640  03C0  1303               	bcf	3,6	;RP1=0, select bank1
  2641  03C1  0628               	xorwf	?___lltoft^(0+128),w
  2642  03C2                     u4475:	
  2643  03C2  1903               	skipnz
  2644  03C3  2BD3               	goto	l3206
  2645  03C4  3021               	movlw	33
  2646  03C5  1283               	bcf	3,5	;RP0=0, select bank0
  2647  03C6  1303               	bcf	3,6	;RP1=0, select bank0
  2648  03C7  00C9               	movwf	_errno
  2649  03C8  3000               	movlw	0
  2650  03C9  00CA               	movwf	_errno+1
  2651  03CA  3000               	movlw	0
  2652  03CB  1683               	bsf	3,5	;RP0=1, select bank3
  2653  03CC  1703               	bsf	3,6	;RP1=1, select bank3
  2654  03CD  0090               	movwf	?_pow^(0+384)
  2655  03CE  3000               	movlw	0
  2656  03CF  0091               	movwf	(?_pow+1)^(0+384)
  2657  03D0  3000               	movlw	0
  2658  03D1  0092               	movwf	(?_pow+2)^(0+384)
  2659  03D2  0008               	return
  2660  03D3                     l3206:	
  2661  03D3  1683               	bsf	3,5	;RP0=1, select bank3
  2662  03D4  1703               	bsf	3,6	;RP1=1, select bank3
  2663  03D5  081D               	movf	pow@yi^(0+384),w
  2664  03D6  3901               	andlw	1
  2665  03D7  1683               	bsf	3,5	;RP0=1, select bank1
  2666  03D8  1303               	bcf	3,6	;RP1=0, select bank1
  2667  03D9  00EC               	movwf	??_pow^(0+128)
  2668  03DA  086C               	movf	??_pow^(0+128),w
  2669  03DB  1683               	bsf	3,5	;RP0=1, select bank3
  2670  03DC  1703               	bsf	3,6	;RP1=1, select bank3
  2671  03DD  009C               	movwf	pow@sign^(0+384)
  2672  03DE  0810               	movf	pow@x^(0+384),w
  2673  03DF  1683               	bsf	3,5	;RP0=1, select bank1
  2674  03E0  1303               	bcf	3,6	;RP1=0, select bank1
  2675  03E1  00A0               	movwf	___ftneg@f1^(0+128)
  2676  03E2  1683               	bsf	3,5	;RP0=1, select bank3
  2677  03E3  1703               	bsf	3,6	;RP1=1, select bank3
  2678  03E4  0811               	movf	(pow@x+1)^(0+384),w
  2679  03E5  1683               	bsf	3,5	;RP0=1, select bank1
  2680  03E6  1303               	bcf	3,6	;RP1=0, select bank1
  2681  03E7  00A1               	movwf	(___ftneg@f1+1)^(0+128)
  2682  03E8  1683               	bsf	3,5	;RP0=1, select bank3
  2683  03E9  1703               	bsf	3,6	;RP1=1, select bank3
  2684  03EA  0812               	movf	(pow@x+2)^(0+384),w
  2685  03EB  1683               	bsf	3,5	;RP0=1, select bank1
  2686  03EC  1303               	bcf	3,6	;RP1=0, select bank1
  2687  03ED  00A2               	movwf	(___ftneg@f1+2)^(0+128)
  2688  03EE  160A  118A  2439  120A  118A  	fcall	___ftneg
  2689  03F3  1683               	bsf	3,5	;RP0=1, select bank1
  2690  03F4  1303               	bcf	3,6	;RP1=0, select bank1
  2691  03F5  0820               	movf	?___ftneg^(0+128),w
  2692  03F6  1683               	bsf	3,5	;RP0=1, select bank3
  2693  03F7  1703               	bsf	3,6	;RP1=1, select bank3
  2694  03F8  0090               	movwf	pow@x^(0+384)
  2695  03F9  1683               	bsf	3,5	;RP0=1, select bank1
  2696  03FA  1303               	bcf	3,6	;RP1=0, select bank1
  2697  03FB  0821               	movf	(?___ftneg+1)^(0+128),w
  2698  03FC  1683               	bsf	3,5	;RP0=1, select bank3
  2699  03FD  1703               	bsf	3,6	;RP1=1, select bank3
  2700  03FE  0091               	movwf	(pow@x+1)^(0+384)
  2701  03FF  1683               	bsf	3,5	;RP0=1, select bank1
  2702  0400  1303               	bcf	3,6	;RP1=0, select bank1
  2703  0401  0822               	movf	(?___ftneg+2)^(0+128),w
  2704  0402  1683               	bsf	3,5	;RP0=1, select bank3
  2705  0403  1703               	bsf	3,6	;RP1=1, select bank3
  2706  0404  0092               	movwf	(pow@x+2)^(0+384)
  2707  0405                     l3210:	
  2708  0405  1683               	bsf	3,5	;RP0=1, select bank3
  2709  0406  1703               	bsf	3,6	;RP1=1, select bank3
  2710  0407  0810               	movf	pow@x^(0+384),w
  2711  0408  1683               	bsf	3,5	;RP0=1, select bank1
  2712  0409  1303               	bcf	3,6	;RP1=0, select bank1
  2713  040A  00D5               	movwf	log@x^(0+128)
  2714  040B  1683               	bsf	3,5	;RP0=1, select bank3
  2715  040C  1703               	bsf	3,6	;RP1=1, select bank3
  2716  040D  0811               	movf	(pow@x+1)^(0+384),w
  2717  040E  1683               	bsf	3,5	;RP0=1, select bank1
  2718  040F  1303               	bcf	3,6	;RP1=0, select bank1
  2719  0410  00D6               	movwf	(log@x+1)^(0+128)
  2720  0411  1683               	bsf	3,5	;RP0=1, select bank3
  2721  0412  1703               	bsf	3,6	;RP1=1, select bank3
  2722  0413  0812               	movf	(pow@x+2)^(0+384),w
  2723  0414  1683               	bsf	3,5	;RP0=1, select bank1
  2724  0415  1303               	bcf	3,6	;RP1=0, select bank1
  2725  0416  00D7               	movwf	(log@x+2)^(0+128)
  2726  0417  120A  158A  2662  120A  118A  	fcall	_log
  2727  041C  1683               	bsf	3,5	;RP0=1, select bank1
  2728  041D  1303               	bcf	3,6	;RP1=0, select bank1
  2729  041E  0855               	movf	?_log^(0+128),w
  2730  041F  1683               	bsf	3,5	;RP0=1, select bank3
  2731  0420  1703               	bsf	3,6	;RP1=1, select bank3
  2732  0421  0096               	movwf	_pow$899^(0+384)
  2733  0422  1683               	bsf	3,5	;RP0=1, select bank1
  2734  0423  1303               	bcf	3,6	;RP1=0, select bank1
  2735  0424  0856               	movf	(?_log+1)^(0+128),w
  2736  0425  1683               	bsf	3,5	;RP0=1, select bank3
  2737  0426  1703               	bsf	3,6	;RP1=1, select bank3
  2738  0427  0097               	movwf	(_pow$899+1)^(0+384)
  2739  0428  1683               	bsf	3,5	;RP0=1, select bank1
  2740  0429  1303               	bcf	3,6	;RP1=0, select bank1
  2741  042A  0857               	movf	(?_log+2)^(0+128),w
  2742  042B  1683               	bsf	3,5	;RP0=1, select bank3
  2743  042C  1703               	bsf	3,6	;RP1=1, select bank3
  2744  042D  0098               	movwf	(_pow$899+2)^(0+384)
  2745  042E  0813               	movf	pow@y^(0+384),w
  2746  042F  1683               	bsf	3,5	;RP0=1, select bank1
  2747  0430  1303               	bcf	3,6	;RP1=0, select bank1
  2748  0431  00AE               	movwf	___ftmul@f1^(0+128)
  2749  0432  1683               	bsf	3,5	;RP0=1, select bank3
  2750  0433  1703               	bsf	3,6	;RP1=1, select bank3
  2751  0434  0814               	movf	(pow@y+1)^(0+384),w
  2752  0435  1683               	bsf	3,5	;RP0=1, select bank1
  2753  0436  1303               	bcf	3,6	;RP1=0, select bank1
  2754  0437  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  2755  0438  1683               	bsf	3,5	;RP0=1, select bank3
  2756  0439  1703               	bsf	3,6	;RP1=1, select bank3
  2757  043A  0815               	movf	(pow@y+2)^(0+384),w
  2758  043B  1683               	bsf	3,5	;RP0=1, select bank1
  2759  043C  1303               	bcf	3,6	;RP1=0, select bank1
  2760  043D  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  2761  043E  1683               	bsf	3,5	;RP0=1, select bank3
  2762  043F  1703               	bsf	3,6	;RP1=1, select bank3
  2763  0440  0816               	movf	_pow$899^(0+384),w
  2764  0441  1683               	bsf	3,5	;RP0=1, select bank1
  2765  0442  1303               	bcf	3,6	;RP1=0, select bank1
  2766  0443  00B1               	movwf	___ftmul@f2^(0+128)
  2767  0444  1683               	bsf	3,5	;RP0=1, select bank3
  2768  0445  1703               	bsf	3,6	;RP1=1, select bank3
  2769  0446  0817               	movf	(_pow$899+1)^(0+384),w
  2770  0447  1683               	bsf	3,5	;RP0=1, select bank1
  2771  0448  1303               	bcf	3,6	;RP1=0, select bank1
  2772  0449  00B2               	movwf	(___ftmul@f2+1)^(0+128)
  2773  044A  1683               	bsf	3,5	;RP0=1, select bank3
  2774  044B  1703               	bsf	3,6	;RP1=1, select bank3
  2775  044C  0818               	movf	(_pow$899+2)^(0+384),w
  2776  044D  1683               	bsf	3,5	;RP0=1, select bank1
  2777  044E  1303               	bcf	3,6	;RP1=0, select bank1
  2778  044F  00B3               	movwf	(___ftmul@f2+2)^(0+128)
  2779  0450  120A  118A  2708  120A  118A  	fcall	___ftmul
  2780  0455  1683               	bsf	3,5	;RP0=1, select bank1
  2781  0456  1303               	bcf	3,6	;RP1=0, select bank1
  2782  0457  082E               	movf	?___ftmul^(0+128),w
  2783  0458  1683               	bsf	3,5	;RP0=1, select bank3
  2784  0459  1703               	bsf	3,6	;RP1=1, select bank3
  2785  045A  0099               	movwf	_pow$900^(0+384)
  2786  045B  1683               	bsf	3,5	;RP0=1, select bank1
  2787  045C  1303               	bcf	3,6	;RP1=0, select bank1
  2788  045D  082F               	movf	(?___ftmul+1)^(0+128),w
  2789  045E  1683               	bsf	3,5	;RP0=1, select bank3
  2790  045F  1703               	bsf	3,6	;RP1=1, select bank3
  2791  0460  009A               	movwf	(_pow$900+1)^(0+384)
  2792  0461  1683               	bsf	3,5	;RP0=1, select bank1
  2793  0462  1303               	bcf	3,6	;RP1=0, select bank1
  2794  0463  0830               	movf	(?___ftmul+2)^(0+128),w
  2795  0464  1683               	bsf	3,5	;RP0=1, select bank3
  2796  0465  1703               	bsf	3,6	;RP1=1, select bank3
  2797  0466  009B               	movwf	(_pow$900+2)^(0+384)
  2798  0467  0819               	movf	_pow$900^(0+384),w
  2799  0468  1683               	bsf	3,5	;RP0=1, select bank1
  2800  0469  1303               	bcf	3,6	;RP1=0, select bank1
  2801  046A  00DF               	movwf	exp@x^(0+128)
  2802  046B  1683               	bsf	3,5	;RP0=1, select bank3
  2803  046C  1703               	bsf	3,6	;RP1=1, select bank3
  2804  046D  081A               	movf	(_pow$900+1)^(0+384),w
  2805  046E  1683               	bsf	3,5	;RP0=1, select bank1
  2806  046F  1303               	bcf	3,6	;RP1=0, select bank1
  2807  0470  00E0               	movwf	(exp@x+1)^(0+128)
  2808  0471  1683               	bsf	3,5	;RP0=1, select bank3
  2809  0472  1703               	bsf	3,6	;RP1=1, select bank3
  2810  0473  081B               	movf	(_pow$900+2)^(0+384),w
  2811  0474  1683               	bsf	3,5	;RP0=1, select bank1
  2812  0475  1303               	bcf	3,6	;RP1=0, select bank1
  2813  0476  00E1               	movwf	(exp@x+2)^(0+128)
  2814  0477  120A  118A  24B7  120A  118A  	fcall	_exp
  2815  047C  1683               	bsf	3,5	;RP0=1, select bank1
  2816  047D  1303               	bcf	3,6	;RP1=0, select bank1
  2817  047E  085F               	movf	?_exp^(0+128),w
  2818  047F  1683               	bsf	3,5	;RP0=1, select bank3
  2819  0480  1703               	bsf	3,6	;RP1=1, select bank3
  2820  0481  0090               	movwf	pow@x^(0+384)
  2821  0482  1683               	bsf	3,5	;RP0=1, select bank1
  2822  0483  1303               	bcf	3,6	;RP1=0, select bank1
  2823  0484  0860               	movf	(?_exp+1)^(0+128),w
  2824  0485  1683               	bsf	3,5	;RP0=1, select bank3
  2825  0486  1703               	bsf	3,6	;RP1=1, select bank3
  2826  0487  0091               	movwf	(pow@x+1)^(0+384)
  2827  0488  1683               	bsf	3,5	;RP0=1, select bank1
  2828  0489  1303               	bcf	3,6	;RP1=0, select bank1
  2829  048A  0861               	movf	(?_exp+2)^(0+128),w
  2830  048B  1683               	bsf	3,5	;RP0=1, select bank3
  2831  048C  1703               	bsf	3,6	;RP1=1, select bank3
  2832  048D  0092               	movwf	(pow@x+2)^(0+384)
  2833  048E  081C               	movf	pow@sign^(0+384),w
  2834  048F  1903               	btfsc	3,2
  2835  0490  0008               	return
  2836  0491  0810               	movf	pow@x^(0+384),w
  2837  0492  1683               	bsf	3,5	;RP0=1, select bank1
  2838  0493  1303               	bcf	3,6	;RP1=0, select bank1
  2839  0494  00A0               	movwf	___ftneg@f1^(0+128)
  2840  0495  1683               	bsf	3,5	;RP0=1, select bank3
  2841  0496  1703               	bsf	3,6	;RP1=1, select bank3
  2842  0497  0811               	movf	(pow@x+1)^(0+384),w
  2843  0498  1683               	bsf	3,5	;RP0=1, select bank1
  2844  0499  1303               	bcf	3,6	;RP1=0, select bank1
  2845  049A  00A1               	movwf	(___ftneg@f1+1)^(0+128)
  2846  049B  1683               	bsf	3,5	;RP0=1, select bank3
  2847  049C  1703               	bsf	3,6	;RP1=1, select bank3
  2848  049D  0812               	movf	(pow@x+2)^(0+384),w
  2849  049E  1683               	bsf	3,5	;RP0=1, select bank1
  2850  049F  1303               	bcf	3,6	;RP1=0, select bank1
  2851  04A0  00A2               	movwf	(___ftneg@f1+2)^(0+128)
  2852  04A1  160A  118A  2439   	fcall	___ftneg
  2853  04A4  1683               	bsf	3,5	;RP0=1, select bank1
  2854  04A5  1303               	bcf	3,6	;RP1=0, select bank1
  2855  04A6  0820               	movf	?___ftneg^(0+128),w
  2856  04A7  1683               	bsf	3,5	;RP0=1, select bank3
  2857  04A8  1703               	bsf	3,6	;RP1=1, select bank3
  2858  04A9  0090               	movwf	?_pow^(0+384)
  2859  04AA  1683               	bsf	3,5	;RP0=1, select bank1
  2860  04AB  1303               	bcf	3,6	;RP1=0, select bank1
  2861  04AC  0821               	movf	(?___ftneg+1)^(0+128),w
  2862  04AD  1683               	bsf	3,5	;RP0=1, select bank3
  2863  04AE  1703               	bsf	3,6	;RP1=1, select bank3
  2864  04AF  0091               	movwf	(?_pow+1)^(0+384)
  2865  04B0  1683               	bsf	3,5	;RP0=1, select bank1
  2866  04B1  1303               	bcf	3,6	;RP1=0, select bank1
  2867  04B2  0822               	movf	(?___ftneg+2)^(0+128),w
  2868  04B3  1683               	bsf	3,5	;RP0=1, select bank3
  2869  04B4  1703               	bsf	3,6	;RP1=1, select bank3
  2870  04B5  0092               	movwf	(?_pow+2)^(0+384)
  2871  04B6  0008               	return
  2872  04B7                     __end_of_pow:	
  2873                           
  2874                           	psect	text6
  2875  0E62                     __ptext6:	
  2876 ;; *************** function _log *****************
  2877 ;; Defined at:
  2878 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\log.c"
  2879 ;; Parameters:    Size  Location     Type
  2880 ;;  x               3   53[BANK1 ] unsigned char 
  2881 ;; Auto vars:     Size  Location     Type
  2882 ;;  exponent        2   57[BANK1 ] int 
  2883 ;; Return value:  Size  Location     Type
  2884 ;;                  3   53[BANK1 ] int 
  2885 ;; Registers used:
  2886 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2887 ;; Tracked objects:
  2888 ;;		On entry : 0/0
  2889 ;;		On exit  : 0/0
  2890 ;;		Unchanged: 0/0
  2891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2892 ;;      Params:         0       0       3       0       0
  2893 ;;      Locals:         0       0       2       0       0
  2894 ;;      Temps:          0       0       1       0       0
  2895 ;;      Totals:         0       0       6       0       0
  2896 ;;Total ram usage:        6 bytes
  2897 ;; Hardware stack levels used:    1
  2898 ;; Hardware stack levels required when called:    6
  2899 ;; This function calls:
  2900 ;;		___awtoft
  2901 ;;		___ftadd
  2902 ;;		___ftge
  2903 ;;		___ftmul
  2904 ;;		_eval_poly
  2905 ;;		_frexp
  2906 ;; This function is called by:
  2907 ;;		_pow
  2908 ;; This function uses a non-reentrant model
  2909 ;;
  2910                           
  2911                           
  2912                           ;psect for function _log
  2913  0E62                     _log:	
  2914                           
  2915                           ;incstack = 0
  2916 ;; hardware stack exceeded
  2917                           ; Regs used in _log: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2918  0E62  1683               	bsf	3,5	;RP0=1, select bank1
  2919  0E63  1303               	bcf	3,6	;RP1=0, select bank1
  2920  0E64  0855               	movf	log@x^(0+128),w
  2921  0E65  00BE               	movwf	___ftge@ff1^(0+128)
  2922  0E66  0856               	movf	(log@x+1)^(0+128),w
  2923  0E67  00BF               	movwf	(___ftge@ff1+1)^(0+128)
  2924  0E68  0857               	movf	(log@x+2)^(0+128),w
  2925  0E69  00C0               	movwf	(___ftge@ff1+2)^(0+128)
  2926  0E6A  3000               	movlw	0
  2927  0E6B  00C1               	movwf	___ftge@ff2^(0+128)
  2928  0E6C  3000               	movlw	0
  2929  0E6D  00C2               	movwf	(___ftge@ff2+1)^(0+128)
  2930  0E6E  3000               	movlw	0
  2931  0E6F  00C3               	movwf	(___ftge@ff2+2)^(0+128)
  2932  0E70  160A  118A  2740  120A  158A  	fcall	___ftge
  2933  0E75  1803               	btfsc	3,0
  2934  0E76  2E86               	goto	l3102
  2935  0E77  3021               	movlw	33
  2936  0E78  1283               	bcf	3,5	;RP0=0, select bank0
  2937  0E79  1303               	bcf	3,6	;RP1=0, select bank0
  2938  0E7A  00C9               	movwf	_errno
  2939  0E7B  3000               	movlw	0
  2940  0E7C  00CA               	movwf	_errno+1
  2941  0E7D  3000               	movlw	0
  2942  0E7E  1683               	bsf	3,5	;RP0=1, select bank1
  2943  0E7F  1303               	bcf	3,6	;RP1=0, select bank1
  2944  0E80  00D5               	movwf	?_log^(0+128)
  2945  0E81  3000               	movlw	0
  2946  0E82  00D6               	movwf	(?_log+1)^(0+128)
  2947  0E83  3000               	movlw	0
  2948  0E84  00D7               	movwf	(?_log+2)^(0+128)
  2949  0E85  0008               	return
  2950  0E86                     l3102:	
  2951  0E86  1683               	bsf	3,5	;RP0=1, select bank1
  2952  0E87  1303               	bcf	3,6	;RP1=0, select bank1
  2953  0E88  0857               	movf	(log@x+2)^(0+128),w
  2954  0E89  0456               	iorwf	(log@x+1)^(0+128),w
  2955  0E8A  0455               	iorwf	log@x^(0+128),w
  2956  0E8B  1D03               	skipz
  2957  0E8C  2E9C               	goto	l3108
  2958  0E8D  3022               	movlw	34
  2959  0E8E  1283               	bcf	3,5	;RP0=0, select bank0
  2960  0E8F  1303               	bcf	3,6	;RP1=0, select bank0
  2961  0E90  00C9               	movwf	_errno
  2962  0E91  3000               	movlw	0
  2963  0E92  00CA               	movwf	_errno+1
  2964  0E93  3000               	movlw	0
  2965  0E94  1683               	bsf	3,5	;RP0=1, select bank1
  2966  0E95  1303               	bcf	3,6	;RP1=0, select bank1
  2967  0E96  00D5               	movwf	?_log^(0+128)
  2968  0E97  3000               	movlw	0
  2969  0E98  00D6               	movwf	(?_log+1)^(0+128)
  2970  0E99  3000               	movlw	0
  2971  0E9A  00D7               	movwf	(?_log+2)^(0+128)
  2972  0E9B  0008               	return
  2973  0E9C                     l3108:	
  2974  0E9C  3000               	movlw	0
  2975  0E9D  00BE               	movwf	___ftadd@f1^(0+128)
  2976  0E9E  3080               	movlw	128
  2977  0E9F  00BF               	movwf	(___ftadd@f1+1)^(0+128)
  2978  0EA0  30BF               	movlw	191
  2979  0EA1  00C0               	movwf	(___ftadd@f1+2)^(0+128)
  2980  0EA2  3000               	movlw	0
  2981  0EA3  00AE               	movwf	___ftmul@f1^(0+128)
  2982  0EA4  3000               	movlw	0
  2983  0EA5  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  2984  0EA6  3040               	movlw	64
  2985  0EA7  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  2986  0EA8  30D9               	movlw	(low (log@exponent| 0))& (0+255)
  2987  0EA9  00D8               	movwf	??_log^(0+128)
  2988  0EAA  0858               	movf	??_log^(0+128),w
  2989  0EAB  00A3               	movwf	frexp@eptr^(0+128)
  2990  0EAC  0855               	movf	log@x^(0+128),w
  2991  0EAD  00A0               	movwf	frexp@value^(0+128)
  2992  0EAE  0856               	movf	(log@x+1)^(0+128),w
  2993  0EAF  00A1               	movwf	(frexp@value+1)^(0+128)
  2994  0EB0  0857               	movf	(log@x+2)^(0+128),w
  2995  0EB1  00A2               	movwf	(frexp@value+2)^(0+128)
  2996  0EB2  160A  118A  2575  120A  158A  	fcall	_frexp
  2997  0EB7  1683               	bsf	3,5	;RP0=1, select bank1
  2998  0EB8  1303               	bcf	3,6	;RP1=0, select bank1
  2999  0EB9  0820               	movf	?_frexp^(0+128),w
  3000  0EBA  00B1               	movwf	___ftmul@f2^(0+128)
  3001  0EBB  0821               	movf	(?_frexp+1)^(0+128),w
  3002  0EBC  00B2               	movwf	(___ftmul@f2+1)^(0+128)
  3003  0EBD  0822               	movf	(?_frexp+2)^(0+128),w
  3004  0EBE  00B3               	movwf	(___ftmul@f2+2)^(0+128)
  3005  0EBF  120A  118A  2708  120A  158A  	fcall	___ftmul
  3006  0EC4  1683               	bsf	3,5	;RP0=1, select bank1
  3007  0EC5  1303               	bcf	3,6	;RP1=0, select bank1
  3008  0EC6  082E               	movf	?___ftmul^(0+128),w
  3009  0EC7  00C1               	movwf	___ftadd@f2^(0+128)
  3010  0EC8  082F               	movf	(?___ftmul+1)^(0+128),w
  3011  0EC9  00C2               	movwf	(___ftadd@f2+1)^(0+128)
  3012  0ECA  0830               	movf	(?___ftmul+2)^(0+128),w
  3013  0ECB  00C3               	movwf	(___ftadd@f2+2)^(0+128)
  3014  0ECC  120A  118A  25FF  120A  158A  	fcall	___ftadd
  3015  0ED1  1683               	bsf	3,5	;RP0=1, select bank1
  3016  0ED2  1303               	bcf	3,6	;RP1=0, select bank1
  3017  0ED3  083E               	movf	?___ftadd^(0+128),w
  3018  0ED4  00D5               	movwf	log@x^(0+128)
  3019  0ED5  083F               	movf	(?___ftadd+1)^(0+128),w
  3020  0ED6  00D6               	movwf	(log@x+1)^(0+128)
  3021  0ED7  0840               	movf	(?___ftadd+2)^(0+128),w
  3022  0ED8  00D7               	movwf	(log@x+2)^(0+128)
  3023  0ED9  30FF               	movlw	255
  3024  0EDA  07D9               	addwf	log@exponent^(0+128),f
  3025  0EDB  1803               	skipnc
  3026  0EDC  0ADA               	incf	(log@exponent+1)^(0+128),f
  3027  0EDD  30FF               	movlw	255
  3028  0EDE  07DA               	addwf	(log@exponent+1)^(0+128),f
  3029  0EDF  0855               	movf	log@x^(0+128),w
  3030  0EE0  00CB               	movwf	eval_poly@x^(0+128)
  3031  0EE1  0856               	movf	(log@x+1)^(0+128),w
  3032  0EE2  00CC               	movwf	(eval_poly@x+1)^(0+128)
  3033  0EE3  0857               	movf	(log@x+2)^(0+128),w
  3034  0EE4  00CD               	movwf	(eval_poly@x+2)^(0+128)
  3035  0EE5  301F               	movlw	(low ((log@coeff-__stringbase)| (0+32768)))& (0+255)
  3036  0EE6  00D8               	movwf	??_log^(0+128)
  3037  0EE7  0858               	movf	??_log^(0+128),w
  3038  0EE8  00CE               	movwf	eval_poly@d^(0+128)
  3039  0EE9  3008               	movlw	8
  3040  0EEA  00CF               	movwf	eval_poly@n^(0+128)
  3041  0EEB  3000               	movlw	0
  3042  0EEC  00D0               	movwf	(eval_poly@n^(0+128)+1)
  3043  0EED  120A  158A  2179  120A  158A  	fcall	_eval_poly
  3044  0EF2  1683               	bsf	3,5	;RP0=1, select bank1
  3045  0EF3  1303               	bcf	3,6	;RP1=0, select bank1
  3046  0EF4  084B               	movf	?_eval_poly^(0+128),w
  3047  0EF5  00D5               	movwf	log@x^(0+128)
  3048  0EF6  084C               	movf	(?_eval_poly+1)^(0+128),w
  3049  0EF7  00D6               	movwf	(log@x+1)^(0+128)
  3050  0EF8  084D               	movf	(?_eval_poly+2)^(0+128),w
  3051  0EF9  00D7               	movwf	(log@x+2)^(0+128)
  3052  0EFA  0855               	movf	log@x^(0+128),w
  3053  0EFB  00BE               	movwf	___ftadd@f1^(0+128)
  3054  0EFC  0856               	movf	(log@x+1)^(0+128),w
  3055  0EFD  00BF               	movwf	(___ftadd@f1+1)^(0+128)
  3056  0EFE  0857               	movf	(log@x+2)^(0+128),w
  3057  0EFF  00C0               	movwf	(___ftadd@f1+2)^(0+128)
  3058  0F00  3072               	movlw	114
  3059  0F01  00AE               	movwf	___ftmul@f1^(0+128)
  3060  0F02  3031               	movlw	49
  3061  0F03  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  3062  0F04  303F               	movlw	63
  3063  0F05  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  3064  0F06  085A               	movf	(log@exponent+1)^(0+128),w
  3065  0F07  00A9               	movwf	(___awtoft@c+1)^(0+128)
  3066  0F08  0859               	movf	log@exponent^(0+128),w
  3067  0F09  00A8               	movwf	___awtoft@c^(0+128)
  3068  0F0A  120A  118A  27DB  120A  158A  	fcall	___awtoft
  3069  0F0F  1683               	bsf	3,5	;RP0=1, select bank1
  3070  0F10  1303               	bcf	3,6	;RP1=0, select bank1
  3071  0F11  0828               	movf	?___awtoft^(0+128),w
  3072  0F12  00B1               	movwf	___ftmul@f2^(0+128)
  3073  0F13  0829               	movf	(?___awtoft+1)^(0+128),w
  3074  0F14  00B2               	movwf	(___ftmul@f2+1)^(0+128)
  3075  0F15  082A               	movf	(?___awtoft+2)^(0+128),w
  3076  0F16  00B3               	movwf	(___ftmul@f2+2)^(0+128)
  3077  0F17  120A  118A  2708  120A  158A  	fcall	___ftmul
  3078  0F1C  1683               	bsf	3,5	;RP0=1, select bank1
  3079  0F1D  1303               	bcf	3,6	;RP1=0, select bank1
  3080  0F1E  082E               	movf	?___ftmul^(0+128),w
  3081  0F1F  00C1               	movwf	___ftadd@f2^(0+128)
  3082  0F20  082F               	movf	(?___ftmul+1)^(0+128),w
  3083  0F21  00C2               	movwf	(___ftadd@f2+1)^(0+128)
  3084  0F22  0830               	movf	(?___ftmul+2)^(0+128),w
  3085  0F23  00C3               	movwf	(___ftadd@f2+2)^(0+128)
  3086  0F24  120A  118A  25FF   	fcall	___ftadd
  3087  0F27  1683               	bsf	3,5	;RP0=1, select bank1
  3088  0F28  1303               	bcf	3,6	;RP1=0, select bank1
  3089  0F29  083E               	movf	?___ftadd^(0+128),w
  3090  0F2A  00D5               	movwf	?_log^(0+128)
  3091  0F2B  083F               	movf	(?___ftadd+1)^(0+128),w
  3092  0F2C  00D6               	movwf	(?_log+1)^(0+128)
  3093  0F2D  0840               	movf	(?___ftadd+2)^(0+128),w
  3094  0F2E  00D7               	movwf	(?_log+2)^(0+128)
  3095  0F2F  0008               	return
  3096  0F30                     __end_of_log:	
  3097                           
  3098                           	psect	text7
  3099  04B7                     __ptext7:	
  3100 ;; *************** function _exp *****************
  3101 ;; Defined at:
  3102 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\exp.c"
  3103 ;; Parameters:    Size  Location     Type
  3104 ;;  x               3   63[BANK1 ] int 
  3105 ;; Auto vars:     Size  Location     Type
  3106 ;;  exponent        2   73[BANK1 ] int 
  3107 ;;  sign            1   75[BANK1 ] unsigned char 
  3108 ;; Return value:  Size  Location     Type
  3109 ;;                  3   63[BANK1 ] unsigned char 
  3110 ;; Registers used:
  3111 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3112 ;; Tracked objects:
  3113 ;;		On entry : 0/0
  3114 ;;		On exit  : 0/0
  3115 ;;		Unchanged: 0/0
  3116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3117 ;;      Params:         0       0       3       0       0
  3118 ;;      Locals:         0       0       9       0       0
  3119 ;;      Temps:          0       0       1       0       0
  3120 ;;      Totals:         0       0      13       0       0
  3121 ;;Total ram usage:       13 bytes
  3122 ;; Hardware stack levels used:    1
  3123 ;; Hardware stack levels required when called:    6
  3124 ;; This function calls:
  3125 ;;		___awtoft
  3126 ;;		___ftdiv
  3127 ;;		___ftge
  3128 ;;		___ftmul
  3129 ;;		___ftneg
  3130 ;;		___ftsub
  3131 ;;		___fttol
  3132 ;;		_eval_poly
  3133 ;;		_floor
  3134 ;;		_ldexp
  3135 ;; This function is called by:
  3136 ;;		_pow
  3137 ;; This function uses a non-reentrant model
  3138 ;;
  3139                           
  3140                           
  3141                           ;psect for function _exp
  3142  04B7                     _exp:	
  3143                           
  3144                           ;incstack = 0
  3145 ;; hardware stack exceeded
  3146                           ; Regs used in _exp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3147  04B7  1683               	bsf	3,5	;RP0=1, select bank1
  3148  04B8  1303               	bcf	3,6	;RP1=0, select bank1
  3149  04B9  0861               	movf	(exp@x+2)^(0+128),w
  3150  04BA  0460               	iorwf	(exp@x+1)^(0+128),w
  3151  04BB  045F               	iorwf	exp@x^(0+128),w
  3152  04BC  1D03               	skipz
  3153  04BD  2CC5               	goto	l3124
  3154  04BE  3000               	movlw	0
  3155  04BF  00DF               	movwf	?_exp^(0+128)
  3156  04C0  3080               	movlw	128
  3157  04C1  00E0               	movwf	(?_exp+1)^(0+128)
  3158  04C2  303F               	movlw	63
  3159  04C3  00E1               	movwf	(?_exp+2)^(0+128)
  3160  04C4  0008               	return
  3161  04C5                     l3124:	
  3162  04C5  3072               	movlw	114
  3163  04C6  00BE               	movwf	___ftge@ff1^(0+128)
  3164  04C7  3031               	movlw	49
  3165  04C8  00BF               	movwf	(___ftge@ff1+1)^(0+128)
  3166  04C9  3044               	movlw	68
  3167  04CA  00C0               	movwf	(___ftge@ff1+2)^(0+128)
  3168  04CB  085F               	movf	exp@x^(0+128),w
  3169  04CC  00C1               	movwf	___ftge@ff2^(0+128)
  3170  04CD  0860               	movf	(exp@x+1)^(0+128),w
  3171  04CE  00C2               	movwf	(___ftge@ff2+1)^(0+128)
  3172  04CF  0861               	movf	(exp@x+2)^(0+128),w
  3173  04D0  00C3               	movwf	(___ftge@ff2+2)^(0+128)
  3174  04D1  160A  118A  2740  120A  118A  	fcall	___ftge
  3175  04D6  1803               	btfsc	3,0
  3176  04D7  2CE7               	goto	l3134
  3177  04D8  3022               	movlw	34
  3178  04D9  1283               	bcf	3,5	;RP0=0, select bank0
  3179  04DA  1303               	bcf	3,6	;RP1=0, select bank0
  3180  04DB  00C9               	movwf	_errno
  3181  04DC  3000               	movlw	0
  3182  04DD  00CA               	movwf	_errno+1
  3183  04DE  30FF               	movlw	255
  3184  04DF  1683               	bsf	3,5	;RP0=1, select bank1
  3185  04E0  1303               	bcf	3,6	;RP1=0, select bank1
  3186  04E1  00DF               	movwf	?_exp^(0+128)
  3187  04E2  307F               	movlw	127
  3188  04E3  00E0               	movwf	(?_exp+1)^(0+128)
  3189  04E4  307F               	movlw	127
  3190  04E5  00E1               	movwf	(?_exp+2)^(0+128)
  3191  04E6  0008               	return
  3192  04E7                     l3134:	
  3193  04E7  1683               	bsf	3,5	;RP0=1, select bank1
  3194  04E8  1303               	bcf	3,6	;RP1=0, select bank1
  3195  04E9  085F               	movf	exp@x^(0+128),w
  3196  04EA  00BE               	movwf	___ftge@ff1^(0+128)
  3197  04EB  0860               	movf	(exp@x+1)^(0+128),w
  3198  04EC  00BF               	movwf	(___ftge@ff1+1)^(0+128)
  3199  04ED  0861               	movf	(exp@x+2)^(0+128),w
  3200  04EE  00C0               	movwf	(___ftge@ff1+2)^(0+128)
  3201  04EF  3049               	movlw	73
  3202  04F0  00C1               	movwf	___ftge@ff2^(0+128)
  3203  04F1  303A               	movlw	58
  3204  04F2  00C2               	movwf	(___ftge@ff2+1)^(0+128)
  3205  04F3  30C4               	movlw	196
  3206  04F4  00C3               	movwf	(___ftge@ff2+2)^(0+128)
  3207  04F5  160A  118A  2740  120A  118A  	fcall	___ftge
  3208  04FA  1803               	btfsc	3,0
  3209  04FB  2D0B               	goto	l3140
  3210  04FC  3022               	movlw	34
  3211  04FD  1283               	bcf	3,5	;RP0=0, select bank0
  3212  04FE  1303               	bcf	3,6	;RP1=0, select bank0
  3213  04FF  00C9               	movwf	_errno
  3214  0500  3000               	movlw	0
  3215  0501  00CA               	movwf	_errno+1
  3216  0502  3000               	movlw	0
  3217  0503  1683               	bsf	3,5	;RP0=1, select bank1
  3218  0504  1303               	bcf	3,6	;RP1=0, select bank1
  3219  0505  00DF               	movwf	?_exp^(0+128)
  3220  0506  3000               	movlw	0
  3221  0507  00E0               	movwf	(?_exp+1)^(0+128)
  3222  0508  3000               	movlw	0
  3223  0509  00E1               	movwf	(?_exp+2)^(0+128)
  3224  050A  0008               	return
  3225  050B                     l3140:	
  3226  050B  1683               	bsf	3,5	;RP0=1, select bank1
  3227  050C  1303               	bcf	3,6	;RP1=0, select bank1
  3228  050D  085F               	movf	exp@x^(0+128),w
  3229  050E  00BE               	movwf	___ftge@ff1^(0+128)
  3230  050F  0860               	movf	(exp@x+1)^(0+128),w
  3231  0510  00BF               	movwf	(___ftge@ff1+1)^(0+128)
  3232  0511  0861               	movf	(exp@x+2)^(0+128),w
  3233  0512  00C0               	movwf	(___ftge@ff1+2)^(0+128)
  3234  0513  3000               	movlw	0
  3235  0514  00C1               	movwf	___ftge@ff2^(0+128)
  3236  0515  3000               	movlw	0
  3237  0516  00C2               	movwf	(___ftge@ff2+1)^(0+128)
  3238  0517  3000               	movlw	0
  3239  0518  00C3               	movwf	(___ftge@ff2+2)^(0+128)
  3240  0519  160A  118A  2740  120A  118A  	fcall	___ftge
  3241  051E  1803               	btfsc	3,0
  3242  051F  2D22               	goto	u4340
  3243  0520  3001               	movlw	1
  3244  0521  2D23               	goto	u4350
  3245  0522                     u4340:	
  3246  0522  3000               	movlw	0
  3247  0523                     u4350:	
  3248  0523  1683               	bsf	3,5	;RP0=1, select bank1
  3249  0524  1303               	bcf	3,6	;RP1=0, select bank1
  3250  0525  00E2               	movwf	??_exp^(0+128)
  3251  0526  0862               	movf	??_exp^(0+128),w
  3252  0527  00EB               	movwf	exp@sign^(0+128)
  3253  0528  086B               	movf	exp@sign^(0+128),w
  3254  0529  1903               	btfsc	3,2
  3255  052A  2D3E               	goto	l3146
  3256  052B  085F               	movf	exp@x^(0+128),w
  3257  052C  00A0               	movwf	___ftneg@f1^(0+128)
  3258  052D  0860               	movf	(exp@x+1)^(0+128),w
  3259  052E  00A1               	movwf	(___ftneg@f1+1)^(0+128)
  3260  052F  0861               	movf	(exp@x+2)^(0+128),w
  3261  0530  00A2               	movwf	(___ftneg@f1+2)^(0+128)
  3262  0531  160A  118A  2439  120A  118A  	fcall	___ftneg
  3263  0536  1683               	bsf	3,5	;RP0=1, select bank1
  3264  0537  1303               	bcf	3,6	;RP1=0, select bank1
  3265  0538  0820               	movf	?___ftneg^(0+128),w
  3266  0539  00DF               	movwf	exp@x^(0+128)
  3267  053A  0821               	movf	(?___ftneg+1)^(0+128),w
  3268  053B  00E0               	movwf	(exp@x+1)^(0+128)
  3269  053C  0822               	movf	(?___ftneg+2)^(0+128),w
  3270  053D  00E1               	movwf	(exp@x+2)^(0+128)
  3271  053E                     l3146:	
  3272  053E  30AA               	movlw	170
  3273  053F  00AE               	movwf	___ftmul@f1^(0+128)
  3274  0540  30B8               	movlw	184
  3275  0541  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  3276  0542  303F               	movlw	63
  3277  0543  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  3278  0544  085F               	movf	exp@x^(0+128),w
  3279  0545  00B1               	movwf	___ftmul@f2^(0+128)
  3280  0546  0860               	movf	(exp@x+1)^(0+128),w
  3281  0547  00B2               	movwf	(___ftmul@f2+1)^(0+128)
  3282  0548  0861               	movf	(exp@x+2)^(0+128),w
  3283  0549  00B3               	movwf	(___ftmul@f2+2)^(0+128)
  3284  054A  120A  118A  2708  120A  118A  	fcall	___ftmul
  3285  054F  1683               	bsf	3,5	;RP0=1, select bank1
  3286  0550  1303               	bcf	3,6	;RP1=0, select bank1
  3287  0551  082E               	movf	?___ftmul^(0+128),w
  3288  0552  00DF               	movwf	exp@x^(0+128)
  3289  0553  082F               	movf	(?___ftmul+1)^(0+128),w
  3290  0554  00E0               	movwf	(exp@x+1)^(0+128)
  3291  0555  0830               	movf	(?___ftmul+2)^(0+128),w
  3292  0556  00E1               	movwf	(exp@x+2)^(0+128)
  3293  0557  085F               	movf	exp@x^(0+128),w
  3294  0558  00D4               	movwf	floor@x^(0+128)
  3295  0559  0860               	movf	(exp@x+1)^(0+128),w
  3296  055A  00D5               	movwf	(floor@x+1)^(0+128)
  3297  055B  0861               	movf	(exp@x+2)^(0+128),w
  3298  055C  00D6               	movwf	(floor@x+2)^(0+128)
  3299  055D  120A  158A  230E  120A  118A  	fcall	_floor
  3300  0562  1683               	bsf	3,5	;RP0=1, select bank1
  3301  0563  1303               	bcf	3,6	;RP1=0, select bank1
  3302  0564  0854               	movf	?_floor^(0+128),w
  3303  0565  00E3               	movwf	_exp$901^(0+128)
  3304  0566  0855               	movf	(?_floor+1)^(0+128),w
  3305  0567  00E4               	movwf	(_exp$901+1)^(0+128)
  3306  0568  0856               	movf	(?_floor+2)^(0+128),w
  3307  0569  00E5               	movwf	(_exp$901+2)^(0+128)
  3308  056A  0863               	movf	_exp$901^(0+128),w
  3309  056B  00BE               	movwf	___fttol@f1^(0+128)
  3310  056C  0864               	movf	(_exp$901+1)^(0+128),w
  3311  056D  00BF               	movwf	(___fttol@f1+1)^(0+128)
  3312  056E  0865               	movf	(_exp$901+2)^(0+128),w
  3313  056F  00C0               	movwf	(___fttol@f1+2)^(0+128)
  3314  0570  120A  158A  2280  120A  118A  	fcall	___fttol
  3315  0575  1683               	bsf	3,5	;RP0=1, select bank1
  3316  0576  1303               	bcf	3,6	;RP1=0, select bank1
  3317  0577  083F               	movf	(?___fttol^(0+128)+1),w
  3318  0578  00EA               	movwf	(exp@exponent+1)^(0+128)
  3319  0579  083E               	movf	?___fttol^(0+128),w
  3320  057A  00E9               	movwf	exp@exponent^(0+128)
  3321  057B  086A               	movf	(exp@exponent+1)^(0+128),w
  3322  057C  00A9               	movwf	(___awtoft@c+1)^(0+128)
  3323  057D  0869               	movf	exp@exponent^(0+128),w
  3324  057E  00A8               	movwf	___awtoft@c^(0+128)
  3325  057F  120A  118A  27DB  120A  118A  	fcall	___awtoft
  3326  0584  1683               	bsf	3,5	;RP0=1, select bank1
  3327  0585  1303               	bcf	3,6	;RP1=0, select bank1
  3328  0586  0828               	movf	?___awtoft^(0+128),w
  3329  0587  00CB               	movwf	___ftsub@f2^(0+128)
  3330  0588  0829               	movf	(?___awtoft+1)^(0+128),w
  3331  0589  00CC               	movwf	(___ftsub@f2+1)^(0+128)
  3332  058A  082A               	movf	(?___awtoft+2)^(0+128),w
  3333  058B  00CD               	movwf	(___ftsub@f2+2)^(0+128)
  3334  058C  085F               	movf	exp@x^(0+128),w
  3335  058D  00CE               	movwf	___ftsub@f1^(0+128)
  3336  058E  0860               	movf	(exp@x+1)^(0+128),w
  3337  058F  00CF               	movwf	(___ftsub@f1+1)^(0+128)
  3338  0590  0861               	movf	(exp@x+2)^(0+128),w
  3339  0591  00D0               	movwf	(___ftsub@f1+2)^(0+128)
  3340  0592  160A  118A  24BE  120A  118A  	fcall	___ftsub
  3341  0597  1683               	bsf	3,5	;RP0=1, select bank1
  3342  0598  1303               	bcf	3,6	;RP1=0, select bank1
  3343  0599  084B               	movf	?___ftsub^(0+128),w
  3344  059A  00DF               	movwf	exp@x^(0+128)
  3345  059B  084C               	movf	(?___ftsub+1)^(0+128),w
  3346  059C  00E0               	movwf	(exp@x+1)^(0+128)
  3347  059D  084D               	movf	(?___ftsub+2)^(0+128),w
  3348  059E  00E1               	movwf	(exp@x+2)^(0+128)
  3349  059F  085F               	movf	exp@x^(0+128),w
  3350  05A0  00CB               	movwf	eval_poly@x^(0+128)
  3351  05A1  0860               	movf	(exp@x+1)^(0+128),w
  3352  05A2  00CC               	movwf	(eval_poly@x+1)^(0+128)
  3353  05A3  0861               	movf	(exp@x+2)^(0+128),w
  3354  05A4  00CD               	movwf	(eval_poly@x+2)^(0+128)
  3355  05A5  3001               	movlw	(low ((exp@coeff-__stringbase)| (0+32768)))& (0+255)
  3356  05A6  00E2               	movwf	??_exp^(0+128)
  3357  05A7  0862               	movf	??_exp^(0+128),w
  3358  05A8  00CE               	movwf	eval_poly@d^(0+128)
  3359  05A9  3009               	movlw	9
  3360  05AA  00CF               	movwf	eval_poly@n^(0+128)
  3361  05AB  3000               	movlw	0
  3362  05AC  00D0               	movwf	(eval_poly@n^(0+128)+1)
  3363  05AD  120A  158A  2179  120A  118A  	fcall	_eval_poly
  3364  05B2  1683               	bsf	3,5	;RP0=1, select bank1
  3365  05B3  1303               	bcf	3,6	;RP1=0, select bank1
  3366  05B4  084B               	movf	?_eval_poly^(0+128),w
  3367  05B5  00D5               	movwf	ldexp@value^(0+128)
  3368  05B6  084C               	movf	(?_eval_poly+1)^(0+128),w
  3369  05B7  00D6               	movwf	(ldexp@value+1)^(0+128)
  3370  05B8  084D               	movf	(?_eval_poly+2)^(0+128),w
  3371  05B9  00D7               	movwf	(ldexp@value+2)^(0+128)
  3372  05BA  086A               	movf	(exp@exponent+1)^(0+128),w
  3373  05BB  00D9               	movwf	(ldexp@newexp+1)^(0+128)
  3374  05BC  0869               	movf	exp@exponent^(0+128),w
  3375  05BD  00D8               	movwf	ldexp@newexp^(0+128)
  3376  05BE  120A  158A  23A7  120A  118A  	fcall	_ldexp
  3377  05C3  1683               	bsf	3,5	;RP0=1, select bank1
  3378  05C4  1303               	bcf	3,6	;RP1=0, select bank1
  3379  05C5  0855               	movf	?_ldexp^(0+128),w
  3380  05C6  00DF               	movwf	exp@x^(0+128)
  3381  05C7  0856               	movf	(?_ldexp+1)^(0+128),w
  3382  05C8  00E0               	movwf	(exp@x+1)^(0+128)
  3383  05C9  0857               	movf	(?_ldexp+2)^(0+128),w
  3384  05CA  00E1               	movwf	(exp@x+2)^(0+128)
  3385  05CB  086B               	movf	exp@sign^(0+128),w
  3386  05CC  1903               	btfsc	3,2
  3387  05CD  0008               	return
  3388  05CE  30FF               	movlw	255
  3389  05CF  00E6               	movwf	_exp$667^(0+128)
  3390  05D0  307F               	movlw	127
  3391  05D1  00E7               	movwf	(_exp$667+1)^(0+128)
  3392  05D2  307F               	movlw	127
  3393  05D3  00E8               	movwf	(_exp$667+2)^(0+128)
  3394  05D4  0861               	movf	(exp@x+2)^(0+128),w
  3395  05D5  0668               	xorwf	(_exp$667+2)^(0+128),w
  3396  05D6  1D03               	skipz
  3397  05D7  2DDE               	goto	u4385
  3398  05D8  0860               	movf	(exp@x+1)^(0+128),w
  3399  05D9  0667               	xorwf	(_exp$667+1)^(0+128),w
  3400  05DA  1D03               	skipz
  3401  05DB  2DDE               	goto	u4385
  3402  05DC  085F               	movf	exp@x^(0+128),w
  3403  05DD  0666               	xorwf	_exp$667^(0+128),w
  3404  05DE                     u4385:	
  3405  05DE  1D03               	skipz
  3406  05DF  2DE7               	goto	l3168
  3407  05E0  3000               	movlw	0
  3408  05E1  00DF               	movwf	?_exp^(0+128)
  3409  05E2  3000               	movlw	0
  3410  05E3  00E0               	movwf	(?_exp+1)^(0+128)
  3411  05E4  3000               	movlw	0
  3412  05E5  00E1               	movwf	(?_exp+2)^(0+128)
  3413  05E6  0008               	return
  3414  05E7                     l3168:	
  3415  05E7  085F               	movf	exp@x^(0+128),w
  3416  05E8  00BE               	movwf	___ftdiv@f2^(0+128)
  3417  05E9  0860               	movf	(exp@x+1)^(0+128),w
  3418  05EA  00BF               	movwf	(___ftdiv@f2+1)^(0+128)
  3419  05EB  0861               	movf	(exp@x+2)^(0+128),w
  3420  05EC  00C0               	movwf	(___ftdiv@f2+2)^(0+128)
  3421  05ED  3000               	movlw	0
  3422  05EE  00C1               	movwf	___ftdiv@f1^(0+128)
  3423  05EF  3080               	movlw	128
  3424  05F0  00C2               	movwf	(___ftdiv@f1+1)^(0+128)
  3425  05F1  303F               	movlw	63
  3426  05F2  00C3               	movwf	(___ftdiv@f1+2)^(0+128)
  3427  05F3  120A  158A  25AA   	fcall	___ftdiv
  3428  05F6  1683               	bsf	3,5	;RP0=1, select bank1
  3429  05F7  1303               	bcf	3,6	;RP1=0, select bank1
  3430  05F8  083E               	movf	?___ftdiv^(0+128),w
  3431  05F9  00DF               	movwf	?_exp^(0+128)
  3432  05FA  083F               	movf	(?___ftdiv+1)^(0+128),w
  3433  05FB  00E0               	movwf	(?_exp+1)^(0+128)
  3434  05FC  0840               	movf	(?___ftdiv+2)^(0+128),w
  3435  05FD  00E1               	movwf	(?_exp+2)^(0+128)
  3436  05FE  0008               	return
  3437  05FF                     __end_of_exp:	
  3438                           
  3439                           	psect	text8
  3440  0BA7                     __ptext8:	
  3441 ;; *************** function _ldexp *****************
  3442 ;; Defined at:
  3443 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\frexp.c"
  3444 ;; Parameters:    Size  Location     Type
  3445 ;;  value           3   53[BANK1 ] unsigned char 
  3446 ;;  newexp          2   56[BANK1 ] int 
  3447 ;; Auto vars:     Size  Location     Type
  3448 ;;		None
  3449 ;; Return value:  Size  Location     Type
  3450 ;;                  3   53[BANK1 ] int 
  3451 ;; Registers used:
  3452 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3453 ;; Tracked objects:
  3454 ;;		On entry : 0/0
  3455 ;;		On exit  : 0/0
  3456 ;;		Unchanged: 0/0
  3457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3458 ;;      Params:         0       0       5       0       0
  3459 ;;      Locals:         0       0       3       0       0
  3460 ;;      Temps:          0       0       2       0       0
  3461 ;;      Totals:         0       0      10       0       0
  3462 ;;Total ram usage:       10 bytes
  3463 ;; Hardware stack levels used:    1
  3464 ;; Hardware stack levels required when called:    4
  3465 ;; This function calls:
  3466 ;;		___ftge
  3467 ;;		___ftneg
  3468 ;; This function is called by:
  3469 ;;		_exp
  3470 ;; This function uses a non-reentrant model
  3471 ;;
  3472                           
  3473                           
  3474                           ;psect for function _ldexp
  3475  0BA7                     _ldexp:	
  3476                           
  3477                           ;incstack = 0
  3478 ;; hardware stack exceeded
  3479                           ; Regs used in _ldexp: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3480  0BA7  1683               	bsf	3,5	;RP0=1, select bank1
  3481  0BA8  1303               	bcf	3,6	;RP1=0, select bank1
  3482  0BA9  0857               	movf	(ldexp@value+2)^(0+128),w
  3483  0BAA  0456               	iorwf	(ldexp@value+1)^(0+128),w
  3484  0BAB  0455               	iorwf	ldexp@value^(0+128),w
  3485  0BAC  1D03               	skipz
  3486  0BAD  2BB5               	goto	l3046
  3487  0BAE  3000               	movlw	0
  3488  0BAF  00D5               	movwf	?_ldexp^(0+128)
  3489  0BB0  3000               	movlw	0
  3490  0BB1  00D6               	movwf	(?_ldexp+1)^(0+128)
  3491  0BB2  3000               	movlw	0
  3492  0BB3  00D7               	movwf	(?_ldexp+2)^(0+128)
  3493  0BB4  0008               	return
  3494  0BB5                     l3046:	
  3495  0BB5  0857               	movf	(ldexp@value^(0+128)+2),w
  3496  0BB6  397F               	andlw	127
  3497  0BB7  00DA               	movwf	??_ldexp^(0+128)
  3498  0BB8  01DB               	clrf	(??_ldexp^(0+128)+1)
  3499  0BB9  1003               	clrc
  3500  0BBA  0DDA               	rlf	??_ldexp^(0+128),f
  3501  0BBB  0DDB               	rlf	(??_ldexp^(0+128)+1),f
  3502  0BBC  085A               	movf	??_ldexp^(0+128),w
  3503  0BBD  07D8               	addwf	ldexp@newexp^(0+128),f
  3504  0BBE  1803               	skipnc
  3505  0BBF  0AD9               	incf	(ldexp@newexp+1)^(0+128),f
  3506  0BC0  085B               	movf	(??_ldexp+1)^(0+128),w
  3507  0BC1  07D9               	addwf	(ldexp@newexp+1)^(0+128),f
  3508  0BC2  0D56               	rlf	(ldexp@value^(0+128)+1),w
  3509  0BC3  0D56               	rlf	(ldexp@value^(0+128)+1),w
  3510  0BC4  3901               	andlw	1
  3511  0BC5  00DA               	movwf	??_ldexp^(0+128)
  3512  0BC6  01DB               	clrf	(??_ldexp^(0+128)+1)
  3513  0BC7  085A               	movf	??_ldexp^(0+128),w
  3514  0BC8  07D8               	addwf	ldexp@newexp^(0+128),f
  3515  0BC9  1803               	skipnc
  3516  0BCA  0AD9               	incf	(ldexp@newexp+1)^(0+128),f
  3517  0BCB  085B               	movf	(??_ldexp+1)^(0+128),w
  3518  0BCC  07D9               	addwf	(ldexp@newexp+1)^(0+128),f
  3519  0BCD  1FD9               	btfss	(ldexp@newexp+1)^(0+128),7
  3520  0BCE  2BDE               	goto	l3056
  3521  0BCF  3022               	movlw	34
  3522  0BD0  1283               	bcf	3,5	;RP0=0, select bank0
  3523  0BD1  1303               	bcf	3,6	;RP1=0, select bank0
  3524  0BD2  00C9               	movwf	_errno
  3525  0BD3  3000               	movlw	0
  3526  0BD4  00CA               	movwf	_errno+1
  3527  0BD5  3000               	movlw	0
  3528  0BD6  1683               	bsf	3,5	;RP0=1, select bank1
  3529  0BD7  1303               	bcf	3,6	;RP1=0, select bank1
  3530  0BD8  00D5               	movwf	?_ldexp^(0+128)
  3531  0BD9  3000               	movlw	0
  3532  0BDA  00D6               	movwf	(?_ldexp+1)^(0+128)
  3533  0BDB  3000               	movlw	0
  3534  0BDC  00D7               	movwf	(?_ldexp+2)^(0+128)
  3535  0BDD  0008               	return
  3536  0BDE                     l3056:	
  3537  0BDE  0859               	movf	(ldexp@newexp+1)^(0+128),w
  3538  0BDF  3A80               	xorlw	128
  3539  0BE0  00FF               	movwf	127
  3540  0BE1  3081               	movlw	129
  3541  0BE2  027F               	subwf	127,w
  3542  0BE3  1D03               	skipz
  3543  0BE4  2BE7               	goto	u4255
  3544  0BE5  3000               	movlw	0
  3545  0BE6  0258               	subwf	ldexp@newexp^(0+128),w
  3546  0BE7                     u4255:	
  3547  0BE7  1C03               	skipc
  3548  0BE8  2C27               	goto	l3080
  3549  0BE9  3022               	movlw	34
  3550  0BEA  1283               	bcf	3,5	;RP0=0, select bank0
  3551  0BEB  1303               	bcf	3,6	;RP1=0, select bank0
  3552  0BEC  00C9               	movwf	_errno
  3553  0BED  3000               	movlw	0
  3554  0BEE  00CA               	movwf	_errno+1
  3555  0BEF  1683               	bsf	3,5	;RP0=1, select bank1
  3556  0BF0  1303               	bcf	3,6	;RP1=0, select bank1
  3557  0BF1  0855               	movf	ldexp@value^(0+128),w
  3558  0BF2  00BE               	movwf	___ftge@ff1^(0+128)
  3559  0BF3  0856               	movf	(ldexp@value+1)^(0+128),w
  3560  0BF4  00BF               	movwf	(___ftge@ff1+1)^(0+128)
  3561  0BF5  0857               	movf	(ldexp@value+2)^(0+128),w
  3562  0BF6  00C0               	movwf	(___ftge@ff1+2)^(0+128)
  3563  0BF7  3000               	movlw	0
  3564  0BF8  00C1               	movwf	___ftge@ff2^(0+128)
  3565  0BF9  3000               	movlw	0
  3566  0BFA  00C2               	movwf	(___ftge@ff2+1)^(0+128)
  3567  0BFB  3000               	movlw	0
  3568  0BFC  00C3               	movwf	(___ftge@ff2+2)^(0+128)
  3569  0BFD  160A  118A  2740  120A  158A  	fcall	___ftge
  3570  0C02  1803               	btfsc	3,0
  3571  0C03  2C1E               	goto	l3076
  3572  0C04  30FF               	movlw	255
  3573  0C05  1683               	bsf	3,5	;RP0=1, select bank1
  3574  0C06  1303               	bcf	3,6	;RP1=0, select bank1
  3575  0C07  00DC               	movwf	_ldexp$704^(0+128)
  3576  0C08  307F               	movlw	127
  3577  0C09  00DD               	movwf	(_ldexp$704+1)^(0+128)
  3578  0C0A  307F               	movlw	127
  3579  0C0B  00DE               	movwf	(_ldexp$704+2)^(0+128)
  3580  0C0C  085C               	movf	_ldexp$704^(0+128),w
  3581  0C0D  00A0               	movwf	___ftneg@f1^(0+128)
  3582  0C0E  085D               	movf	(_ldexp$704+1)^(0+128),w
  3583  0C0F  00A1               	movwf	(___ftneg@f1+1)^(0+128)
  3584  0C10  085E               	movf	(_ldexp$704+2)^(0+128),w
  3585  0C11  00A2               	movwf	(___ftneg@f1+2)^(0+128)
  3586  0C12  160A  118A  2439   	fcall	___ftneg
  3587  0C15  1683               	bsf	3,5	;RP0=1, select bank1
  3588  0C16  1303               	bcf	3,6	;RP1=0, select bank1
  3589  0C17  0820               	movf	?___ftneg^(0+128),w
  3590  0C18  00D5               	movwf	?_ldexp^(0+128)
  3591  0C19  0821               	movf	(?___ftneg+1)^(0+128),w
  3592  0C1A  00D6               	movwf	(?_ldexp+1)^(0+128)
  3593  0C1B  0822               	movf	(?___ftneg+2)^(0+128),w
  3594  0C1C  00D7               	movwf	(?_ldexp+2)^(0+128)
  3595  0C1D  0008               	return
  3596  0C1E                     l3076:	
  3597  0C1E  30FF               	movlw	255
  3598  0C1F  1683               	bsf	3,5	;RP0=1, select bank1
  3599  0C20  1303               	bcf	3,6	;RP1=0, select bank1
  3600  0C21  00D5               	movwf	?_ldexp^(0+128)
  3601  0C22  307F               	movlw	127
  3602  0C23  00D6               	movwf	(?_ldexp+1)^(0+128)
  3603  0C24  307F               	movlw	127
  3604  0C25  00D7               	movwf	(?_ldexp+2)^(0+128)
  3605  0C26  0008               	return
  3606  0C27                     l3080:	
  3607  0C27  1683               	bsf	3,5	;RP0=1, select bank1
  3608  0C28  1303               	bcf	3,6	;RP1=0, select bank1
  3609  0C29  0859               	movf	(ldexp@newexp+1)^(0+128),w
  3610  0C2A  00DB               	movwf	(??_ldexp^(0+128)+1)
  3611  0C2B  0858               	movf	ldexp@newexp^(0+128),w
  3612  0C2C  00DA               	movwf	??_ldexp^(0+128)
  3613  0C2D  0D5B               	rlf	(??_ldexp^(0+128)+1),w
  3614  0C2E  0CDB               	rrf	(??_ldexp^(0+128)+1),f
  3615  0C2F  0CDA               	rrf	??_ldexp^(0+128),f
  3616  0C30  0857               	movf	(ldexp@value^(0+128)+2),w
  3617  0C31  065A               	xorwf	??_ldexp^(0+128),w
  3618  0C32  3980               	andlw	-128
  3619  0C33  065A               	xorwf	??_ldexp^(0+128),w
  3620  0C34  00D7               	movwf	(ldexp@value^(0+128)+2)
  3621  0C35  0858               	movf	ldexp@newexp^(0+128),w
  3622  0C36  3901               	andlw	1
  3623  0C37  00DA               	movwf	??_ldexp^(0+128)
  3624  0C38  0CDA               	rrf	??_ldexp^(0+128),f
  3625  0C39  0CDA               	rrf	??_ldexp^(0+128),f
  3626  0C3A  0856               	movf	(ldexp@value^(0+128)+1),w
  3627  0C3B  065A               	xorwf	??_ldexp^(0+128),w
  3628  0C3C  397F               	andlw	-129
  3629  0C3D  065A               	xorwf	??_ldexp^(0+128),w
  3630  0C3E  00D6               	movwf	(ldexp@value^(0+128)+1)
  3631  0C3F  0008               	return
  3632  0C40                     __end_of_ldexp:	
  3633                           
  3634                           	psect	text9
  3635  1439                     __ptext9:	
  3636 ;; *************** function ___ftneg *****************
  3637 ;; Defined at:
  3638 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftneg.c"
  3639 ;; Parameters:    Size  Location     Type
  3640 ;;  f1              3    0[BANK1 ] float 
  3641 ;; Auto vars:     Size  Location     Type
  3642 ;;		None
  3643 ;; Return value:  Size  Location     Type
  3644 ;;                  3    0[BANK1 ] float 
  3645 ;; Registers used:
  3646 ;;		wreg
  3647 ;; Tracked objects:
  3648 ;;		On entry : 0/0
  3649 ;;		On exit  : 0/0
  3650 ;;		Unchanged: 0/0
  3651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3652 ;;      Params:         0       0       3       0       0
  3653 ;;      Locals:         0       0       0       0       0
  3654 ;;      Temps:          0       0       0       0       0
  3655 ;;      Totals:         0       0       3       0       0
  3656 ;;Total ram usage:        3 bytes
  3657 ;; Hardware stack levels used:    1
  3658 ;; Hardware stack levels required when called:    3
  3659 ;; This function calls:
  3660 ;;		Nothing
  3661 ;; This function is called by:
  3662 ;;		_pow
  3663 ;;		_exp
  3664 ;;		_ldexp
  3665 ;; This function uses a non-reentrant model
  3666 ;;
  3667                           
  3668                           
  3669                           ;psect for function ___ftneg
  3670  1439                     ___ftneg:	
  3671                           
  3672                           ;incstack = 0
  3673 ;; hardware stack exceeded
  3674                           ; Regs used in ___ftneg: [wreg]
  3675  1439  1683               	bsf	3,5	;RP0=1, select bank1
  3676  143A  1303               	bcf	3,6	;RP1=0, select bank1
  3677  143B  0822               	movf	(___ftneg@f1+2)^(0+128),w
  3678  143C  0421               	iorwf	(___ftneg@f1+1)^(0+128),w
  3679  143D  0420               	iorwf	___ftneg@f1^(0+128),w
  3680  143E  1903               	skipnz
  3681  143F  0008               	return
  3682  1440  3080               	movlw	128
  3683  1441  06A2               	xorwf	(___ftneg@f1+2)^(0+128),f
  3684  1442  0008               	return
  3685  1443                     __end_of___ftneg:	
  3686                           
  3687                           	psect	text10
  3688  0B0E                     __ptext10:	
  3689 ;; *************** function _floor *****************
  3690 ;; Defined at:
  3691 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\floor.c"
  3692 ;; Parameters:    Size  Location     Type
  3693 ;;  x               3   52[BANK1 ] float 
  3694 ;; Auto vars:     Size  Location     Type
  3695 ;;  i               3   56[BANK1 ] float 
  3696 ;;  expon           2   59[BANK1 ] int 
  3697 ;; Return value:  Size  Location     Type
  3698 ;;                  3   52[BANK1 ] int 
  3699 ;; Registers used:
  3700 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3701 ;; Tracked objects:
  3702 ;;		On entry : 0/0
  3703 ;;		On exit  : 0/0
  3704 ;;		Unchanged: 0/0
  3705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3706 ;;      Params:         0       0       3       0       0
  3707 ;;      Locals:         0       0       5       0       0
  3708 ;;      Temps:          0       0       1       0       0
  3709 ;;      Totals:         0       0       9       0       0
  3710 ;;Total ram usage:        9 bytes
  3711 ;; Hardware stack levels used:    1
  3712 ;; Hardware stack levels required when called:    5
  3713 ;; This function calls:
  3714 ;;		___altoft
  3715 ;;		___ftadd
  3716 ;;		___ftge
  3717 ;;		___fttol
  3718 ;;		_frexp
  3719 ;; This function is called by:
  3720 ;;		_exp
  3721 ;; This function uses a non-reentrant model
  3722 ;;
  3723                           
  3724                           
  3725                           ;psect for function _floor
  3726  0B0E                     _floor:	
  3727                           
  3728                           ;incstack = 0
  3729 ;; hardware stack exceeded
  3730                           ; Regs used in _floor: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3731  0B0E  1683               	bsf	3,5	;RP0=1, select bank1
  3732  0B0F  1303               	bcf	3,6	;RP1=0, select bank1
  3733  0B10  0854               	movf	floor@x^(0+128),w
  3734  0B11  00A0               	movwf	frexp@value^(0+128)
  3735  0B12  0855               	movf	(floor@x+1)^(0+128),w
  3736  0B13  00A1               	movwf	(frexp@value+1)^(0+128)
  3737  0B14  0856               	movf	(floor@x+2)^(0+128),w
  3738  0B15  00A2               	movwf	(frexp@value+2)^(0+128)
  3739  0B16  30DB               	movlw	(low (floor@expon| 0))& (0+255)
  3740  0B17  00D7               	movwf	??_floor^(0+128)
  3741  0B18  0857               	movf	??_floor^(0+128),w
  3742  0B19  00A3               	movwf	frexp@eptr^(0+128)
  3743  0B1A  160A  118A  2575  120A  158A  	fcall	_frexp
  3744  0B1F  1683               	bsf	3,5	;RP0=1, select bank1
  3745  0B20  1303               	bcf	3,6	;RP1=0, select bank1
  3746  0B21  1FDC               	btfss	(floor@expon+1)^(0+128),7
  3747  0B22  2B48               	goto	l3016
  3748  0B23  0854               	movf	floor@x^(0+128),w
  3749  0B24  00BE               	movwf	___ftge@ff1^(0+128)
  3750  0B25  0855               	movf	(floor@x+1)^(0+128),w
  3751  0B26  00BF               	movwf	(___ftge@ff1+1)^(0+128)
  3752  0B27  0856               	movf	(floor@x+2)^(0+128),w
  3753  0B28  00C0               	movwf	(___ftge@ff1+2)^(0+128)
  3754  0B29  3000               	movlw	0
  3755  0B2A  00C1               	movwf	___ftge@ff2^(0+128)
  3756  0B2B  3000               	movlw	0
  3757  0B2C  00C2               	movwf	(___ftge@ff2+1)^(0+128)
  3758  0B2D  3000               	movlw	0
  3759  0B2E  00C3               	movwf	(___ftge@ff2+2)^(0+128)
  3760  0B2F  160A  118A  2740  120A  158A  	fcall	___ftge
  3761  0B34  1803               	btfsc	3,0
  3762  0B35  2B3F               	goto	l3012
  3763  0B36  3000               	movlw	0
  3764  0B37  1683               	bsf	3,5	;RP0=1, select bank1
  3765  0B38  1303               	bcf	3,6	;RP1=0, select bank1
  3766  0B39  00D4               	movwf	?_floor^(0+128)
  3767  0B3A  3080               	movlw	128
  3768  0B3B  00D5               	movwf	(?_floor+1)^(0+128)
  3769  0B3C  30BF               	movlw	191
  3770  0B3D  00D6               	movwf	(?_floor+2)^(0+128)
  3771  0B3E  0008               	return
  3772  0B3F                     l3012:	
  3773  0B3F  3000               	movlw	0
  3774  0B40  1683               	bsf	3,5	;RP0=1, select bank1
  3775  0B41  1303               	bcf	3,6	;RP1=0, select bank1
  3776  0B42  00D4               	movwf	?_floor^(0+128)
  3777  0B43  3000               	movlw	0
  3778  0B44  00D5               	movwf	(?_floor+1)^(0+128)
  3779  0B45  3000               	movlw	0
  3780  0B46  00D6               	movwf	(?_floor+2)^(0+128)
  3781  0B47  0008               	return
  3782  0B48                     l3016:	
  3783  0B48  3000               	movlw	0
  3784  0B49  025C               	subwf	(floor@expon+1)^(0+128),w
  3785  0B4A  3015               	movlw	21
  3786  0B4B  1903               	skipnz
  3787  0B4C  025B               	subwf	floor@expon^(0+128),w
  3788  0B4D  1803               	btfsc	3,0
  3789  0B4E  0008               	return
  3790  0B4F  0854               	movf	floor@x^(0+128),w
  3791  0B50  00BE               	movwf	___fttol@f1^(0+128)
  3792  0B51  0855               	movf	(floor@x+1)^(0+128),w
  3793  0B52  00BF               	movwf	(___fttol@f1+1)^(0+128)
  3794  0B53  0856               	movf	(floor@x+2)^(0+128),w
  3795  0B54  00C0               	movwf	(___fttol@f1+2)^(0+128)
  3796  0B55  120A  158A  2280  120A  158A  	fcall	___fttol
  3797  0B5A  1683               	bsf	3,5	;RP0=1, select bank1
  3798  0B5B  1303               	bcf	3,6	;RP1=0, select bank1
  3799  0B5C  0841               	movf	(?___fttol+3)^(0+128),w
  3800  0B5D  00CF               	movwf	(___altoft@c+3)^(0+128)
  3801  0B5E  0840               	movf	(?___fttol+2)^(0+128),w
  3802  0B5F  00CE               	movwf	(___altoft@c+2)^(0+128)
  3803  0B60  083F               	movf	(?___fttol+1)^(0+128),w
  3804  0B61  00CD               	movwf	(___altoft@c+1)^(0+128)
  3805  0B62  083E               	movf	?___fttol^(0+128),w
  3806  0B63  00CC               	movwf	___altoft@c^(0+128)
  3807  0B64  160A  118A  2533  120A  158A  	fcall	___altoft
  3808  0B69  1683               	bsf	3,5	;RP0=1, select bank1
  3809  0B6A  1303               	bcf	3,6	;RP1=0, select bank1
  3810  0B6B  084C               	movf	?___altoft^(0+128),w
  3811  0B6C  00D8               	movwf	floor@i^(0+128)
  3812  0B6D  084D               	movf	(?___altoft+1)^(0+128),w
  3813  0B6E  00D9               	movwf	(floor@i+1)^(0+128)
  3814  0B6F  084E               	movf	(?___altoft+2)^(0+128),w
  3815  0B70  00DA               	movwf	(floor@i+2)^(0+128)
  3816  0B71  0854               	movf	floor@x^(0+128),w
  3817  0B72  00BE               	movwf	___ftge@ff1^(0+128)
  3818  0B73  0855               	movf	(floor@x+1)^(0+128),w
  3819  0B74  00BF               	movwf	(___ftge@ff1+1)^(0+128)
  3820  0B75  0856               	movf	(floor@x+2)^(0+128),w
  3821  0B76  00C0               	movwf	(___ftge@ff1+2)^(0+128)
  3822  0B77  0858               	movf	floor@i^(0+128),w
  3823  0B78  00C1               	movwf	___ftge@ff2^(0+128)
  3824  0B79  0859               	movf	(floor@i+1)^(0+128),w
  3825  0B7A  00C2               	movwf	(___ftge@ff2+1)^(0+128)
  3826  0B7B  085A               	movf	(floor@i+2)^(0+128),w
  3827  0B7C  00C3               	movwf	(___ftge@ff2+2)^(0+128)
  3828  0B7D  160A  118A  2740  120A  158A  	fcall	___ftge
  3829  0B82  1803               	btfsc	3,0
  3830  0B83  2B9E               	goto	l3026
  3831  0B84  3000               	movlw	0
  3832  0B85  1683               	bsf	3,5	;RP0=1, select bank1
  3833  0B86  1303               	bcf	3,6	;RP1=0, select bank1
  3834  0B87  00BE               	movwf	___ftadd@f1^(0+128)
  3835  0B88  3080               	movlw	128
  3836  0B89  00BF               	movwf	(___ftadd@f1+1)^(0+128)
  3837  0B8A  30BF               	movlw	191
  3838  0B8B  00C0               	movwf	(___ftadd@f1+2)^(0+128)
  3839  0B8C  0858               	movf	floor@i^(0+128),w
  3840  0B8D  00C1               	movwf	___ftadd@f2^(0+128)
  3841  0B8E  0859               	movf	(floor@i+1)^(0+128),w
  3842  0B8F  00C2               	movwf	(___ftadd@f2+1)^(0+128)
  3843  0B90  085A               	movf	(floor@i+2)^(0+128),w
  3844  0B91  00C3               	movwf	(___ftadd@f2+2)^(0+128)
  3845  0B92  120A  118A  25FF   	fcall	___ftadd
  3846  0B95  1683               	bsf	3,5	;RP0=1, select bank1
  3847  0B96  1303               	bcf	3,6	;RP1=0, select bank1
  3848  0B97  083E               	movf	?___ftadd^(0+128),w
  3849  0B98  00D4               	movwf	?_floor^(0+128)
  3850  0B99  083F               	movf	(?___ftadd+1)^(0+128),w
  3851  0B9A  00D5               	movwf	(?_floor+1)^(0+128)
  3852  0B9B  0840               	movf	(?___ftadd+2)^(0+128),w
  3853  0B9C  00D6               	movwf	(?_floor+2)^(0+128)
  3854  0B9D  0008               	return
  3855  0B9E                     l3026:	
  3856  0B9E  1683               	bsf	3,5	;RP0=1, select bank1
  3857  0B9F  1303               	bcf	3,6	;RP1=0, select bank1
  3858  0BA0  0858               	movf	floor@i^(0+128),w
  3859  0BA1  00D4               	movwf	?_floor^(0+128)
  3860  0BA2  0859               	movf	(floor@i+1)^(0+128),w
  3861  0BA3  00D5               	movwf	(?_floor+1)^(0+128)
  3862  0BA4  085A               	movf	(floor@i+2)^(0+128),w
  3863  0BA5  00D6               	movwf	(?_floor+2)^(0+128)
  3864  0BA6  0008               	return
  3865  0BA7                     __end_of_floor:	
  3866                           
  3867                           	psect	text11
  3868  1575                     __ptext11:	
  3869 ;; *************** function _frexp *****************
  3870 ;; Defined at:
  3871 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\frexp.c"
  3872 ;; Parameters:    Size  Location     Type
  3873 ;;  value           3    0[BANK1 ] int 
  3874 ;;  eptr            1    3[BANK1 ] PTR int 
  3875 ;;		 -> log@exponent(2), floor@expon(2), 
  3876 ;; Auto vars:     Size  Location     Type
  3877 ;;		None
  3878 ;; Return value:  Size  Location     Type
  3879 ;;                  3    0[BANK1 ] PTR int 
  3880 ;; Registers used:
  3881 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  3882 ;; Tracked objects:
  3883 ;;		On entry : 0/0
  3884 ;;		On exit  : 0/0
  3885 ;;		Unchanged: 0/0
  3886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3887 ;;      Params:         0       0       4       0       0
  3888 ;;      Locals:         0       0       0       0       0
  3889 ;;      Temps:          0       0       2       0       0
  3890 ;;      Totals:         0       0       6       0       0
  3891 ;;Total ram usage:        6 bytes
  3892 ;; Hardware stack levels used:    1
  3893 ;; Hardware stack levels required when called:    3
  3894 ;; This function calls:
  3895 ;;		Nothing
  3896 ;; This function is called by:
  3897 ;;		_floor
  3898 ;;		_log
  3899 ;; This function uses a non-reentrant model
  3900 ;;
  3901                           
  3902                           
  3903                           ;psect for function _frexp
  3904  1575                     _frexp:	
  3905                           
  3906                           ;incstack = 0
  3907                           ; Regs used in _frexp: [wreg-fsr0h+status,2+status,0+btemp+1]
  3908  1575  1683               	bsf	3,5	;RP0=1, select bank1
  3909  1576  1303               	bcf	3,6	;RP1=0, select bank1
  3910  1577  0822               	movf	(frexp@value+2)^(0+128),w
  3911  1578  0421               	iorwf	(frexp@value+1)^(0+128),w
  3912  1579  0420               	iorwf	frexp@value^(0+128),w
  3913  157A  1D03               	skipz
  3914  157B  2D89               	goto	l2928
  3915  157C  0823               	movf	frexp@eptr^(0+128),w
  3916  157D  0084               	movwf	4
  3917  157E  1383               	bcf	3,7	;select IRP bank0
  3918  157F  0180               	clrf	0
  3919  1580  0A84               	incf	4,f
  3920  1581  0180               	clrf	0
  3921  1582  3000               	movlw	0
  3922  1583  00A0               	movwf	?_frexp^(0+128)
  3923  1584  3000               	movlw	0
  3924  1585  00A1               	movwf	(?_frexp+1)^(0+128)
  3925  1586  3000               	movlw	0
  3926  1587  00A2               	movwf	(?_frexp+2)^(0+128)
  3927  1588  0008               	return
  3928  1589                     l2928:	
  3929  1589  0822               	movf	(frexp@value^(0+128)+2),w
  3930  158A  397F               	andlw	127
  3931  158B  00A4               	movwf	??_frexp^(0+128)
  3932  158C  01A5               	clrf	(??_frexp^(0+128)+1)
  3933  158D  1003               	clrc
  3934  158E  0DA4               	rlf	??_frexp^(0+128),f
  3935  158F  0DA5               	rlf	(??_frexp^(0+128)+1),f
  3936  1590  0823               	movf	frexp@eptr^(0+128),w
  3937  1591  0084               	movwf	4
  3938  1592  0824               	movf	??_frexp^(0+128),w
  3939  1593  1383               	bcf	3,7	;select IRP bank0
  3940  1594  0080               	movwf	0
  3941  1595  0A84               	incf	4,f
  3942  1596  0825               	movf	(??_frexp+1)^(0+128),w
  3943  1597  0080               	movwf	0
  3944  1598  0D21               	rlf	(frexp@value^(0+128)+1),w
  3945  1599  0D21               	rlf	(frexp@value^(0+128)+1),w
  3946  159A  3901               	andlw	1
  3947  159B  00A4               	movwf	??_frexp^(0+128)
  3948  159C  01A5               	clrf	(??_frexp^(0+128)+1)
  3949  159D  0823               	movf	frexp@eptr^(0+128),w
  3950  159E  0084               	movwf	4
  3951  159F  0824               	movf	??_frexp^(0+128),w
  3952  15A0  0480               	iorwf	0,f
  3953  15A1  0A84               	incf	4,f
  3954  15A2  0825               	movf	(??_frexp+1)^(0+128),w
  3955  15A3  0480               	iorwf	0,f
  3956  15A4  0823               	movf	frexp@eptr^(0+128),w
  3957  15A5  0084               	movwf	4
  3958  15A6  3082               	movlw	130
  3959  15A7  0780               	addwf	0,f
  3960  15A8  0F84               	incfsz	4,f
  3961  15A9  0800               	movf	0,w
  3962  15AA  1803               	skipnc
  3963  15AB  0A00               	incf	0,w
  3964  15AC  00FF               	movwf	127
  3965  15AD  30FF               	movlw	255
  3966  15AE  077F               	addwf	127,w
  3967  15AF  0080               	movwf	0
  3968  15B0  0384               	decf	4,f
  3969  15B1  0822               	movf	(frexp@value^(0+128)+2),w
  3970  15B2  3980               	andlw	-128
  3971  15B3  383F               	iorlw	63
  3972  15B4  00A2               	movwf	(frexp@value^(0+128)+2)
  3973  15B5  13A1               	bcf	(frexp@value^(0+128)+1),7
  3974  15B6  0008               	return
  3975  15B7                     __end_of_frexp:	
  3976                           
  3977                           	psect	text12
  3978  0A80                     __ptext12:	
  3979 ;; *************** function ___fttol *****************
  3980 ;; Defined at:
  3981 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fttol.c"
  3982 ;; Parameters:    Size  Location     Type
  3983 ;;  f1              3   30[BANK1 ] float 
  3984 ;; Auto vars:     Size  Location     Type
  3985 ;;  lval            4   39[BANK1 ] unsigned long 
  3986 ;;  exp1            1   43[BANK1 ] unsigned char 
  3987 ;;  sign1           1   38[BANK1 ] unsigned char 
  3988 ;; Return value:  Size  Location     Type
  3989 ;;                  4   30[BANK1 ] long 
  3990 ;; Registers used:
  3991 ;;		wreg, status,2, status,0
  3992 ;; Tracked objects:
  3993 ;;		On entry : 0/0
  3994 ;;		On exit  : 0/0
  3995 ;;		Unchanged: 0/0
  3996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3997 ;;      Params:         0       0       4       0       0
  3998 ;;      Locals:         0       0       6       0       0
  3999 ;;      Temps:          0       0       4       0       0
  4000 ;;      Totals:         0       0      14       0       0
  4001 ;;Total ram usage:       14 bytes
  4002 ;; Hardware stack levels used:    1
  4003 ;; Hardware stack levels required when called:    3
  4004 ;; This function calls:
  4005 ;;		Nothing
  4006 ;; This function is called by:
  4007 ;;		_analogRead
  4008 ;;		_pow
  4009 ;;		_exp
  4010 ;;		_floor
  4011 ;; This function uses a non-reentrant model
  4012 ;;
  4013                           
  4014                           
  4015                           ;psect for function ___fttol
  4016  0A80                     ___fttol:	
  4017                           
  4018                           ;incstack = 0
  4019 ;; hardware stack exceeded
  4020                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  4021  0A80  1683               	bsf	3,5	;RP0=1, select bank1
  4022  0A81  1303               	bcf	3,6	;RP1=0, select bank1
  4023  0A82  083E               	movf	___fttol@f1^(0+128),w
  4024  0A83  00C2               	movwf	??___fttol^(0+128)
  4025  0A84  083F               	movf	(___fttol@f1+1)^(0+128),w
  4026  0A85  00C3               	movwf	(??___fttol^(0+128)+1)
  4027  0A86  0840               	movf	(___fttol@f1+2)^(0+128),w
  4028  0A87  00C4               	movwf	(??___fttol^(0+128)+2)
  4029  0A88  1003               	clrc
  4030  0A89  0D43               	rlf	(??___fttol^(0+128)+1),w
  4031  0A8A  0D44               	rlf	(??___fttol^(0+128)+2),w
  4032  0A8B  00C5               	movwf	(??___fttol+3)^(0+128)
  4033  0A8C  0845               	movf	(??___fttol+3)^(0+128),w
  4034  0A8D  00CB               	movwf	___fttol@exp1^(0+128)
  4035  0A8E  084B               	movf	___fttol@exp1^(0+128),w
  4036  0A8F  1D03               	btfss	3,2
  4037  0A90  2A9A               	goto	l1936
  4038  0A91  3000               	movlw	0
  4039  0A92  00C1               	movwf	(?___fttol+3)^(0+128)
  4040  0A93  3000               	movlw	0
  4041  0A94  00C0               	movwf	(?___fttol+2)^(0+128)
  4042  0A95  3000               	movlw	0
  4043  0A96  00BF               	movwf	(?___fttol+1)^(0+128)
  4044  0A97  3000               	movlw	0
  4045  0A98  00BE               	movwf	?___fttol^(0+128)
  4046  0A99  0008               	return
  4047  0A9A                     l1936:	
  4048  0A9A  083E               	movf	___fttol@f1^(0+128),w
  4049  0A9B  00C2               	movwf	??___fttol^(0+128)
  4050  0A9C  083F               	movf	(___fttol@f1+1)^(0+128),w
  4051  0A9D  00C3               	movwf	(??___fttol^(0+128)+1)
  4052  0A9E  0840               	movf	(___fttol@f1+2)^(0+128),w
  4053  0A9F  00C4               	movwf	(??___fttol^(0+128)+2)
  4054  0AA0  3017               	movlw	23
  4055  0AA1                     u2385:	
  4056  0AA1  1003               	clrc
  4057  0AA2  0CC4               	rrf	(??___fttol^(0+128)+2),f
  4058  0AA3  0CC3               	rrf	(??___fttol^(0+128)+1),f
  4059  0AA4  0CC2               	rrf	??___fttol^(0+128),f
  4060  0AA5  3EFF               	addlw	-1
  4061  0AA6  1D03               	skipz
  4062  0AA7  2AA1               	goto	u2385
  4063  0AA8  0842               	movf	??___fttol^(0+128),w
  4064  0AA9  00C5               	movwf	(??___fttol+3)^(0+128)
  4065  0AAA  0845               	movf	(??___fttol+3)^(0+128),w
  4066  0AAB  00C6               	movwf	___fttol@sign1^(0+128)
  4067  0AAC  17BF               	bsf	(___fttol@f1^(0+128)+1),7
  4068  0AAD  30FF               	movlw	255
  4069  0AAE  05BE               	andwf	___fttol@f1^(0+128),f
  4070  0AAF  30FF               	movlw	255
  4071  0AB0  05BF               	andwf	(___fttol@f1+1)^(0+128),f
  4072  0AB1  3000               	movlw	0
  4073  0AB2  05C0               	andwf	(___fttol@f1+2)^(0+128),f
  4074  0AB3  083E               	movf	___fttol@f1^(0+128),w
  4075  0AB4  00C7               	movwf	___fttol@lval^(0+128)
  4076  0AB5  083F               	movf	(___fttol@f1+1)^(0+128),w
  4077  0AB6  00C8               	movwf	(___fttol@lval^(0+128)+1)
  4078  0AB7  0840               	movf	(___fttol@f1+2)^(0+128),w
  4079  0AB8  00C9               	movwf	(___fttol@lval^(0+128)+2)
  4080  0AB9  01CA               	clrf	(___fttol@lval^(0+128)+3)
  4081  0ABA  308E               	movlw	142
  4082  0ABB  02CB               	subwf	___fttol@exp1^(0+128),f
  4083  0ABC  1FCB               	btfss	___fttol@exp1^(0+128),7
  4084  0ABD  2ADC               	goto	l1956
  4085  0ABE  084B               	movf	___fttol@exp1^(0+128),w
  4086  0ABF  3A80               	xorlw	128
  4087  0AC0  3E8F               	addlw	143
  4088  0AC1  1803               	skipnc
  4089  0AC2  2ACC               	goto	l1954
  4090  0AC3  3000               	movlw	0
  4091  0AC4  00C1               	movwf	(?___fttol+3)^(0+128)
  4092  0AC5  3000               	movlw	0
  4093  0AC6  00C0               	movwf	(?___fttol+2)^(0+128)
  4094  0AC7  3000               	movlw	0
  4095  0AC8  00BF               	movwf	(?___fttol+1)^(0+128)
  4096  0AC9  3000               	movlw	0
  4097  0ACA  00BE               	movwf	?___fttol^(0+128)
  4098  0ACB  0008               	return
  4099  0ACC                     l1954:	
  4100  0ACC  3001               	movlw	1
  4101  0ACD                     u2415:	
  4102  0ACD  1003               	clrc
  4103  0ACE  0CCA               	rrf	(___fttol@lval+3)^(0+128),f
  4104  0ACF  0CC9               	rrf	(___fttol@lval+2)^(0+128),f
  4105  0AD0  0CC8               	rrf	(___fttol@lval+1)^(0+128),f
  4106  0AD1  0CC7               	rrf	___fttol@lval^(0+128),f
  4107  0AD2  3EFF               	addlw	-1
  4108  0AD3  1D03               	skipz
  4109  0AD4  2ACD               	goto	u2415
  4110  0AD5  3001               	movlw	1
  4111  0AD6  00C2               	movwf	??___fttol^(0+128)
  4112  0AD7  0842               	movf	??___fttol^(0+128),w
  4113  0AD8  07CB               	addwf	___fttol@exp1^(0+128),f
  4114  0AD9  1903               	btfsc	3,2
  4115  0ADA  2AF7               	goto	l1964
  4116  0ADB  2ACC               	goto	l1954
  4117  0ADC                     l1956:	
  4118  0ADC  3018               	movlw	24
  4119  0ADD  024B               	subwf	___fttol@exp1^(0+128),w
  4120  0ADE  1C03               	skipc
  4121  0ADF  2AF4               	goto	l467
  4122  0AE0  3000               	movlw	0
  4123  0AE1  00C1               	movwf	(?___fttol+3)^(0+128)
  4124  0AE2  3000               	movlw	0
  4125  0AE3  00C0               	movwf	(?___fttol+2)^(0+128)
  4126  0AE4  3000               	movlw	0
  4127  0AE5  00BF               	movwf	(?___fttol+1)^(0+128)
  4128  0AE6  3000               	movlw	0
  4129  0AE7  00BE               	movwf	?___fttol^(0+128)
  4130  0AE8  0008               	return
  4131  0AE9                     l1962:	
  4132  0AE9  3001               	movlw	1
  4133  0AEA  00C2               	movwf	??___fttol^(0+128)
  4134  0AEB                     u2445:	
  4135  0AEB  1003               	clrc
  4136  0AEC  0DC7               	rlf	___fttol@lval^(0+128),f
  4137  0AED  0DC8               	rlf	(___fttol@lval+1)^(0+128),f
  4138  0AEE  0DC9               	rlf	(___fttol@lval+2)^(0+128),f
  4139  0AEF  0DCA               	rlf	(___fttol@lval+3)^(0+128),f
  4140  0AF0  0BC2               	decfsz	??___fttol^(0+128),f
  4141  0AF1  2AEB               	goto	u2445
  4142  0AF2  3001               	movlw	1
  4143  0AF3  02CB               	subwf	___fttol@exp1^(0+128),f
  4144  0AF4                     l467:	
  4145  0AF4  084B               	movf	___fttol@exp1^(0+128),w
  4146  0AF5  1D03               	btfss	3,2
  4147  0AF6  2AE9               	goto	l1962
  4148  0AF7                     l1964:	
  4149  0AF7  0846               	movf	___fttol@sign1^(0+128),w
  4150  0AF8  1903               	btfsc	3,2
  4151  0AF9  2B05               	goto	l1968
  4152  0AFA  09C7               	comf	___fttol@lval^(0+128),f
  4153  0AFB  09C8               	comf	(___fttol@lval+1)^(0+128),f
  4154  0AFC  09C9               	comf	(___fttol@lval+2)^(0+128),f
  4155  0AFD  09CA               	comf	(___fttol@lval+3)^(0+128),f
  4156  0AFE  0AC7               	incf	___fttol@lval^(0+128),f
  4157  0AFF  1903               	skipnz
  4158  0B00  0AC8               	incf	(___fttol@lval+1)^(0+128),f
  4159  0B01  1903               	skipnz
  4160  0B02  0AC9               	incf	(___fttol@lval+2)^(0+128),f
  4161  0B03  1903               	skipnz
  4162  0B04  0ACA               	incf	(___fttol@lval+3)^(0+128),f
  4163  0B05                     l1968:	
  4164  0B05  084A               	movf	(___fttol@lval+3)^(0+128),w
  4165  0B06  00C1               	movwf	(?___fttol+3)^(0+128)
  4166  0B07  0849               	movf	(___fttol@lval+2)^(0+128),w
  4167  0B08  00C0               	movwf	(?___fttol+2)^(0+128)
  4168  0B09  0848               	movf	(___fttol@lval+1)^(0+128),w
  4169  0B0A  00BF               	movwf	(?___fttol+1)^(0+128)
  4170  0B0B  0847               	movf	___fttol@lval^(0+128),w
  4171  0B0C  00BE               	movwf	?___fttol^(0+128)
  4172  0B0D  0008               	return
  4173  0B0E                     __end_of___fttol:	
  4174                           
  4175                           	psect	text13
  4176  1740                     __ptext13:	
  4177 ;; *************** function ___ftge *****************
  4178 ;; Defined at:
  4179 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftge.c"
  4180 ;; Parameters:    Size  Location     Type
  4181 ;;  ff1             3   30[BANK1 ] float 
  4182 ;;  ff2             3   33[BANK1 ] float 
  4183 ;; Auto vars:     Size  Location     Type
  4184 ;;		None
  4185 ;; Return value:  Size  Location     Type
  4186 ;;		None               void
  4187 ;; Registers used:
  4188 ;;		wreg, status,2, status,0
  4189 ;; Tracked objects:
  4190 ;;		On entry : 0/0
  4191 ;;		On exit  : 0/0
  4192 ;;		Unchanged: 0/0
  4193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4194 ;;      Params:         0       0       6       0       0
  4195 ;;      Locals:         0       0       0       0       0
  4196 ;;      Temps:          0       0       6       0       0
  4197 ;;      Totals:         0       0      12       0       0
  4198 ;;Total ram usage:       12 bytes
  4199 ;; Hardware stack levels used:    1
  4200 ;; Hardware stack levels required when called:    3
  4201 ;; This function calls:
  4202 ;;		Nothing
  4203 ;; This function is called by:
  4204 ;;		_Process
  4205 ;;		_pow
  4206 ;;		_exp
  4207 ;;		_floor
  4208 ;;		_ldexp
  4209 ;;		_log
  4210 ;; This function uses a non-reentrant model
  4211 ;;
  4212                           
  4213                           
  4214                           ;psect for function ___ftge
  4215  1740                     ___ftge:	
  4216                           
  4217                           ;incstack = 0
  4218                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  4219  1740  1683               	bsf	3,5	;RP0=1, select bank1
  4220  1741  1303               	bcf	3,6	;RP1=0, select bank1
  4221  1742  1FC0               	btfss	(___ftge@ff1+2)^(0+128),7
  4222  1743  2F69               	goto	l1856
  4223  1744  3000               	movlw	0
  4224  1745  00C4               	movwf	??___ftge^(0+128)
  4225  1746  3000               	movlw	0
  4226  1747  00C5               	movwf	(??___ftge^(0+128)+1)
  4227  1748  3080               	movlw	128
  4228  1749  00C6               	movwf	(??___ftge^(0+128)+2)
  4229  174A  093E               	comf	___ftge@ff1^(0+128),w
  4230  174B  00C7               	movwf	(??___ftge+3)^(0+128)
  4231  174C  093F               	comf	(___ftge@ff1+1)^(0+128),w
  4232  174D  00C8               	movwf	((??___ftge+3)^(0+128)+1)
  4233  174E  0940               	comf	(___ftge@ff1+2)^(0+128),w
  4234  174F  00C9               	movwf	((??___ftge+3)^(0+128)+2)
  4235  1750  0AC7               	incf	(??___ftge+3)^(0+128),f
  4236  1751  1903               	skipnz
  4237  1752  0AC8               	incf	((??___ftge+3)^(0+128)+1),f
  4238  1753  1903               	skipnz
  4239  1754  0AC9               	incf	((??___ftge+3)^(0+128)+2),f
  4240  1755  0847               	movf	(??___ftge+3)^(0+128),w
  4241  1756  07C4               	addwf	??___ftge^(0+128),f
  4242  1757  0848               	movf	(??___ftge+4)^(0+128),w
  4243  1758  1803               	skipnc
  4244  1759  0F48               	incfsz	(??___ftge+4)^(0+128),w
  4245  175A  2F5C               	goto	u2181
  4246  175B  2F5D               	goto	u2182
  4247  175C                     u2181:	
  4248  175C  07C5               	addwf	(??___ftge^(0+128)+1),f
  4249  175D                     u2182:	
  4250  175D  0849               	movf	(??___ftge+5)^(0+128),w
  4251  175E  1803               	skipnc
  4252  175F  0F49               	incfsz	(??___ftge+5)^(0+128),w
  4253  1760  2F62               	goto	u2183
  4254  1761  2F63               	goto	u2184
  4255  1762                     u2183:	
  4256  1762  07C6               	addwf	(??___ftge^(0+128)+2),f
  4257  1763                     u2184:	
  4258  1763  0844               	movf	??___ftge^(0+128),w
  4259  1764  00BE               	movwf	___ftge@ff1^(0+128)
  4260  1765  0845               	movf	(??___ftge+1)^(0+128),w
  4261  1766  00BF               	movwf	(___ftge@ff1+1)^(0+128)
  4262  1767  0846               	movf	(??___ftge+2)^(0+128),w
  4263  1768  00C0               	movwf	(___ftge@ff1+2)^(0+128)
  4264  1769                     l1856:	
  4265  1769  1FC3               	btfss	(___ftge@ff2+2)^(0+128),7
  4266  176A  2F90               	goto	l1860
  4267  176B  3000               	movlw	0
  4268  176C  00C4               	movwf	??___ftge^(0+128)
  4269  176D  3000               	movlw	0
  4270  176E  00C5               	movwf	(??___ftge^(0+128)+1)
  4271  176F  3080               	movlw	128
  4272  1770  00C6               	movwf	(??___ftge^(0+128)+2)
  4273  1771  0941               	comf	___ftge@ff2^(0+128),w
  4274  1772  00C7               	movwf	(??___ftge+3)^(0+128)
  4275  1773  0942               	comf	(___ftge@ff2+1)^(0+128),w
  4276  1774  00C8               	movwf	((??___ftge+3)^(0+128)+1)
  4277  1775  0943               	comf	(___ftge@ff2+2)^(0+128),w
  4278  1776  00C9               	movwf	((??___ftge+3)^(0+128)+2)
  4279  1777  0AC7               	incf	(??___ftge+3)^(0+128),f
  4280  1778  1903               	skipnz
  4281  1779  0AC8               	incf	((??___ftge+3)^(0+128)+1),f
  4282  177A  1903               	skipnz
  4283  177B  0AC9               	incf	((??___ftge+3)^(0+128)+2),f
  4284  177C  0847               	movf	(??___ftge+3)^(0+128),w
  4285  177D  07C4               	addwf	??___ftge^(0+128),f
  4286  177E  0848               	movf	(??___ftge+4)^(0+128),w
  4287  177F  1803               	skipnc
  4288  1780  0F48               	incfsz	(??___ftge+4)^(0+128),w
  4289  1781  2F83               	goto	u2201
  4290  1782  2F84               	goto	u2202
  4291  1783                     u2201:	
  4292  1783  07C5               	addwf	(??___ftge^(0+128)+1),f
  4293  1784                     u2202:	
  4294  1784  0849               	movf	(??___ftge+5)^(0+128),w
  4295  1785  1803               	skipnc
  4296  1786  0F49               	incfsz	(??___ftge+5)^(0+128),w
  4297  1787  2F89               	goto	u2203
  4298  1788  2F8A               	goto	u2204
  4299  1789                     u2203:	
  4300  1789  07C6               	addwf	(??___ftge^(0+128)+2),f
  4301  178A                     u2204:	
  4302  178A  0844               	movf	??___ftge^(0+128),w
  4303  178B  00C1               	movwf	___ftge@ff2^(0+128)
  4304  178C  0845               	movf	(??___ftge+1)^(0+128),w
  4305  178D  00C2               	movwf	(___ftge@ff2+1)^(0+128)
  4306  178E  0846               	movf	(??___ftge+2)^(0+128),w
  4307  178F  00C3               	movwf	(___ftge@ff2+2)^(0+128)
  4308  1790                     l1860:	
  4309  1790  3080               	movlw	128
  4310  1791  06C0               	xorwf	(___ftge@ff1+2)^(0+128),f
  4311  1792  3080               	movlw	128
  4312  1793  06C3               	xorwf	(___ftge@ff2+2)^(0+128),f
  4313  1794  0843               	movf	(___ftge@ff2+2)^(0+128),w
  4314  1795  0240               	subwf	(___ftge@ff1+2)^(0+128),w
  4315  1796  1D03               	skipz
  4316  1797  0008               	return
  4317  1798  0842               	movf	(___ftge@ff2+1)^(0+128),w
  4318  1799  023F               	subwf	(___ftge@ff1+1)^(0+128),w
  4319  179A  1D03               	skipz
  4320  179B  0008               	return
  4321  179C  0841               	movf	___ftge@ff2^(0+128),w
  4322  179D  023E               	subwf	___ftge@ff1^(0+128),w
  4323  179E  0008               	return
  4324  179F                     __end_of___ftge:	
  4325                           
  4326                           	psect	text14
  4327  1533                     __ptext14:	
  4328 ;; *************** function ___altoft *****************
  4329 ;; Defined at:
  4330 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\altoft.c"
  4331 ;; Parameters:    Size  Location     Type
  4332 ;;  c               4   44[BANK1 ] long 
  4333 ;; Auto vars:     Size  Location     Type
  4334 ;;  sign            1   51[BANK1 ] unsigned char 
  4335 ;;  exp             1   50[BANK1 ] unsigned char 
  4336 ;; Return value:  Size  Location     Type
  4337 ;;                  3   44[BANK1 ] float 
  4338 ;; Registers used:
  4339 ;;		wreg, status,2, status,0, pclath, cstack
  4340 ;; Tracked objects:
  4341 ;;		On entry : 0/0
  4342 ;;		On exit  : 0/0
  4343 ;;		Unchanged: 0/0
  4344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4345 ;;      Params:         0       0       4       0       0
  4346 ;;      Locals:         0       0       2       0       0
  4347 ;;      Temps:          0       0       2       0       0
  4348 ;;      Totals:         0       0       8       0       0
  4349 ;;Total ram usage:        8 bytes
  4350 ;; Hardware stack levels used:    1
  4351 ;; Hardware stack levels required when called:    4
  4352 ;; This function calls:
  4353 ;;		___ftpack
  4354 ;; This function is called by:
  4355 ;;		_floor
  4356 ;; This function uses a non-reentrant model
  4357 ;;
  4358                           
  4359                           
  4360                           ;psect for function ___altoft
  4361  1533                     ___altoft:	
  4362                           
  4363                           ;incstack = 0
  4364 ;; hardware stack exceeded
  4365                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
  4366  1533  1683               	bsf	3,5	;RP0=1, select bank1
  4367  1534  1303               	bcf	3,6	;RP1=0, select bank1
  4368  1535  01D3               	clrf	___altoft@sign^(0+128)
  4369  1536  308E               	movlw	142
  4370  1537  00D0               	movwf	??___altoft^(0+128)
  4371  1538  0850               	movf	??___altoft^(0+128),w
  4372  1539  00D2               	movwf	___altoft@exp^(0+128)
  4373  153A  1FCF               	btfss	(___altoft@c+3)^(0+128),7
  4374  153B  2D49               	goto	l2786
  4375  153C  09CC               	comf	___altoft@c^(0+128),f
  4376  153D  09CD               	comf	(___altoft@c+1)^(0+128),f
  4377  153E  09CE               	comf	(___altoft@c+2)^(0+128),f
  4378  153F  09CF               	comf	(___altoft@c+3)^(0+128),f
  4379  1540  0ACC               	incf	___altoft@c^(0+128),f
  4380  1541  1903               	skipnz
  4381  1542  0ACD               	incf	(___altoft@c+1)^(0+128),f
  4382  1543  1903               	skipnz
  4383  1544  0ACE               	incf	(___altoft@c+2)^(0+128),f
  4384  1545  1903               	skipnz
  4385  1546  0ACF               	incf	(___altoft@c+3)^(0+128),f
  4386  1547  01D3               	clrf	___altoft@sign^(0+128)
  4387  1548  0AD3               	incf	___altoft@sign^(0+128),f
  4388  1549                     l2786:	
  4389  1549  30FF               	movlw	255
  4390  154A  054F               	andwf	(___altoft@c+3)^(0+128),w
  4391  154B  1903               	btfsc	3,2
  4392  154C  2D5B               	goto	l2788
  4393  154D  3001               	movlw	1
  4394  154E                     u3665:	
  4395  154E  1003               	clrc
  4396  154F  0CCF               	rrf	(___altoft@c+3)^(0+128),f
  4397  1550  0CCE               	rrf	(___altoft@c+2)^(0+128),f
  4398  1551  0CCD               	rrf	(___altoft@c+1)^(0+128),f
  4399  1552  0CCC               	rrf	___altoft@c^(0+128),f
  4400  1553  3EFF               	addlw	-1
  4401  1554  1D03               	skipz
  4402  1555  2D4E               	goto	u3665
  4403  1556  3001               	movlw	1
  4404  1557  00D0               	movwf	??___altoft^(0+128)
  4405  1558  0850               	movf	??___altoft^(0+128),w
  4406  1559  07D2               	addwf	___altoft@exp^(0+128),f
  4407  155A  2D49               	goto	l2786
  4408  155B                     l2788:	
  4409  155B  084C               	movf	___altoft@c^(0+128),w
  4410  155C  00A0               	movwf	___ftpack@arg^(0+128)
  4411  155D  084D               	movf	(___altoft@c+1)^(0+128),w
  4412  155E  00A1               	movwf	(___ftpack@arg+1)^(0+128)
  4413  155F  084E               	movf	(___altoft@c+2)^(0+128),w
  4414  1560  00A2               	movwf	(___ftpack@arg+2)^(0+128)
  4415  1561  0852               	movf	___altoft@exp^(0+128),w
  4416  1562  00D0               	movwf	??___altoft^(0+128)
  4417  1563  0850               	movf	??___altoft^(0+128),w
  4418  1564  00A3               	movwf	___ftpack@exp^(0+128)
  4419  1565  0853               	movf	___altoft@sign^(0+128),w
  4420  1566  00D1               	movwf	(??___altoft+1)^(0+128)
  4421  1567  0851               	movf	(??___altoft+1)^(0+128),w
  4422  1568  00A4               	movwf	___ftpack@sign^(0+128)
  4423  1569  120A  158A  210B   	fcall	___ftpack
  4424  156C  1683               	bsf	3,5	;RP0=1, select bank1
  4425  156D  1303               	bcf	3,6	;RP1=0, select bank1
  4426  156E  0820               	movf	?___ftpack^(0+128),w
  4427  156F  00CC               	movwf	?___altoft^(0+128)
  4428  1570  0821               	movf	(?___ftpack+1)^(0+128),w
  4429  1571  00CD               	movwf	(?___altoft+1)^(0+128)
  4430  1572  0822               	movf	(?___ftpack+2)^(0+128),w
  4431  1573  00CE               	movwf	(?___altoft+2)^(0+128)
  4432  1574  0008               	return
  4433  1575                     __end_of___altoft:	
  4434                           
  4435                           	psect	text15
  4436  0979                     __ptext15:	
  4437 ;; *************** function _eval_poly *****************
  4438 ;; Defined at:
  4439 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\evalpoly.c"
  4440 ;; Parameters:    Size  Location     Type
  4441 ;;  x               3   43[BANK1 ] float 
  4442 ;;  d               1   46[BANK1 ] PTR const 
  4443 ;;		 -> log@coeff(27), exp@coeff(30), 
  4444 ;;  n               2   47[BANK1 ] int 
  4445 ;; Auto vars:     Size  Location     Type
  4446 ;;  res             3   50[BANK1 ] int 
  4447 ;; Return value:  Size  Location     Type
  4448 ;;                  3   43[BANK1 ] int 
  4449 ;; Registers used:
  4450 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4451 ;; Tracked objects:
  4452 ;;		On entry : 0/0
  4453 ;;		On exit  : 0/0
  4454 ;;		Unchanged: 0/0
  4455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4456 ;;      Params:         0       0       6       0       0
  4457 ;;      Locals:         0       0       3       0       0
  4458 ;;      Temps:          0       0       1       0       0
  4459 ;;      Totals:         0       0      10       0       0
  4460 ;;Total ram usage:       10 bytes
  4461 ;; Hardware stack levels used:    1
  4462 ;; Hardware stack levels required when called:    5
  4463 ;; This function calls:
  4464 ;;		___bmul
  4465 ;;		___ftadd
  4466 ;;		___ftmul
  4467 ;; This function is called by:
  4468 ;;		_exp
  4469 ;;		_log
  4470 ;; This function uses a non-reentrant model
  4471 ;;
  4472                           
  4473                           
  4474                           ;psect for function _eval_poly
  4475  0979                     _eval_poly:	
  4476                           
  4477                           ;incstack = 0
  4478 ;; hardware stack exceeded
  4479                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4480  0979  3003               	movlw	3
  4481  097A  1683               	bsf	3,5	;RP0=1, select bank1
  4482  097B  1303               	bcf	3,6	;RP1=0, select bank1
  4483  097C  00D1               	movwf	??_eval_poly^(0+128)
  4484  097D  0851               	movf	??_eval_poly^(0+128),w
  4485  097E  00A0               	movwf	___bmul@multiplicand^(0+128)
  4486  097F  084F               	movf	eval_poly@n^(0+128),w
  4487  0980  160A  118A  244E  120A  158A  	fcall	___bmul
  4488  0985  1683               	bsf	3,5	;RP0=1, select bank1
  4489  0986  1303               	bcf	3,6	;RP1=0, select bank1
  4490  0987  074E               	addwf	eval_poly@d^(0+128),w
  4491  0988  0084               	movwf	4
  4492  0989  120A  158A  2000  120A  158A  	fcall	stringdir
  4493  098E  00D2               	movwf	eval_poly@res^(0+128)
  4494  098F  120A  158A  2000  120A  158A  	fcall	stringdir
  4495  0994  00D3               	movwf	(eval_poly@res+1)^(0+128)
  4496  0995  120A  158A  2000  120A  158A  	fcall	stringdir
  4497  099A                     L4:	
  4498  099A  00D4               	movwf	(eval_poly@res+2)^(0+128)
  4499  099B  084F               	movf	eval_poly@n^(0+128),w
  4500  099C  0450               	iorwf	(eval_poly@n+1)^(0+128),w
  4501  099D  1903               	btfsc	3,2
  4502  099E  29EB               	goto	l3036
  4503  099F  3003               	movlw	3
  4504  09A0  00D1               	movwf	??_eval_poly^(0+128)
  4505  09A1  0851               	movf	??_eval_poly^(0+128),w
  4506  09A2  00A0               	movwf	___bmul@multiplicand^(0+128)
  4507  09A3  30FF               	movlw	255
  4508  09A4  07CF               	addwf	eval_poly@n^(0+128),f
  4509  09A5  1803               	skipnc
  4510  09A6  0AD0               	incf	(eval_poly@n+1)^(0+128),f
  4511  09A7  30FF               	movlw	255
  4512  09A8  07D0               	addwf	(eval_poly@n+1)^(0+128),f
  4513  09A9  084F               	movf	eval_poly@n^(0+128),w
  4514  09AA  160A  118A  244E  120A  158A  	fcall	___bmul
  4515  09AF  1683               	bsf	3,5	;RP0=1, select bank1
  4516  09B0  1303               	bcf	3,6	;RP1=0, select bank1
  4517  09B1  074E               	addwf	eval_poly@d^(0+128),w
  4518  09B2  0084               	movwf	4
  4519  09B3  120A  158A  2000  120A  158A  	fcall	stringdir
  4520  09B8  00BE               	movwf	___ftadd@f1^(0+128)
  4521  09B9  120A  158A  2000  120A  158A  	fcall	stringdir
  4522  09BE  00BF               	movwf	(___ftadd@f1+1)^(0+128)
  4523  09BF  120A  158A  2000  120A  158A  	fcall	stringdir
  4524  09C4  00C0               	movwf	(___ftadd@f1+2)^(0+128)
  4525  09C5  0852               	movf	eval_poly@res^(0+128),w
  4526  09C6  00AE               	movwf	___ftmul@f1^(0+128)
  4527  09C7  0853               	movf	(eval_poly@res+1)^(0+128),w
  4528  09C8  00AF               	movwf	(___ftmul@f1+1)^(0+128)
  4529  09C9  0854               	movf	(eval_poly@res+2)^(0+128),w
  4530  09CA  00B0               	movwf	(___ftmul@f1+2)^(0+128)
  4531  09CB  084B               	movf	eval_poly@x^(0+128),w
  4532  09CC  00B1               	movwf	___ftmul@f2^(0+128)
  4533  09CD  084C               	movf	(eval_poly@x+1)^(0+128),w
  4534  09CE  00B2               	movwf	(___ftmul@f2+1)^(0+128)
  4535  09CF  084D               	movf	(eval_poly@x+2)^(0+128),w
  4536  09D0  00B3               	movwf	(___ftmul@f2+2)^(0+128)
  4537  09D1  120A  118A  2708  120A  158A  	fcall	___ftmul
  4538  09D6  1683               	bsf	3,5	;RP0=1, select bank1
  4539  09D7  1303               	bcf	3,6	;RP1=0, select bank1
  4540  09D8  082E               	movf	?___ftmul^(0+128),w
  4541  09D9  00C1               	movwf	___ftadd@f2^(0+128)
  4542  09DA  082F               	movf	(?___ftmul+1)^(0+128),w
  4543  09DB  00C2               	movwf	(___ftadd@f2+1)^(0+128)
  4544  09DC  0830               	movf	(?___ftmul+2)^(0+128),w
  4545  09DD  00C3               	movwf	(___ftadd@f2+2)^(0+128)
  4546  09DE  120A  118A  25FF  120A  158A  	fcall	___ftadd
  4547  09E3  1683               	bsf	3,5	;RP0=1, select bank1
  4548  09E4  1303               	bcf	3,6	;RP1=0, select bank1
  4549  09E5  083E               	movf	?___ftadd^(0+128),w
  4550  09E6  00D2               	movwf	eval_poly@res^(0+128)
  4551  09E7  083F               	movf	(?___ftadd+1)^(0+128),w
  4552  09E8  00D3               	movwf	(eval_poly@res+1)^(0+128)
  4553  09E9  0840               	movf	(?___ftadd+2)^(0+128),w
  4554  09EA  299A               	goto	L4
  4555  09EB                     l3036:	
  4556  09EB  0852               	movf	eval_poly@res^(0+128),w
  4557  09EC  00CB               	movwf	?_eval_poly^(0+128)
  4558  09ED  0853               	movf	(eval_poly@res+1)^(0+128),w
  4559  09EE  00CC               	movwf	(?_eval_poly+1)^(0+128)
  4560  09EF  0854               	movf	(eval_poly@res+2)^(0+128),w
  4561  09F0  00CD               	movwf	(?_eval_poly+2)^(0+128)
  4562  09F1  0008               	return
  4563  09F2                     __end_of_eval_poly:	
  4564                           
  4565                           	psect	text16
  4566  0708                     __ptext16:	
  4567 ;; *************** function ___ftmul *****************
  4568 ;; Defined at:
  4569 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftmul.c"
  4570 ;; Parameters:    Size  Location     Type
  4571 ;;  f1              3   14[BANK1 ] float 
  4572 ;;  f2              3   17[BANK1 ] float 
  4573 ;; Auto vars:     Size  Location     Type
  4574 ;;  f3_as_produc    3   25[BANK1 ] unsigned um
  4575 ;;  sign            1   29[BANK1 ] unsigned char 
  4576 ;;  cntr            1   28[BANK1 ] unsigned char 
  4577 ;;  exp             1   24[BANK1 ] unsigned char 
  4578 ;; Return value:  Size  Location     Type
  4579 ;;                  3   14[BANK1 ] float 
  4580 ;; Registers used:
  4581 ;;		wreg, status,2, status,0, pclath, cstack
  4582 ;; Tracked objects:
  4583 ;;		On entry : 0/0
  4584 ;;		On exit  : 0/0
  4585 ;;		Unchanged: 0/0
  4586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4587 ;;      Params:         0       0       6       0       0
  4588 ;;      Locals:         0       0       6       0       0
  4589 ;;      Temps:          0       0       4       0       0
  4590 ;;      Totals:         0       0      16       0       0
  4591 ;;Total ram usage:       16 bytes
  4592 ;; Hardware stack levels used:    1
  4593 ;; Hardware stack levels required when called:    4
  4594 ;; This function calls:
  4595 ;;		___ftpack
  4596 ;; This function is called by:
  4597 ;;		_analogRead
  4598 ;;		_Process
  4599 ;;		_pow
  4600 ;;		_exp
  4601 ;;		_log
  4602 ;;		_eval_poly
  4603 ;; This function uses a non-reentrant model
  4604 ;;
  4605                           
  4606                           
  4607                           ;psect for function ___ftmul
  4608  0708                     ___ftmul:	
  4609                           
  4610                           ;incstack = 0
  4611 ;; hardware stack exceeded
  4612                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  4613  0708  1683               	bsf	3,5	;RP0=1, select bank1
  4614  0709  1303               	bcf	3,6	;RP1=0, select bank1
  4615  070A  082E               	movf	___ftmul@f1^(0+128),w
  4616  070B  00B4               	movwf	??___ftmul^(0+128)
  4617  070C  082F               	movf	(___ftmul@f1+1)^(0+128),w
  4618  070D  00B5               	movwf	(??___ftmul^(0+128)+1)
  4619  070E  0830               	movf	(___ftmul@f1+2)^(0+128),w
  4620  070F  00B6               	movwf	(??___ftmul^(0+128)+2)
  4621  0710  1003               	clrc
  4622  0711  0D35               	rlf	(??___ftmul^(0+128)+1),w
  4623  0712  0D36               	rlf	(??___ftmul^(0+128)+2),w
  4624  0713  00B7               	movwf	(??___ftmul+3)^(0+128)
  4625  0714  0837               	movf	(??___ftmul+3)^(0+128),w
  4626  0715  00B8               	movwf	___ftmul@exp^(0+128)
  4627  0716  0838               	movf	___ftmul@exp^(0+128),w
  4628  0717  1D03               	btfss	3,2
  4629  0718  2F20               	goto	l2868
  4630  0719  3000               	movlw	0
  4631  071A  00AE               	movwf	?___ftmul^(0+128)
  4632  071B  3000               	movlw	0
  4633  071C  00AF               	movwf	(?___ftmul+1)^(0+128)
  4634  071D  3000               	movlw	0
  4635  071E  00B0               	movwf	(?___ftmul+2)^(0+128)
  4636  071F  0008               	return
  4637  0720                     l2868:	
  4638  0720  0831               	movf	___ftmul@f2^(0+128),w
  4639  0721  00B4               	movwf	??___ftmul^(0+128)
  4640  0722  0832               	movf	(___ftmul@f2+1)^(0+128),w
  4641  0723  00B5               	movwf	(??___ftmul^(0+128)+1)
  4642  0724  0833               	movf	(___ftmul@f2+2)^(0+128),w
  4643  0725  00B6               	movwf	(??___ftmul^(0+128)+2)
  4644  0726  1003               	clrc
  4645  0727  0D35               	rlf	(??___ftmul^(0+128)+1),w
  4646  0728  0D36               	rlf	(??___ftmul^(0+128)+2),w
  4647  0729  00B7               	movwf	(??___ftmul+3)^(0+128)
  4648  072A  0837               	movf	(??___ftmul+3)^(0+128),w
  4649  072B  00BD               	movwf	___ftmul@sign^(0+128)
  4650  072C  083D               	movf	___ftmul@sign^(0+128),w
  4651  072D  1D03               	btfss	3,2
  4652  072E  2F36               	goto	l2874
  4653  072F  3000               	movlw	0
  4654  0730  00AE               	movwf	?___ftmul^(0+128)
  4655  0731  3000               	movlw	0
  4656  0732  00AF               	movwf	(?___ftmul+1)^(0+128)
  4657  0733  3000               	movlw	0
  4658  0734  00B0               	movwf	(?___ftmul+2)^(0+128)
  4659  0735  0008               	return
  4660  0736                     l2874:	
  4661  0736  083D               	movf	___ftmul@sign^(0+128),w
  4662  0737  3E7B               	addlw	123
  4663  0738  00B4               	movwf	??___ftmul^(0+128)
  4664  0739  0834               	movf	??___ftmul^(0+128),w
  4665  073A  07B8               	addwf	___ftmul@exp^(0+128),f
  4666  073B  082E               	movf	___ftmul@f1^(0+128),w
  4667  073C  00B4               	movwf	??___ftmul^(0+128)
  4668  073D  082F               	movf	(___ftmul@f1+1)^(0+128),w
  4669  073E  00B5               	movwf	(??___ftmul^(0+128)+1)
  4670  073F  0830               	movf	(___ftmul@f1+2)^(0+128),w
  4671  0740  00B6               	movwf	(??___ftmul^(0+128)+2)
  4672  0741  3010               	movlw	16
  4673  0742                     u3945:	
  4674  0742  1003               	clrc
  4675  0743  0CB6               	rrf	(??___ftmul^(0+128)+2),f
  4676  0744  0CB5               	rrf	(??___ftmul^(0+128)+1),f
  4677  0745  0CB4               	rrf	??___ftmul^(0+128),f
  4678  0746  3EFF               	addlw	-1
  4679  0747  1D03               	skipz
  4680  0748  2F42               	goto	u3945
  4681  0749  0834               	movf	??___ftmul^(0+128),w
  4682  074A  00B7               	movwf	(??___ftmul+3)^(0+128)
  4683  074B  0837               	movf	(??___ftmul+3)^(0+128),w
  4684  074C  00BD               	movwf	___ftmul@sign^(0+128)
  4685  074D  0831               	movf	___ftmul@f2^(0+128),w
  4686  074E  00B4               	movwf	??___ftmul^(0+128)
  4687  074F  0832               	movf	(___ftmul@f2+1)^(0+128),w
  4688  0750  00B5               	movwf	(??___ftmul^(0+128)+1)
  4689  0751  0833               	movf	(___ftmul@f2+2)^(0+128),w
  4690  0752  00B6               	movwf	(??___ftmul^(0+128)+2)
  4691  0753  3010               	movlw	16
  4692  0754                     u3955:	
  4693  0754  1003               	clrc
  4694  0755  0CB6               	rrf	(??___ftmul^(0+128)+2),f
  4695  0756  0CB5               	rrf	(??___ftmul^(0+128)+1),f
  4696  0757  0CB4               	rrf	??___ftmul^(0+128),f
  4697  0758  3EFF               	addlw	-1
  4698  0759  1D03               	skipz
  4699  075A  2F54               	goto	u3955
  4700  075B  0834               	movf	??___ftmul^(0+128),w
  4701  075C  00B7               	movwf	(??___ftmul+3)^(0+128)
  4702  075D  0837               	movf	(??___ftmul+3)^(0+128),w
  4703  075E  06BD               	xorwf	___ftmul@sign^(0+128),f
  4704  075F  3080               	movlw	128
  4705  0760  00B4               	movwf	??___ftmul^(0+128)
  4706  0761  0834               	movf	??___ftmul^(0+128),w
  4707  0762  05BD               	andwf	___ftmul@sign^(0+128),f
  4708  0763  17AF               	bsf	(___ftmul@f1^(0+128)+1),7
  4709  0764  17B2               	bsf	(___ftmul@f2^(0+128)+1),7
  4710  0765  30FF               	movlw	255
  4711  0766  05B1               	andwf	___ftmul@f2^(0+128),f
  4712  0767  30FF               	movlw	255
  4713  0768  05B2               	andwf	(___ftmul@f2+1)^(0+128),f
  4714  0769  3000               	movlw	0
  4715  076A  05B3               	andwf	(___ftmul@f2+2)^(0+128),f
  4716  076B  3000               	movlw	0
  4717  076C  00B9               	movwf	___ftmul@f3_as_product^(0+128)
  4718  076D  3000               	movlw	0
  4719  076E  00BA               	movwf	(___ftmul@f3_as_product+1)^(0+128)
  4720  076F  3000               	movlw	0
  4721  0770  00BB               	movwf	(___ftmul@f3_as_product+2)^(0+128)
  4722  0771  3007               	movlw	7
  4723  0772  00B4               	movwf	??___ftmul^(0+128)
  4724  0773  0834               	movf	??___ftmul^(0+128),w
  4725  0774  00BC               	movwf	___ftmul@cntr^(0+128)
  4726  0775                     l2886:	
  4727  0775  1C2E               	btfss	___ftmul@f1^(0+128),0
  4728  0776  2F85               	goto	l2890
  4729  0777  0831               	movf	___ftmul@f2^(0+128),w
  4730  0778  07B9               	addwf	___ftmul@f3_as_product^(0+128),f
  4731  0779  0832               	movf	(___ftmul@f2+1)^(0+128),w
  4732  077A  1103               	clrz
  4733  077B  1803               	skipnc
  4734  077C  0A32               	incf	(___ftmul@f2+1)^(0+128),w
  4735  077D  1D03               	btfss	3,2
  4736  077E  07BA               	addwf	(___ftmul@f3_as_product+1)^(0+128),f
  4737  077F  0833               	movf	(___ftmul@f2+2)^(0+128),w
  4738  0780  1103               	clrz
  4739  0781  1803               	skipnc
  4740  0782  0A33               	incf	(___ftmul@f2+2)^(0+128),w
  4741  0783  1D03               	btfss	3,2
  4742  0784  07BB               	addwf	(___ftmul@f3_as_product+2)^(0+128),f
  4743  0785                     l2890:	
  4744  0785  3001               	movlw	1
  4745  0786                     u3985:	
  4746  0786  1003               	clrc
  4747  0787  0CB0               	rrf	(___ftmul@f1+2)^(0+128),f
  4748  0788  0CAF               	rrf	(___ftmul@f1+1)^(0+128),f
  4749  0789  0CAE               	rrf	___ftmul@f1^(0+128),f
  4750  078A  3EFF               	addlw	-1
  4751  078B  1D03               	skipz
  4752  078C  2F86               	goto	u3985
  4753  078D  3001               	movlw	1
  4754  078E                     u3995:	
  4755  078E  1003               	clrc
  4756  078F  0DB1               	rlf	___ftmul@f2^(0+128),f
  4757  0790  0DB2               	rlf	(___ftmul@f2+1)^(0+128),f
  4758  0791  0DB3               	rlf	(___ftmul@f2+2)^(0+128),f
  4759  0792  3EFF               	addlw	-1
  4760  0793  1D03               	skipz
  4761  0794  2F8E               	goto	u3995
  4762  0795  3001               	movlw	1
  4763  0796  02BC               	subwf	___ftmul@cntr^(0+128),f
  4764  0797  1D03               	btfss	3,2
  4765  0798  2F75               	goto	l2886
  4766  0799  3009               	movlw	9
  4767  079A  00B4               	movwf	??___ftmul^(0+128)
  4768  079B  0834               	movf	??___ftmul^(0+128),w
  4769  079C  00BC               	movwf	___ftmul@cntr^(0+128)
  4770  079D                     l2898:	
  4771  079D  1C2E               	btfss	___ftmul@f1^(0+128),0
  4772  079E  2FAD               	goto	l2902
  4773  079F  0831               	movf	___ftmul@f2^(0+128),w
  4774  07A0  07B9               	addwf	___ftmul@f3_as_product^(0+128),f
  4775  07A1  0832               	movf	(___ftmul@f2+1)^(0+128),w
  4776  07A2  1103               	clrz
  4777  07A3  1803               	skipnc
  4778  07A4  0A32               	incf	(___ftmul@f2+1)^(0+128),w
  4779  07A5  1D03               	btfss	3,2
  4780  07A6  07BA               	addwf	(___ftmul@f3_as_product+1)^(0+128),f
  4781  07A7  0833               	movf	(___ftmul@f2+2)^(0+128),w
  4782  07A8  1103               	clrz
  4783  07A9  1803               	skipnc
  4784  07AA  0A33               	incf	(___ftmul@f2+2)^(0+128),w
  4785  07AB  1D03               	btfss	3,2
  4786  07AC  07BB               	addwf	(___ftmul@f3_as_product+2)^(0+128),f
  4787  07AD                     l2902:	
  4788  07AD  3001               	movlw	1
  4789  07AE                     u4035:	
  4790  07AE  1003               	clrc
  4791  07AF  0CB0               	rrf	(___ftmul@f1+2)^(0+128),f
  4792  07B0  0CAF               	rrf	(___ftmul@f1+1)^(0+128),f
  4793  07B1  0CAE               	rrf	___ftmul@f1^(0+128),f
  4794  07B2  3EFF               	addlw	-1
  4795  07B3  1D03               	skipz
  4796  07B4  2FAE               	goto	u4035
  4797  07B5  3001               	movlw	1
  4798  07B6                     u4045:	
  4799  07B6  1003               	clrc
  4800  07B7  0CBB               	rrf	(___ftmul@f3_as_product+2)^(0+128),f
  4801  07B8  0CBA               	rrf	(___ftmul@f3_as_product+1)^(0+128),f
  4802  07B9  0CB9               	rrf	___ftmul@f3_as_product^(0+128),f
  4803  07BA  3EFF               	addlw	-1
  4804  07BB  1D03               	skipz
  4805  07BC  2FB6               	goto	u4045
  4806  07BD  3001               	movlw	1
  4807  07BE  02BC               	subwf	___ftmul@cntr^(0+128),f
  4808  07BF  1D03               	btfss	3,2
  4809  07C0  2F9D               	goto	l2898
  4810  07C1  0839               	movf	___ftmul@f3_as_product^(0+128),w
  4811  07C2  00A0               	movwf	___ftpack@arg^(0+128)
  4812  07C3  083A               	movf	(___ftmul@f3_as_product+1)^(0+128),w
  4813  07C4  00A1               	movwf	(___ftpack@arg+1)^(0+128)
  4814  07C5  083B               	movf	(___ftmul@f3_as_product+2)^(0+128),w
  4815  07C6  00A2               	movwf	(___ftpack@arg+2)^(0+128)
  4816  07C7  0838               	movf	___ftmul@exp^(0+128),w
  4817  07C8  00B4               	movwf	??___ftmul^(0+128)
  4818  07C9  0834               	movf	??___ftmul^(0+128),w
  4819  07CA  00A3               	movwf	___ftpack@exp^(0+128)
  4820  07CB  083D               	movf	___ftmul@sign^(0+128),w
  4821  07CC  00B5               	movwf	(??___ftmul+1)^(0+128)
  4822  07CD  0835               	movf	(??___ftmul+1)^(0+128),w
  4823  07CE  00A4               	movwf	___ftpack@sign^(0+128)
  4824  07CF  120A  158A  210B   	fcall	___ftpack
  4825  07D2  1683               	bsf	3,5	;RP0=1, select bank1
  4826  07D3  1303               	bcf	3,6	;RP1=0, select bank1
  4827  07D4  0820               	movf	?___ftpack^(0+128),w
  4828  07D5  00AE               	movwf	?___ftmul^(0+128)
  4829  07D6  0821               	movf	(?___ftpack+1)^(0+128),w
  4830  07D7  00AF               	movwf	(?___ftmul+1)^(0+128)
  4831  07D8  0822               	movf	(?___ftpack+2)^(0+128),w
  4832  07D9  00B0               	movwf	(?___ftmul+2)^(0+128)
  4833  07DA  0008               	return
  4834  07DB                     __end_of___ftmul:	
  4835                           
  4836                           	psect	text17
  4837  144E                     __ptext17:	
  4838 ;; *************** function ___bmul *****************
  4839 ;; Defined at:
  4840 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul8.c"
  4841 ;; Parameters:    Size  Location     Type
  4842 ;;  multiplier      1    wreg     unsigned char 
  4843 ;;  multiplicand    1    0[BANK1 ] unsigned char 
  4844 ;; Auto vars:     Size  Location     Type
  4845 ;;  multiplier      1    3[BANK1 ] unsigned char 
  4846 ;;  product         1    2[BANK1 ] unsigned char 
  4847 ;; Return value:  Size  Location     Type
  4848 ;;                  1    wreg      unsigned char 
  4849 ;; Registers used:
  4850 ;;		wreg, status,2, status,0
  4851 ;; Tracked objects:
  4852 ;;		On entry : 0/0
  4853 ;;		On exit  : 0/0
  4854 ;;		Unchanged: 0/0
  4855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4856 ;;      Params:         0       0       1       0       0
  4857 ;;      Locals:         0       0       2       0       0
  4858 ;;      Temps:          0       0       1       0       0
  4859 ;;      Totals:         0       0       4       0       0
  4860 ;;Total ram usage:        4 bytes
  4861 ;; Hardware stack levels used:    1
  4862 ;; Hardware stack levels required when called:    3
  4863 ;; This function calls:
  4864 ;;		Nothing
  4865 ;; This function is called by:
  4866 ;;		_eval_poly
  4867 ;; This function uses a non-reentrant model
  4868 ;;
  4869                           
  4870                           
  4871                           ;psect for function ___bmul
  4872  144E                     ___bmul:	
  4873                           
  4874                           ;incstack = 0
  4875 ;; hardware stack exceeded
  4876                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4877                           ;___bmul@multiplier stored from wreg
  4878  144E  1683               	bsf	3,5	;RP0=1, select bank1
  4879  144F  1303               	bcf	3,6	;RP1=0, select bank1
  4880  1450  00A3               	movwf	___bmul@multiplier^(0+128)
  4881  1451  01A2               	clrf	___bmul@product^(0+128)
  4882  1452                     l2764:	
  4883  1452  1C23               	btfss	___bmul@multiplier^(0+128),0
  4884  1453  2C58               	goto	l2768
  4885  1454  0820               	movf	___bmul@multiplicand^(0+128),w
  4886  1455  00A1               	movwf	??___bmul^(0+128)
  4887  1456  0821               	movf	??___bmul^(0+128),w
  4888  1457  07A2               	addwf	___bmul@product^(0+128),f
  4889  1458                     l2768:	
  4890  1458  1003               	clrc
  4891  1459  0DA0               	rlf	___bmul@multiplicand^(0+128),f
  4892  145A  1003               	clrc
  4893  145B  0CA3               	rrf	___bmul@multiplier^(0+128),f
  4894  145C  0823               	movf	___bmul@multiplier^(0+128),w
  4895  145D  1D03               	btfss	3,2
  4896  145E  2C52               	goto	l2764
  4897  145F  0822               	movf	___bmul@product^(0+128),w
  4898  1460  0008               	return
  4899  1461                     __end_of___bmul:	
  4900                           
  4901                           	psect	text18
  4902  14BE                     __ptext18:	
  4903 ;; *************** function ___ftsub *****************
  4904 ;; Defined at:
  4905 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftsub.c"
  4906 ;; Parameters:    Size  Location     Type
  4907 ;;  f2              3   43[BANK1 ] float 
  4908 ;;  f1              3   46[BANK1 ] float 
  4909 ;; Auto vars:     Size  Location     Type
  4910 ;;		None
  4911 ;; Return value:  Size  Location     Type
  4912 ;;                  3   43[BANK1 ] float 
  4913 ;; Registers used:
  4914 ;;		wreg, status,2, status,0, pclath, cstack
  4915 ;; Tracked objects:
  4916 ;;		On entry : 0/0
  4917 ;;		On exit  : 0/0
  4918 ;;		Unchanged: 0/0
  4919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4920 ;;      Params:         0       0       6       0       0
  4921 ;;      Locals:         0       0       0       0       0
  4922 ;;      Temps:          0       0       0       0       0
  4923 ;;      Totals:         0       0       6       0       0
  4924 ;;Total ram usage:        6 bytes
  4925 ;; Hardware stack levels used:    1
  4926 ;; Hardware stack levels required when called:    5
  4927 ;; This function calls:
  4928 ;;		___ftadd
  4929 ;; This function is called by:
  4930 ;;		_exp
  4931 ;; This function uses a non-reentrant model
  4932 ;;
  4933                           
  4934                           
  4935                           ;psect for function ___ftsub
  4936  14BE                     ___ftsub:	
  4937                           
  4938                           ;incstack = 0
  4939 ;; hardware stack exceeded
  4940                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  4941  14BE  1683               	bsf	3,5	;RP0=1, select bank1
  4942  14BF  1303               	bcf	3,6	;RP1=0, select bank1
  4943  14C0  084D               	movf	(___ftsub@f2+2)^(0+128),w
  4944  14C1  044C               	iorwf	(___ftsub@f2+1)^(0+128),w
  4945  14C2  044B               	iorwf	___ftsub@f2^(0+128),w
  4946  14C3  1903               	skipnz
  4947  14C4  2CC7               	goto	l2998
  4948  14C5  3080               	movlw	128
  4949  14C6  06CD               	xorwf	(___ftsub@f2+2)^(0+128),f
  4950  14C7                     l2998:	
  4951  14C7  084E               	movf	___ftsub@f1^(0+128),w
  4952  14C8  00BE               	movwf	___ftadd@f1^(0+128)
  4953  14C9  084F               	movf	(___ftsub@f1+1)^(0+128),w
  4954  14CA  00BF               	movwf	(___ftadd@f1+1)^(0+128)
  4955  14CB  0850               	movf	(___ftsub@f1+2)^(0+128),w
  4956  14CC  00C0               	movwf	(___ftadd@f1+2)^(0+128)
  4957  14CD  084B               	movf	___ftsub@f2^(0+128),w
  4958  14CE  00C1               	movwf	___ftadd@f2^(0+128)
  4959  14CF  084C               	movf	(___ftsub@f2+1)^(0+128),w
  4960  14D0  00C2               	movwf	(___ftadd@f2+1)^(0+128)
  4961  14D1  084D               	movf	(___ftsub@f2+2)^(0+128),w
  4962  14D2  00C3               	movwf	(___ftadd@f2+2)^(0+128)
  4963  14D3  120A  118A  25FF   	fcall	___ftadd
  4964  14D6  1683               	bsf	3,5	;RP0=1, select bank1
  4965  14D7  1303               	bcf	3,6	;RP1=0, select bank1
  4966  14D8  083E               	movf	?___ftadd^(0+128),w
  4967  14D9  00CB               	movwf	?___ftsub^(0+128)
  4968  14DA  083F               	movf	(?___ftadd+1)^(0+128),w
  4969  14DB  00CC               	movwf	(?___ftsub+1)^(0+128)
  4970  14DC  0840               	movf	(?___ftadd+2)^(0+128),w
  4971  14DD  00CD               	movwf	(?___ftsub+2)^(0+128)
  4972  14DE  0008               	return
  4973  14DF                     __end_of___ftsub:	
  4974                           
  4975                           	psect	text19
  4976  05FF                     __ptext19:	
  4977 ;; *************** function ___ftadd *****************
  4978 ;; Defined at:
  4979 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftadd.c"
  4980 ;; Parameters:    Size  Location     Type
  4981 ;;  f1              3   30[BANK1 ] float 
  4982 ;;  f2              3   33[BANK1 ] float 
  4983 ;; Auto vars:     Size  Location     Type
  4984 ;;  exp1            1   42[BANK1 ] unsigned char 
  4985 ;;  exp2            1   41[BANK1 ] unsigned char 
  4986 ;;  sign            1   40[BANK1 ] unsigned char 
  4987 ;; Return value:  Size  Location     Type
  4988 ;;                  3   30[BANK1 ] float 
  4989 ;; Registers used:
  4990 ;;		wreg, status,2, status,0, pclath, cstack
  4991 ;; Tracked objects:
  4992 ;;		On entry : 0/0
  4993 ;;		On exit  : 0/0
  4994 ;;		Unchanged: 0/0
  4995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4996 ;;      Params:         0       0       6       0       0
  4997 ;;      Locals:         0       0       3       0       0
  4998 ;;      Temps:          0       0       4       0       0
  4999 ;;      Totals:         0       0      13       0       0
  5000 ;;Total ram usage:       13 bytes
  5001 ;; Hardware stack levels used:    1
  5002 ;; Hardware stack levels required when called:    4
  5003 ;; This function calls:
  5004 ;;		___ftpack
  5005 ;; This function is called by:
  5006 ;;		___ftsub
  5007 ;;		_floor
  5008 ;;		_log
  5009 ;;		_eval_poly
  5010 ;; This function uses a non-reentrant model
  5011 ;;
  5012                           
  5013                           
  5014                           ;psect for function ___ftadd
  5015  05FF                     ___ftadd:	
  5016                           
  5017                           ;incstack = 0
  5018 ;; hardware stack exceeded
  5019                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  5020  05FF  1683               	bsf	3,5	;RP0=1, select bank1
  5021  0600  1303               	bcf	3,6	;RP1=0, select bank1
  5022  0601  083E               	movf	___ftadd@f1^(0+128),w
  5023  0602  00C4               	movwf	??___ftadd^(0+128)
  5024  0603  083F               	movf	(___ftadd@f1+1)^(0+128),w
  5025  0604  00C5               	movwf	(??___ftadd^(0+128)+1)
  5026  0605  0840               	movf	(___ftadd@f1+2)^(0+128),w
  5027  0606  00C6               	movwf	(??___ftadd^(0+128)+2)
  5028  0607  1003               	clrc
  5029  0608  0D45               	rlf	(??___ftadd^(0+128)+1),w
  5030  0609  0D46               	rlf	(??___ftadd^(0+128)+2),w
  5031  060A  00C7               	movwf	(??___ftadd+3)^(0+128)
  5032  060B  0847               	movf	(??___ftadd+3)^(0+128),w
  5033  060C  00CA               	movwf	___ftadd@exp1^(0+128)
  5034  060D  0841               	movf	___ftadd@f2^(0+128),w
  5035  060E  00C4               	movwf	??___ftadd^(0+128)
  5036  060F  0842               	movf	(___ftadd@f2+1)^(0+128),w
  5037  0610  00C5               	movwf	(??___ftadd^(0+128)+1)
  5038  0611  0843               	movf	(___ftadd@f2+2)^(0+128),w
  5039  0612  00C6               	movwf	(??___ftadd^(0+128)+2)
  5040  0613  1003               	clrc
  5041  0614  0D45               	rlf	(??___ftadd^(0+128)+1),w
  5042  0615  0D46               	rlf	(??___ftadd^(0+128)+2),w
  5043  0616  00C7               	movwf	(??___ftadd+3)^(0+128)
  5044  0617  0847               	movf	(??___ftadd+3)^(0+128),w
  5045  0618  00C9               	movwf	___ftadd@exp2^(0+128)
  5046  0619  084A               	movf	___ftadd@exp1^(0+128),w
  5047  061A  1903               	btfsc	3,2
  5048  061B  2E28               	goto	l2798
  5049  061C  0849               	movf	___ftadd@exp2^(0+128),w
  5050  061D  024A               	subwf	___ftadd@exp1^(0+128),w
  5051  061E  1803               	skipnc
  5052  061F  2E2F               	goto	l2802
  5053  0620  034A               	decf	___ftadd@exp1^(0+128),w
  5054  0621  3AFF               	xorlw	255
  5055  0622  0749               	addwf	___ftadd@exp2^(0+128),w
  5056  0623  00C4               	movwf	??___ftadd^(0+128)
  5057  0624  3019               	movlw	25
  5058  0625  0244               	subwf	??___ftadd^(0+128),w
  5059  0626  1C03               	skipc
  5060  0627  2E2F               	goto	l2802
  5061  0628                     l2798:	
  5062  0628  0841               	movf	___ftadd@f2^(0+128),w
  5063  0629  00BE               	movwf	?___ftadd^(0+128)
  5064  062A  0842               	movf	(___ftadd@f2+1)^(0+128),w
  5065  062B  00BF               	movwf	(?___ftadd+1)^(0+128)
  5066  062C  0843               	movf	(___ftadd@f2+2)^(0+128),w
  5067  062D  00C0               	movwf	(?___ftadd+2)^(0+128)
  5068  062E  0008               	return
  5069  062F                     l2802:	
  5070  062F  0849               	movf	___ftadd@exp2^(0+128),w
  5071  0630  1903               	btfsc	3,2
  5072  0631  0008               	return
  5073  0632  084A               	movf	___ftadd@exp1^(0+128),w
  5074  0633  0249               	subwf	___ftadd@exp2^(0+128),w
  5075  0634  1803               	skipnc
  5076  0635  2E3E               	goto	l2808
  5077  0636  0349               	decf	___ftadd@exp2^(0+128),w
  5078  0637  3AFF               	xorlw	255
  5079  0638  074A               	addwf	___ftadd@exp1^(0+128),w
  5080  0639  00C4               	movwf	??___ftadd^(0+128)
  5081  063A  3019               	movlw	25
  5082  063B  0244               	subwf	??___ftadd^(0+128),w
  5083  063C  1803               	btfsc	3,0
  5084  063D  0008               	return
  5085  063E                     l2808:	
  5086  063E  3006               	movlw	6
  5087  063F  00C4               	movwf	??___ftadd^(0+128)
  5088  0640  0844               	movf	??___ftadd^(0+128),w
  5089  0641  00C8               	movwf	___ftadd@sign^(0+128)
  5090  0642  1BC0               	btfsc	(___ftadd@f1+2)^(0+128),7
  5091  0643  17C8               	bsf	___ftadd@sign^(0+128),7
  5092  0644  1BC3               	btfsc	(___ftadd@f2+2)^(0+128),7
  5093  0645  1748               	bsf	___ftadd@sign^(0+128),6
  5094  0646  17BF               	bsf	(___ftadd@f1^(0+128)+1),7
  5095  0647  30FF               	movlw	255
  5096  0648  05BE               	andwf	___ftadd@f1^(0+128),f
  5097  0649  30FF               	movlw	255
  5098  064A  05BF               	andwf	(___ftadd@f1+1)^(0+128),f
  5099  064B  3000               	movlw	0
  5100  064C  05C0               	andwf	(___ftadd@f1+2)^(0+128),f
  5101  064D  17C2               	bsf	(___ftadd@f2^(0+128)+1),7
  5102  064E  30FF               	movlw	255
  5103  064F  05C1               	andwf	___ftadd@f2^(0+128),f
  5104  0650  30FF               	movlw	255
  5105  0651  05C2               	andwf	(___ftadd@f2+1)^(0+128),f
  5106  0652  3000               	movlw	0
  5107  0653  05C3               	andwf	(___ftadd@f2+2)^(0+128),f
  5108  0654  0849               	movf	___ftadd@exp2^(0+128),w
  5109  0655  024A               	subwf	___ftadd@exp1^(0+128),w
  5110  0656  1803               	skipnc
  5111  0657  2E7E               	goto	l2830
  5112  0658                     l2820:	
  5113  0658  3001               	movlw	1
  5114  0659                     u3775:	
  5115  0659  1003               	clrc
  5116  065A  0DC1               	rlf	___ftadd@f2^(0+128),f
  5117  065B  0DC2               	rlf	(___ftadd@f2+1)^(0+128),f
  5118  065C  0DC3               	rlf	(___ftadd@f2+2)^(0+128),f
  5119  065D  3EFF               	addlw	-1
  5120  065E  1D03               	skipz
  5121  065F  2E59               	goto	u3775
  5122  0660  3001               	movlw	1
  5123  0661  02C9               	subwf	___ftadd@exp2^(0+128),f
  5124  0662  0849               	movf	___ftadd@exp2^(0+128),w
  5125  0663  064A               	xorwf	___ftadd@exp1^(0+128),w
  5126  0664  1903               	skipnz
  5127  0665  2E79               	goto	l2828
  5128  0666  3001               	movlw	1
  5129  0667  02C8               	subwf	___ftadd@sign^(0+128),f
  5130  0668  0848               	movf	___ftadd@sign^(0+128),w
  5131  0669  3907               	andlw	7
  5132  066A  1903               	btfsc	3,2
  5133  066B  2E79               	goto	l2828
  5134  066C  2E58               	goto	l2820
  5135  066D                     l2826:	
  5136  066D  3001               	movlw	1
  5137  066E                     u3805:	
  5138  066E  1003               	clrc
  5139  066F  0CC0               	rrf	(___ftadd@f1+2)^(0+128),f
  5140  0670  0CBF               	rrf	(___ftadd@f1+1)^(0+128),f
  5141  0671  0CBE               	rrf	___ftadd@f1^(0+128),f
  5142  0672  3EFF               	addlw	-1
  5143  0673  1D03               	skipz
  5144  0674  2E6E               	goto	u3805
  5145  0675  3001               	movlw	1
  5146  0676  00C4               	movwf	??___ftadd^(0+128)
  5147  0677  0844               	movf	??___ftadd^(0+128),w
  5148  0678  07CA               	addwf	___ftadd@exp1^(0+128),f
  5149  0679                     l2828:	
  5150  0679  084A               	movf	___ftadd@exp1^(0+128),w
  5151  067A  0649               	xorwf	___ftadd@exp2^(0+128),w
  5152  067B  1903               	btfsc	3,2
  5153  067C  2EA7               	goto	l407
  5154  067D  2E6D               	goto	l2826
  5155  067E                     l2830:	
  5156  067E  084A               	movf	___ftadd@exp1^(0+128),w
  5157  067F  0249               	subwf	___ftadd@exp2^(0+128),w
  5158  0680  1803               	skipnc
  5159  0681  2EA7               	goto	l407
  5160  0682                     l2832:	
  5161  0682  3001               	movlw	1
  5162  0683                     u3835:	
  5163  0683  1003               	clrc
  5164  0684  0DBE               	rlf	___ftadd@f1^(0+128),f
  5165  0685  0DBF               	rlf	(___ftadd@f1+1)^(0+128),f
  5166  0686  0DC0               	rlf	(___ftadd@f1+2)^(0+128),f
  5167  0687  3EFF               	addlw	-1
  5168  0688  1D03               	skipz
  5169  0689  2E83               	goto	u3835
  5170  068A  3001               	movlw	1
  5171  068B  02CA               	subwf	___ftadd@exp1^(0+128),f
  5172  068C  0849               	movf	___ftadd@exp2^(0+128),w
  5173  068D  064A               	xorwf	___ftadd@exp1^(0+128),w
  5174  068E  1903               	skipnz
  5175  068F  2EA3               	goto	l2840
  5176  0690  3001               	movlw	1
  5177  0691  02C8               	subwf	___ftadd@sign^(0+128),f
  5178  0692  0848               	movf	___ftadd@sign^(0+128),w
  5179  0693  3907               	andlw	7
  5180  0694  1903               	btfsc	3,2
  5181  0695  2EA3               	goto	l2840
  5182  0696  2E82               	goto	l2832
  5183  0697                     l2838:	
  5184  0697  3001               	movlw	1
  5185  0698                     u3865:	
  5186  0698  1003               	clrc
  5187  0699  0CC3               	rrf	(___ftadd@f2+2)^(0+128),f
  5188  069A  0CC2               	rrf	(___ftadd@f2+1)^(0+128),f
  5189  069B  0CC1               	rrf	___ftadd@f2^(0+128),f
  5190  069C  3EFF               	addlw	-1
  5191  069D  1D03               	skipz
  5192  069E  2E98               	goto	u3865
  5193  069F  3001               	movlw	1
  5194  06A0  00C4               	movwf	??___ftadd^(0+128)
  5195  06A1  0844               	movf	??___ftadd^(0+128),w
  5196  06A2  07C9               	addwf	___ftadd@exp2^(0+128),f
  5197  06A3                     l2840:	
  5198  06A3  084A               	movf	___ftadd@exp1^(0+128),w
  5199  06A4  0649               	xorwf	___ftadd@exp2^(0+128),w
  5200  06A5  1D03               	skipz
  5201  06A6  2E97               	goto	l2838
  5202  06A7                     l407:	
  5203  06A7  1FC8               	btfss	___ftadd@sign^(0+128),7
  5204  06A8  2EB9               	goto	l2844
  5205  06A9  30FF               	movlw	255
  5206  06AA  06BE               	xorwf	___ftadd@f1^(0+128),f
  5207  06AB  30FF               	movlw	255
  5208  06AC  06BF               	xorwf	(___ftadd@f1+1)^(0+128),f
  5209  06AD  30FF               	movlw	255
  5210  06AE  06C0               	xorwf	(___ftadd@f1+2)^(0+128),f
  5211  06AF  3001               	movlw	1
  5212  06B0  07BE               	addwf	___ftadd@f1^(0+128),f
  5213  06B1  3000               	movlw	0
  5214  06B2  1803               	skipnc
  5215  06B3  3001               	movlw	1
  5216  06B4  07BF               	addwf	(___ftadd@f1+1)^(0+128),f
  5217  06B5  3000               	movlw	0
  5218  06B6  1803               	skipnc
  5219  06B7  3001               	movlw	1
  5220  06B8  07C0               	addwf	(___ftadd@f1+2)^(0+128),f
  5221  06B9                     l2844:	
  5222  06B9  1F48               	btfss	___ftadd@sign^(0+128),6
  5223  06BA  2ECB               	goto	l2848
  5224  06BB  30FF               	movlw	255
  5225  06BC  06C1               	xorwf	___ftadd@f2^(0+128),f
  5226  06BD  30FF               	movlw	255
  5227  06BE  06C2               	xorwf	(___ftadd@f2+1)^(0+128),f
  5228  06BF  30FF               	movlw	255
  5229  06C0  06C3               	xorwf	(___ftadd@f2+2)^(0+128),f
  5230  06C1  3001               	movlw	1
  5231  06C2  07C1               	addwf	___ftadd@f2^(0+128),f
  5232  06C3  3000               	movlw	0
  5233  06C4  1803               	skipnc
  5234  06C5  3001               	movlw	1
  5235  06C6  07C2               	addwf	(___ftadd@f2+1)^(0+128),f
  5236  06C7  3000               	movlw	0
  5237  06C8  1803               	skipnc
  5238  06C9  3001               	movlw	1
  5239  06CA  07C3               	addwf	(___ftadd@f2+2)^(0+128),f
  5240  06CB                     l2848:	
  5241  06CB  01C8               	clrf	___ftadd@sign^(0+128)
  5242  06CC  083E               	movf	___ftadd@f1^(0+128),w
  5243  06CD  07C1               	addwf	___ftadd@f2^(0+128),f
  5244  06CE  083F               	movf	(___ftadd@f1+1)^(0+128),w
  5245  06CF  1103               	clrz
  5246  06D0  1803               	skipnc
  5247  06D1  0A3F               	incf	(___ftadd@f1+1)^(0+128),w
  5248  06D2  1D03               	btfss	3,2
  5249  06D3  07C2               	addwf	(___ftadd@f2+1)^(0+128),f
  5250  06D4  0840               	movf	(___ftadd@f1+2)^(0+128),w
  5251  06D5  1103               	clrz
  5252  06D6  1803               	skipnc
  5253  06D7  0A40               	incf	(___ftadd@f1+2)^(0+128),w
  5254  06D8  1D03               	btfss	3,2
  5255  06D9  07C3               	addwf	(___ftadd@f2+2)^(0+128),f
  5256  06DA  1FC3               	btfss	(___ftadd@f2+2)^(0+128),7
  5257  06DB  2EEE               	goto	l2858
  5258  06DC  30FF               	movlw	255
  5259  06DD  06C1               	xorwf	___ftadd@f2^(0+128),f
  5260  06DE  30FF               	movlw	255
  5261  06DF  06C2               	xorwf	(___ftadd@f2+1)^(0+128),f
  5262  06E0  30FF               	movlw	255
  5263  06E1  06C3               	xorwf	(___ftadd@f2+2)^(0+128),f
  5264  06E2  3001               	movlw	1
  5265  06E3  07C1               	addwf	___ftadd@f2^(0+128),f
  5266  06E4  3000               	movlw	0
  5267  06E5  1803               	skipnc
  5268  06E6  3001               	movlw	1
  5269  06E7  07C2               	addwf	(___ftadd@f2+1)^(0+128),f
  5270  06E8  3000               	movlw	0
  5271  06E9  1803               	skipnc
  5272  06EA  3001               	movlw	1
  5273  06EB  07C3               	addwf	(___ftadd@f2+2)^(0+128),f
  5274  06EC  01C8               	clrf	___ftadd@sign^(0+128)
  5275  06ED  0AC8               	incf	___ftadd@sign^(0+128),f
  5276  06EE                     l2858:	
  5277  06EE  0841               	movf	___ftadd@f2^(0+128),w
  5278  06EF  00A0               	movwf	___ftpack@arg^(0+128)
  5279  06F0  0842               	movf	(___ftadd@f2+1)^(0+128),w
  5280  06F1  00A1               	movwf	(___ftpack@arg+1)^(0+128)
  5281  06F2  0843               	movf	(___ftadd@f2+2)^(0+128),w
  5282  06F3  00A2               	movwf	(___ftpack@arg+2)^(0+128)
  5283  06F4  084A               	movf	___ftadd@exp1^(0+128),w
  5284  06F5  00C4               	movwf	??___ftadd^(0+128)
  5285  06F6  0844               	movf	??___ftadd^(0+128),w
  5286  06F7  00A3               	movwf	___ftpack@exp^(0+128)
  5287  06F8  0848               	movf	___ftadd@sign^(0+128),w
  5288  06F9  00C5               	movwf	(??___ftadd+1)^(0+128)
  5289  06FA  0845               	movf	(??___ftadd+1)^(0+128),w
  5290  06FB  00A4               	movwf	___ftpack@sign^(0+128)
  5291  06FC  120A  158A  210B   	fcall	___ftpack
  5292  06FF  1683               	bsf	3,5	;RP0=1, select bank1
  5293  0700  1303               	bcf	3,6	;RP1=0, select bank1
  5294  0701  0820               	movf	?___ftpack^(0+128),w
  5295  0702  00BE               	movwf	?___ftadd^(0+128)
  5296  0703  0821               	movf	(?___ftpack+1)^(0+128),w
  5297  0704  00BF               	movwf	(?___ftadd+1)^(0+128)
  5298  0705  0822               	movf	(?___ftpack+2)^(0+128),w
  5299  0706  00C0               	movwf	(?___ftadd+2)^(0+128)
  5300  0707  0008               	return
  5301  0708                     __end_of___ftadd:	
  5302                           
  5303                           	psect	text20
  5304  0DAA                     __ptext20:	
  5305 ;; *************** function ___ftdiv *****************
  5306 ;; Defined at:
  5307 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdiv.c"
  5308 ;; Parameters:    Size  Location     Type
  5309 ;;  f2              3   30[BANK1 ] float 
  5310 ;;  f1              3   33[BANK1 ] float 
  5311 ;; Auto vars:     Size  Location     Type
  5312 ;;  f3              3   41[BANK1 ] float 
  5313 ;;  sign            1   45[BANK1 ] unsigned char 
  5314 ;;  exp             1   44[BANK1 ] unsigned char 
  5315 ;;  cntr            1   40[BANK1 ] unsigned char 
  5316 ;; Return value:  Size  Location     Type
  5317 ;;                  3   30[BANK1 ] float 
  5318 ;; Registers used:
  5319 ;;		wreg, status,2, status,0, pclath, cstack
  5320 ;; Tracked objects:
  5321 ;;		On entry : 0/0
  5322 ;;		On exit  : 0/0
  5323 ;;		Unchanged: 0/0
  5324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5325 ;;      Params:         0       0       6       0       0
  5326 ;;      Locals:         0       0       6       0       0
  5327 ;;      Temps:          0       0       4       0       0
  5328 ;;      Totals:         0       0      16       0       0
  5329 ;;Total ram usage:       16 bytes
  5330 ;; Hardware stack levels used:    1
  5331 ;; Hardware stack levels required when called:    4
  5332 ;; This function calls:
  5333 ;;		___ftpack
  5334 ;; This function is called by:
  5335 ;;		_analogRead
  5336 ;;		_exp
  5337 ;; This function uses a non-reentrant model
  5338 ;;
  5339                           
  5340                           
  5341                           ;psect for function ___ftdiv
  5342  0DAA                     ___ftdiv:	
  5343                           
  5344                           ;incstack = 0
  5345 ;; hardware stack exceeded
  5346                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  5347  0DAA  1683               	bsf	3,5	;RP0=1, select bank1
  5348  0DAB  1303               	bcf	3,6	;RP1=0, select bank1
  5349  0DAC  0841               	movf	___ftdiv@f1^(0+128),w
  5350  0DAD  00C4               	movwf	??___ftdiv^(0+128)
  5351  0DAE  0842               	movf	(___ftdiv@f1+1)^(0+128),w
  5352  0DAF  00C5               	movwf	(??___ftdiv^(0+128)+1)
  5353  0DB0  0843               	movf	(___ftdiv@f1+2)^(0+128),w
  5354  0DB1  00C6               	movwf	(??___ftdiv^(0+128)+2)
  5355  0DB2  1003               	clrc
  5356  0DB3  0D45               	rlf	(??___ftdiv^(0+128)+1),w
  5357  0DB4  0D46               	rlf	(??___ftdiv^(0+128)+2),w
  5358  0DB5  00C7               	movwf	(??___ftdiv+3)^(0+128)
  5359  0DB6  0847               	movf	(??___ftdiv+3)^(0+128),w
  5360  0DB7  00CC               	movwf	___ftdiv@exp^(0+128)
  5361  0DB8  084C               	movf	___ftdiv@exp^(0+128),w
  5362  0DB9  1D03               	btfss	3,2
  5363  0DBA  2DC2               	goto	l2958
  5364  0DBB  3000               	movlw	0
  5365  0DBC  00BE               	movwf	?___ftdiv^(0+128)
  5366  0DBD  3000               	movlw	0
  5367  0DBE  00BF               	movwf	(?___ftdiv+1)^(0+128)
  5368  0DBF  3000               	movlw	0
  5369  0DC0  00C0               	movwf	(?___ftdiv+2)^(0+128)
  5370  0DC1  0008               	return
  5371  0DC2                     l2958:	
  5372  0DC2  083E               	movf	___ftdiv@f2^(0+128),w
  5373  0DC3  00C4               	movwf	??___ftdiv^(0+128)
  5374  0DC4  083F               	movf	(___ftdiv@f2+1)^(0+128),w
  5375  0DC5  00C5               	movwf	(??___ftdiv^(0+128)+1)
  5376  0DC6  0840               	movf	(___ftdiv@f2+2)^(0+128),w
  5377  0DC7  00C6               	movwf	(??___ftdiv^(0+128)+2)
  5378  0DC8  1003               	clrc
  5379  0DC9  0D45               	rlf	(??___ftdiv^(0+128)+1),w
  5380  0DCA  0D46               	rlf	(??___ftdiv^(0+128)+2),w
  5381  0DCB  00C7               	movwf	(??___ftdiv+3)^(0+128)
  5382  0DCC  0847               	movf	(??___ftdiv+3)^(0+128),w
  5383  0DCD  00CD               	movwf	___ftdiv@sign^(0+128)
  5384  0DCE  084D               	movf	___ftdiv@sign^(0+128),w
  5385  0DCF  1D03               	btfss	3,2
  5386  0DD0  2DD8               	goto	l2964
  5387  0DD1  3000               	movlw	0
  5388  0DD2  00BE               	movwf	?___ftdiv^(0+128)
  5389  0DD3  3000               	movlw	0
  5390  0DD4  00BF               	movwf	(?___ftdiv+1)^(0+128)
  5391  0DD5  3000               	movlw	0
  5392  0DD6  00C0               	movwf	(?___ftdiv+2)^(0+128)
  5393  0DD7  0008               	return
  5394  0DD8                     l2964:	
  5395  0DD8  3000               	movlw	0
  5396  0DD9  00C9               	movwf	___ftdiv@f3^(0+128)
  5397  0DDA  3000               	movlw	0
  5398  0DDB  00CA               	movwf	(___ftdiv@f3+1)^(0+128)
  5399  0DDC  3000               	movlw	0
  5400  0DDD  00CB               	movwf	(___ftdiv@f3+2)^(0+128)
  5401  0DDE  3089               	movlw	137
  5402  0DDF  074D               	addwf	___ftdiv@sign^(0+128),w
  5403  0DE0  00C4               	movwf	??___ftdiv^(0+128)
  5404  0DE1  0844               	movf	??___ftdiv^(0+128),w
  5405  0DE2  02CC               	subwf	___ftdiv@exp^(0+128),f
  5406  0DE3  0841               	movf	___ftdiv@f1^(0+128),w
  5407  0DE4  00C4               	movwf	??___ftdiv^(0+128)
  5408  0DE5  0842               	movf	(___ftdiv@f1+1)^(0+128),w
  5409  0DE6  00C5               	movwf	(??___ftdiv^(0+128)+1)
  5410  0DE7  0843               	movf	(___ftdiv@f1+2)^(0+128),w
  5411  0DE8  00C6               	movwf	(??___ftdiv^(0+128)+2)
  5412  0DE9  3010               	movlw	16
  5413  0DEA                     u4115:	
  5414  0DEA  1003               	clrc
  5415  0DEB  0CC6               	rrf	(??___ftdiv^(0+128)+2),f
  5416  0DEC  0CC5               	rrf	(??___ftdiv^(0+128)+1),f
  5417  0DED  0CC4               	rrf	??___ftdiv^(0+128),f
  5418  0DEE  3EFF               	addlw	-1
  5419  0DEF  1D03               	skipz
  5420  0DF0  2DEA               	goto	u4115
  5421  0DF1  0844               	movf	??___ftdiv^(0+128),w
  5422  0DF2  00C7               	movwf	(??___ftdiv+3)^(0+128)
  5423  0DF3  0847               	movf	(??___ftdiv+3)^(0+128),w
  5424  0DF4  00CD               	movwf	___ftdiv@sign^(0+128)
  5425  0DF5  083E               	movf	___ftdiv@f2^(0+128),w
  5426  0DF6  00C4               	movwf	??___ftdiv^(0+128)
  5427  0DF7  083F               	movf	(___ftdiv@f2+1)^(0+128),w
  5428  0DF8  00C5               	movwf	(??___ftdiv^(0+128)+1)
  5429  0DF9  0840               	movf	(___ftdiv@f2+2)^(0+128),w
  5430  0DFA  00C6               	movwf	(??___ftdiv^(0+128)+2)
  5431  0DFB  3010               	movlw	16
  5432  0DFC                     u4125:	
  5433  0DFC  1003               	clrc
  5434  0DFD  0CC6               	rrf	(??___ftdiv^(0+128)+2),f
  5435  0DFE  0CC5               	rrf	(??___ftdiv^(0+128)+1),f
  5436  0DFF  0CC4               	rrf	??___ftdiv^(0+128),f
  5437  0E00  3EFF               	addlw	-1
  5438  0E01  1D03               	skipz
  5439  0E02  2DFC               	goto	u4125
  5440  0E03  0844               	movf	??___ftdiv^(0+128),w
  5441  0E04  00C7               	movwf	(??___ftdiv+3)^(0+128)
  5442  0E05  0847               	movf	(??___ftdiv+3)^(0+128),w
  5443  0E06  06CD               	xorwf	___ftdiv@sign^(0+128),f
  5444  0E07  3080               	movlw	128
  5445  0E08  00C4               	movwf	??___ftdiv^(0+128)
  5446  0E09  0844               	movf	??___ftdiv^(0+128),w
  5447  0E0A  05CD               	andwf	___ftdiv@sign^(0+128),f
  5448  0E0B  17C2               	bsf	(___ftdiv@f1^(0+128)+1),7
  5449  0E0C  30FF               	movlw	255
  5450  0E0D  05C1               	andwf	___ftdiv@f1^(0+128),f
  5451  0E0E  30FF               	movlw	255
  5452  0E0F  05C2               	andwf	(___ftdiv@f1+1)^(0+128),f
  5453  0E10  3000               	movlw	0
  5454  0E11  05C3               	andwf	(___ftdiv@f1+2)^(0+128),f
  5455  0E12  17BF               	bsf	(___ftdiv@f2^(0+128)+1),7
  5456  0E13  30FF               	movlw	255
  5457  0E14  05BE               	andwf	___ftdiv@f2^(0+128),f
  5458  0E15  30FF               	movlw	255
  5459  0E16  05BF               	andwf	(___ftdiv@f2+1)^(0+128),f
  5460  0E17  3000               	movlw	0
  5461  0E18  05C0               	andwf	(___ftdiv@f2+2)^(0+128),f
  5462  0E19  3018               	movlw	24
  5463  0E1A  00C4               	movwf	??___ftdiv^(0+128)
  5464  0E1B  0844               	movf	??___ftdiv^(0+128),w
  5465  0E1C  00C8               	movwf	___ftdiv@cntr^(0+128)
  5466  0E1D                     l2978:	
  5467  0E1D  3001               	movlw	1
  5468  0E1E                     u4135:	
  5469  0E1E  1003               	clrc
  5470  0E1F  0DC9               	rlf	___ftdiv@f3^(0+128),f
  5471  0E20  0DCA               	rlf	(___ftdiv@f3+1)^(0+128),f
  5472  0E21  0DCB               	rlf	(___ftdiv@f3+2)^(0+128),f
  5473  0E22  3EFF               	addlw	-1
  5474  0E23  1D03               	skipz
  5475  0E24  2E1E               	goto	u4135
  5476  0E25  0840               	movf	(___ftdiv@f2+2)^(0+128),w
  5477  0E26  0243               	subwf	(___ftdiv@f1+2)^(0+128),w
  5478  0E27  1D03               	skipz
  5479  0E28  2E2F               	goto	u4145
  5480  0E29  083F               	movf	(___ftdiv@f2+1)^(0+128),w
  5481  0E2A  0242               	subwf	(___ftdiv@f1+1)^(0+128),w
  5482  0E2B  1D03               	skipz
  5483  0E2C  2E2F               	goto	u4145
  5484  0E2D  083E               	movf	___ftdiv@f2^(0+128),w
  5485  0E2E  0241               	subwf	___ftdiv@f1^(0+128),w
  5486  0E2F                     u4145:	
  5487  0E2F  1C03               	skipc
  5488  0E30  2E3C               	goto	l2986
  5489  0E31  083E               	movf	___ftdiv@f2^(0+128),w
  5490  0E32  02C1               	subwf	___ftdiv@f1^(0+128),f
  5491  0E33  083F               	movf	(___ftdiv@f2+1)^(0+128),w
  5492  0E34  1C03               	skipc
  5493  0E35  0F3F               	incfsz	(___ftdiv@f2+1)^(0+128),w
  5494  0E36  02C2               	subwf	(___ftdiv@f1+1)^(0+128),f
  5495  0E37  0840               	movf	(___ftdiv@f2+2)^(0+128),w
  5496  0E38  1C03               	skipc
  5497  0E39  0A40               	incf	(___ftdiv@f2+2)^(0+128),w
  5498  0E3A  02C3               	subwf	(___ftdiv@f1+2)^(0+128),f
  5499  0E3B  1449               	bsf	___ftdiv@f3^(0+128),0
  5500  0E3C                     l2986:	
  5501  0E3C  3001               	movlw	1
  5502  0E3D                     u4155:	
  5503  0E3D  1003               	clrc
  5504  0E3E  0DC1               	rlf	___ftdiv@f1^(0+128),f
  5505  0E3F  0DC2               	rlf	(___ftdiv@f1+1)^(0+128),f
  5506  0E40  0DC3               	rlf	(___ftdiv@f1+2)^(0+128),f
  5507  0E41  3EFF               	addlw	-1
  5508  0E42  1D03               	skipz
  5509  0E43  2E3D               	goto	u4155
  5510  0E44  3001               	movlw	1
  5511  0E45  02C8               	subwf	___ftdiv@cntr^(0+128),f
  5512  0E46  1D03               	btfss	3,2
  5513  0E47  2E1D               	goto	l2978
  5514  0E48  0849               	movf	___ftdiv@f3^(0+128),w
  5515  0E49  00A0               	movwf	___ftpack@arg^(0+128)
  5516  0E4A  084A               	movf	(___ftdiv@f3+1)^(0+128),w
  5517  0E4B  00A1               	movwf	(___ftpack@arg+1)^(0+128)
  5518  0E4C  084B               	movf	(___ftdiv@f3+2)^(0+128),w
  5519  0E4D  00A2               	movwf	(___ftpack@arg+2)^(0+128)
  5520  0E4E  084C               	movf	___ftdiv@exp^(0+128),w
  5521  0E4F  00C4               	movwf	??___ftdiv^(0+128)
  5522  0E50  0844               	movf	??___ftdiv^(0+128),w
  5523  0E51  00A3               	movwf	___ftpack@exp^(0+128)
  5524  0E52  084D               	movf	___ftdiv@sign^(0+128),w
  5525  0E53  00C5               	movwf	(??___ftdiv+1)^(0+128)
  5526  0E54  0845               	movf	(??___ftdiv+1)^(0+128),w
  5527  0E55  00A4               	movwf	___ftpack@sign^(0+128)
  5528  0E56  120A  158A  210B   	fcall	___ftpack
  5529  0E59  1683               	bsf	3,5	;RP0=1, select bank1
  5530  0E5A  1303               	bcf	3,6	;RP1=0, select bank1
  5531  0E5B  0820               	movf	?___ftpack^(0+128),w
  5532  0E5C  00BE               	movwf	?___ftdiv^(0+128)
  5533  0E5D  0821               	movf	(?___ftpack+1)^(0+128),w
  5534  0E5E  00BF               	movwf	(?___ftdiv+1)^(0+128)
  5535  0E5F  0822               	movf	(?___ftpack+2)^(0+128),w
  5536  0E60  00C0               	movwf	(?___ftdiv+2)^(0+128)
  5537  0E61  0008               	return
  5538  0E62                     __end_of___ftdiv:	
  5539                           
  5540                           	psect	text21
  5541  07DB                     __ptext21:	
  5542 ;; *************** function ___awtoft *****************
  5543 ;; Defined at:
  5544 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awtoft.c"
  5545 ;; Parameters:    Size  Location     Type
  5546 ;;  c               2    8[BANK1 ] int 
  5547 ;; Auto vars:     Size  Location     Type
  5548 ;;  sign            1   13[BANK1 ] unsigned char 
  5549 ;; Return value:  Size  Location     Type
  5550 ;;                  3    8[BANK1 ] float 
  5551 ;; Registers used:
  5552 ;;		wreg, status,2, status,0, pclath, cstack
  5553 ;; Tracked objects:
  5554 ;;		On entry : 0/0
  5555 ;;		On exit  : 0/0
  5556 ;;		Unchanged: 0/0
  5557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5558 ;;      Params:         0       0       3       0       0
  5559 ;;      Locals:         0       0       1       0       0
  5560 ;;      Temps:          0       0       2       0       0
  5561 ;;      Totals:         0       0       6       0       0
  5562 ;;Total ram usage:        6 bytes
  5563 ;; Hardware stack levels used:    1
  5564 ;; Hardware stack levels required when called:    4
  5565 ;; This function calls:
  5566 ;;		___ftpack
  5567 ;; This function is called by:
  5568 ;;		_analogRead
  5569 ;;		_Process
  5570 ;;		_exp
  5571 ;;		_log
  5572 ;; This function uses a non-reentrant model
  5573 ;;
  5574                           
  5575                           
  5576                           ;psect for function ___awtoft
  5577  07DB                     ___awtoft:	
  5578                           
  5579                           ;incstack = 0
  5580 ;; hardware stack exceeded
  5581                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  5582  07DB  1683               	bsf	3,5	;RP0=1, select bank1
  5583  07DC  1303               	bcf	3,6	;RP1=0, select bank1
  5584  07DD  01AD               	clrf	___awtoft@sign^(0+128)
  5585  07DE  1FA9               	btfss	(___awtoft@c+1)^(0+128),7
  5586  07DF  2FE7               	goto	l2948
  5587  07E0  09A8               	comf	___awtoft@c^(0+128),f
  5588  07E1  09A9               	comf	(___awtoft@c+1)^(0+128),f
  5589  07E2  0AA8               	incf	___awtoft@c^(0+128),f
  5590  07E3  1903               	skipnz
  5591  07E4  0AA9               	incf	(___awtoft@c+1)^(0+128),f
  5592  07E5  01AD               	clrf	___awtoft@sign^(0+128)
  5593  07E6  0AAD               	incf	___awtoft@sign^(0+128),f
  5594  07E7                     l2948:	
  5595  07E7  0828               	movf	___awtoft@c^(0+128),w
  5596  07E8  00A0               	movwf	___ftpack@arg^(0+128)
  5597  07E9  0829               	movf	(___awtoft@c+1)^(0+128),w
  5598  07EA  00A1               	movwf	(___ftpack@arg+1)^(0+128)
  5599  07EB  01A2               	clrf	(___ftpack@arg+2)^(0+128)
  5600  07EC  308E               	movlw	142
  5601  07ED  00AB               	movwf	??___awtoft^(0+128)
  5602  07EE  082B               	movf	??___awtoft^(0+128),w
  5603  07EF  00A3               	movwf	___ftpack@exp^(0+128)
  5604  07F0  082D               	movf	___awtoft@sign^(0+128),w
  5605  07F1  00AC               	movwf	(??___awtoft+1)^(0+128)
  5606  07F2  082C               	movf	(??___awtoft+1)^(0+128),w
  5607  07F3  00A4               	movwf	___ftpack@sign^(0+128)
  5608  07F4  120A  158A  210B   	fcall	___ftpack
  5609  07F7  1683               	bsf	3,5	;RP0=1, select bank1
  5610  07F8  1303               	bcf	3,6	;RP1=0, select bank1
  5611  07F9  0820               	movf	?___ftpack^(0+128),w
  5612  07FA  00A8               	movwf	?___awtoft^(0+128)
  5613  07FB  0821               	movf	(?___ftpack+1)^(0+128),w
  5614  07FC  00A9               	movwf	(?___awtoft+1)^(0+128)
  5615  07FD  0822               	movf	(?___ftpack+2)^(0+128),w
  5616  07FE  00AA               	movwf	(?___awtoft+2)^(0+128)
  5617  07FF  0008               	return
  5618  0800                     __end_of___awtoft:	
  5619                           
  5620                           	psect	text22
  5621  0870                     __ptext22:	
  5622 ;; *************** function ___lltoft *****************
  5623 ;; Defined at:
  5624 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lltoft.c"
  5625 ;; Parameters:    Size  Location     Type
  5626 ;;  c               4    8[BANK1 ] unsigned long 
  5627 ;; Auto vars:     Size  Location     Type
  5628 ;;  exp             1   13[BANK1 ] unsigned char 
  5629 ;; Return value:  Size  Location     Type
  5630 ;;                  3    8[BANK1 ] float 
  5631 ;; Registers used:
  5632 ;;		wreg, status,2, status,0, pclath, cstack
  5633 ;; Tracked objects:
  5634 ;;		On entry : 0/0
  5635 ;;		On exit  : 0/0
  5636 ;;		Unchanged: 0/0
  5637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5638 ;;      Params:         0       0       4       0       0
  5639 ;;      Locals:         0       0       1       0       0
  5640 ;;      Temps:          0       0       1       0       0
  5641 ;;      Totals:         0       0       6       0       0
  5642 ;;Total ram usage:        6 bytes
  5643 ;; Hardware stack levels used:    1
  5644 ;; Hardware stack levels required when called:    4
  5645 ;; This function calls:
  5646 ;;		___ftpack
  5647 ;; This function is called by:
  5648 ;;		_pow
  5649 ;; This function uses a non-reentrant model
  5650 ;;
  5651                           
  5652                           
  5653                           ;psect for function ___lltoft
  5654  0870                     ___lltoft:	
  5655                           
  5656                           ;incstack = 0
  5657                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  5658  0870  308E               	movlw	142
  5659  0871  1683               	bsf	3,5	;RP0=1, select bank1
  5660  0872  1303               	bcf	3,6	;RP1=0, select bank1
  5661  0873  00AC               	movwf	??___lltoft^(0+128)
  5662  0874  082C               	movf	??___lltoft^(0+128),w
  5663  0875  00AD               	movwf	___lltoft@exp^(0+128)
  5664  0876                     l3090:	
  5665  0876  30FF               	movlw	255
  5666  0877  052B               	andwf	(___lltoft@c+3)^(0+128),w
  5667  0878  1903               	btfsc	3,2
  5668  0879  2888               	goto	l3092
  5669  087A  3001               	movlw	1
  5670  087B                     u4275:	
  5671  087B  1003               	clrc
  5672  087C  0CAB               	rrf	(___lltoft@c+3)^(0+128),f
  5673  087D  0CAA               	rrf	(___lltoft@c+2)^(0+128),f
  5674  087E  0CA9               	rrf	(___lltoft@c+1)^(0+128),f
  5675  087F  0CA8               	rrf	___lltoft@c^(0+128),f
  5676  0880  3EFF               	addlw	-1
  5677  0881  1D03               	skipz
  5678  0882  287B               	goto	u4275
  5679  0883  3001               	movlw	1
  5680  0884  00AC               	movwf	??___lltoft^(0+128)
  5681  0885  082C               	movf	??___lltoft^(0+128),w
  5682  0886  07AD               	addwf	___lltoft@exp^(0+128),f
  5683  0887  2876               	goto	l3090
  5684  0888                     l3092:	
  5685  0888  0828               	movf	___lltoft@c^(0+128),w
  5686  0889  00A0               	movwf	___ftpack@arg^(0+128)
  5687  088A  0829               	movf	(___lltoft@c+1)^(0+128),w
  5688  088B  00A1               	movwf	(___ftpack@arg+1)^(0+128)
  5689  088C  082A               	movf	(___lltoft@c+2)^(0+128),w
  5690  088D  00A2               	movwf	(___ftpack@arg+2)^(0+128)
  5691  088E  082D               	movf	___lltoft@exp^(0+128),w
  5692  088F  00AC               	movwf	??___lltoft^(0+128)
  5693  0890  082C               	movf	??___lltoft^(0+128),w
  5694  0891  00A3               	movwf	___ftpack@exp^(0+128)
  5695  0892  01A4               	clrf	___ftpack@sign^(0+128)
  5696  0893  120A  158A  210B   	fcall	___ftpack
  5697  0896  1683               	bsf	3,5	;RP0=1, select bank1
  5698  0897  1303               	bcf	3,6	;RP1=0, select bank1
  5699  0898  0820               	movf	?___ftpack^(0+128),w
  5700  0899  00A8               	movwf	?___lltoft^(0+128)
  5701  089A  0821               	movf	(?___ftpack+1)^(0+128),w
  5702  089B  00A9               	movwf	(?___lltoft+1)^(0+128)
  5703  089C  0822               	movf	(?___ftpack+2)^(0+128),w
  5704  089D  00AA               	movwf	(?___lltoft+2)^(0+128)
  5705  089E  0008               	return
  5706  089F                     __end_of___lltoft:	
  5707                           
  5708                           	psect	text23
  5709  090B                     __ptext23:	
  5710 ;; *************** function ___ftpack *****************
  5711 ;; Defined at:
  5712 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\float.c"
  5713 ;; Parameters:    Size  Location     Type
  5714 ;;  arg             3    0[BANK1 ] unsigned um
  5715 ;;  exp             1    3[BANK1 ] unsigned char 
  5716 ;;  sign            1    4[BANK1 ] unsigned char 
  5717 ;; Auto vars:     Size  Location     Type
  5718 ;;		None
  5719 ;; Return value:  Size  Location     Type
  5720 ;;                  3    0[BANK1 ] float 
  5721 ;; Registers used:
  5722 ;;		wreg, status,2, status,0
  5723 ;; Tracked objects:
  5724 ;;		On entry : 0/0
  5725 ;;		On exit  : 0/0
  5726 ;;		Unchanged: 0/0
  5727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5728 ;;      Params:         0       0       5       0       0
  5729 ;;      Locals:         0       0       0       0       0
  5730 ;;      Temps:          0       0       3       0       0
  5731 ;;      Totals:         0       0       8       0       0
  5732 ;;Total ram usage:        8 bytes
  5733 ;; Hardware stack levels used:    1
  5734 ;; Hardware stack levels required when called:    3
  5735 ;; This function calls:
  5736 ;;		Nothing
  5737 ;; This function is called by:
  5738 ;;		___altoft
  5739 ;;		___awtoft
  5740 ;;		___ftadd
  5741 ;;		___ftdiv
  5742 ;;		___ftmul
  5743 ;;		___lltoft
  5744 ;; This function uses a non-reentrant model
  5745 ;;
  5746                           
  5747                           
  5748                           ;psect for function ___ftpack
  5749  090B                     ___ftpack:	
  5750                           
  5751                           ;incstack = 0
  5752 ;; hardware stack exceeded
  5753                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  5754  090B  1683               	bsf	3,5	;RP0=1, select bank1
  5755  090C  1303               	bcf	3,6	;RP1=0, select bank1
  5756  090D  0823               	movf	___ftpack@exp^(0+128),w
  5757  090E  1903               	btfsc	3,2
  5758  090F  2915               	goto	l2734
  5759  0910  0822               	movf	(___ftpack@arg+2)^(0+128),w
  5760  0911  0421               	iorwf	(___ftpack@arg+1)^(0+128),w
  5761  0912  0420               	iorwf	___ftpack@arg^(0+128),w
  5762  0913  1D03               	skipz
  5763  0914  2928               	goto	l2740
  5764  0915                     l2734:	
  5765  0915  3000               	movlw	0
  5766  0916  00A0               	movwf	?___ftpack^(0+128)
  5767  0917  3000               	movlw	0
  5768  0918  00A1               	movwf	(?___ftpack+1)^(0+128)
  5769  0919  3000               	movlw	0
  5770  091A  00A2               	movwf	(?___ftpack+2)^(0+128)
  5771  091B  0008               	return
  5772  091C                     l2738:	
  5773  091C  3001               	movlw	1
  5774  091D  00A5               	movwf	??___ftpack^(0+128)
  5775  091E  0825               	movf	??___ftpack^(0+128),w
  5776  091F  07A3               	addwf	___ftpack@exp^(0+128),f
  5777  0920  3001               	movlw	1
  5778  0921                     u3535:	
  5779  0921  1003               	clrc
  5780  0922  0CA2               	rrf	(___ftpack@arg+2)^(0+128),f
  5781  0923  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
  5782  0924  0CA0               	rrf	___ftpack@arg^(0+128),f
  5783  0925  3EFF               	addlw	-1
  5784  0926  1D03               	skipz
  5785  0927  2921               	goto	u3535
  5786  0928                     l2740:	
  5787  0928  30FE               	movlw	254
  5788  0929  0522               	andwf	(___ftpack@arg+2)^(0+128),w
  5789  092A  1903               	btfsc	3,2
  5790  092B  2943               	goto	l376
  5791  092C  291C               	goto	l2738
  5792  092D                     l2742:	
  5793  092D  3001               	movlw	1
  5794  092E  00A5               	movwf	??___ftpack^(0+128)
  5795  092F  0825               	movf	??___ftpack^(0+128),w
  5796  0930  07A3               	addwf	___ftpack@exp^(0+128),f
  5797  0931  3001               	movlw	1
  5798  0932  07A0               	addwf	___ftpack@arg^(0+128),f
  5799  0933  3000               	movlw	0
  5800  0934  1803               	skipnc
  5801  0935  3001               	movlw	1
  5802  0936  07A1               	addwf	(___ftpack@arg+1)^(0+128),f
  5803  0937  3000               	movlw	0
  5804  0938  1803               	skipnc
  5805  0939  3001               	movlw	1
  5806  093A  07A2               	addwf	(___ftpack@arg+2)^(0+128),f
  5807  093B  3001               	movlw	1
  5808  093C                     u3555:	
  5809  093C  1003               	clrc
  5810  093D  0CA2               	rrf	(___ftpack@arg+2)^(0+128),f
  5811  093E  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
  5812  093F  0CA0               	rrf	___ftpack@arg^(0+128),f
  5813  0940  3EFF               	addlw	-1
  5814  0941  1D03               	skipz
  5815  0942  293C               	goto	u3555
  5816  0943                     l376:	
  5817  0943  30FF               	movlw	255
  5818  0944  0522               	andwf	(___ftpack@arg+2)^(0+128),w
  5819  0945  1903               	btfsc	3,2
  5820  0946  2952               	goto	l2750
  5821  0947  292D               	goto	l2742
  5822  0948                     l2748:	
  5823  0948  3001               	movlw	1
  5824  0949  02A3               	subwf	___ftpack@exp^(0+128),f
  5825  094A  3001               	movlw	1
  5826  094B                     u3575:	
  5827  094B  1003               	clrc
  5828  094C  0DA0               	rlf	___ftpack@arg^(0+128),f
  5829  094D  0DA1               	rlf	(___ftpack@arg+1)^(0+128),f
  5830  094E  0DA2               	rlf	(___ftpack@arg+2)^(0+128),f
  5831  094F  3EFF               	addlw	-1
  5832  0950  1D03               	skipz
  5833  0951  294B               	goto	u3575
  5834  0952                     l2750:	
  5835  0952  1BA1               	btfsc	(___ftpack@arg+1)^(0+128),7
  5836  0953  2958               	goto	l383
  5837  0954  3002               	movlw	2
  5838  0955  0223               	subwf	___ftpack@exp^(0+128),w
  5839  0956  1803               	skipnc
  5840  0957  2948               	goto	l2748
  5841  0958                     l383:	
  5842  0958  1823               	btfsc	___ftpack@exp^(0+128),0
  5843  0959  2960               	goto	l384
  5844  095A  30FF               	movlw	255
  5845  095B  05A0               	andwf	___ftpack@arg^(0+128),f
  5846  095C  307F               	movlw	127
  5847  095D  05A1               	andwf	(___ftpack@arg+1)^(0+128),f
  5848  095E  30FF               	movlw	255
  5849  095F  05A2               	andwf	(___ftpack@arg+2)^(0+128),f
  5850  0960                     l384:	
  5851  0960  1003               	clrc
  5852  0961  0CA3               	rrf	___ftpack@exp^(0+128),f
  5853  0962  0823               	movf	___ftpack@exp^(0+128),w
  5854  0963  00A5               	movwf	??___ftpack^(0+128)
  5855  0964  01A6               	clrf	(??___ftpack^(0+128)+1)
  5856  0965  01A7               	clrf	(??___ftpack^(0+128)+2)
  5857  0966  3010               	movlw	16
  5858  0967                     u3615:	
  5859  0967  1003               	clrc
  5860  0968  0DA5               	rlf	??___ftpack^(0+128),f
  5861  0969  0DA6               	rlf	(??___ftpack^(0+128)+1),f
  5862  096A  0DA7               	rlf	(??___ftpack^(0+128)+2),f
  5863  096B  3EFF               	addlw	-1
  5864  096C  1D03               	skipz
  5865  096D  2967               	goto	u3615
  5866  096E  0825               	movf	??___ftpack^(0+128),w
  5867  096F  04A0               	iorwf	___ftpack@arg^(0+128),f
  5868  0970  0826               	movf	(??___ftpack+1)^(0+128),w
  5869  0971  04A1               	iorwf	(___ftpack@arg+1)^(0+128),f
  5870  0972  0827               	movf	(??___ftpack+2)^(0+128),w
  5871  0973  04A2               	iorwf	(___ftpack@arg+2)^(0+128),f
  5872  0974  0824               	movf	___ftpack@sign^(0+128),w
  5873  0975  1903               	btfsc	3,2
  5874  0976  0008               	return
  5875  0977  17A2               	bsf	(___ftpack@arg^(0+128)+2),7
  5876  0978  0008               	return
  5877  0979                     __end_of___ftpack:	
  5878                           
  5879                           	psect	text24
  5880  16E5                     __ptext24:	
  5881 ;; *************** function ___awdiv *****************
  5882 ;; Defined at:
  5883 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  5884 ;; Parameters:    Size  Location     Type
  5885 ;;  divisor         2    0[BANK1 ] int 
  5886 ;;  dividend        2    2[BANK1 ] int 
  5887 ;; Auto vars:     Size  Location     Type
  5888 ;;  quotient        2    7[BANK1 ] int 
  5889 ;;  sign            1    6[BANK1 ] unsigned char 
  5890 ;;  counter         1    5[BANK1 ] unsigned char 
  5891 ;; Return value:  Size  Location     Type
  5892 ;;                  2    0[BANK1 ] int 
  5893 ;; Registers used:
  5894 ;;		wreg, status,2, status,0
  5895 ;; Tracked objects:
  5896 ;;		On entry : 0/0
  5897 ;;		On exit  : 0/0
  5898 ;;		Unchanged: 0/0
  5899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5900 ;;      Params:         0       0       4       0       0
  5901 ;;      Locals:         0       0       4       0       0
  5902 ;;      Temps:          0       0       1       0       0
  5903 ;;      Totals:         0       0       9       0       0
  5904 ;;Total ram usage:        9 bytes
  5905 ;; Hardware stack levels used:    1
  5906 ;; Hardware stack levels required when called:    3
  5907 ;; This function calls:
  5908 ;;		Nothing
  5909 ;; This function is called by:
  5910 ;;		_Process
  5911 ;;		_main
  5912 ;; This function uses a non-reentrant model
  5913 ;;
  5914                           
  5915                           
  5916                           ;psect for function ___awdiv
  5917  16E5                     ___awdiv:	
  5918                           
  5919                           ;incstack = 0
  5920                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5921  16E5  1683               	bsf	3,5	;RP0=1, select bank1
  5922  16E6  1303               	bcf	3,6	;RP1=0, select bank1
  5923  16E7  01A6               	clrf	___awdiv@sign^(0+128)
  5924  16E8  1FA1               	btfss	(___awdiv@divisor+1)^(0+128),7
  5925  16E9  2EF1               	goto	l3276
  5926  16EA  09A0               	comf	___awdiv@divisor^(0+128),f
  5927  16EB  09A1               	comf	(___awdiv@divisor+1)^(0+128),f
  5928  16EC  0AA0               	incf	___awdiv@divisor^(0+128),f
  5929  16ED  1903               	skipnz
  5930  16EE  0AA1               	incf	(___awdiv@divisor+1)^(0+128),f
  5931  16EF  01A6               	clrf	___awdiv@sign^(0+128)
  5932  16F0  0AA6               	incf	___awdiv@sign^(0+128),f
  5933  16F1                     l3276:	
  5934  16F1  1FA3               	btfss	(___awdiv@dividend+1)^(0+128),7
  5935  16F2  2EFC               	goto	l3282
  5936  16F3  09A2               	comf	___awdiv@dividend^(0+128),f
  5937  16F4  09A3               	comf	(___awdiv@dividend+1)^(0+128),f
  5938  16F5  0AA2               	incf	___awdiv@dividend^(0+128),f
  5939  16F6  1903               	skipnz
  5940  16F7  0AA3               	incf	(___awdiv@dividend+1)^(0+128),f
  5941  16F8  3001               	movlw	1
  5942  16F9  00A4               	movwf	??___awdiv^(0+128)
  5943  16FA  0824               	movf	??___awdiv^(0+128),w
  5944  16FB  06A6               	xorwf	___awdiv@sign^(0+128),f
  5945  16FC                     l3282:	
  5946  16FC  01A7               	clrf	___awdiv@quotient^(0+128)
  5947  16FD  01A8               	clrf	(___awdiv@quotient+1)^(0+128)
  5948  16FE  0820               	movf	___awdiv@divisor^(0+128),w
  5949  16FF  0421               	iorwf	(___awdiv@divisor+1)^(0+128),w
  5950  1700  1903               	btfsc	3,2
  5951  1701  2F33               	goto	l3304
  5952  1702  01A5               	clrf	___awdiv@counter^(0+128)
  5953  1703  0AA5               	incf	___awdiv@counter^(0+128),f
  5954  1704                     l3292:	
  5955  1704  1BA1               	btfsc	(___awdiv@divisor+1)^(0+128),7
  5956  1705  2F12               	goto	l3294
  5957  1706  3001               	movlw	1
  5958  1707                     u4545:	
  5959  1707  1003               	clrc
  5960  1708  0DA0               	rlf	___awdiv@divisor^(0+128),f
  5961  1709  0DA1               	rlf	(___awdiv@divisor+1)^(0+128),f
  5962  170A  3EFF               	addlw	-1
  5963  170B  1D03               	skipz
  5964  170C  2F07               	goto	u4545
  5965  170D  3001               	movlw	1
  5966  170E  00A4               	movwf	??___awdiv^(0+128)
  5967  170F  0824               	movf	??___awdiv^(0+128),w
  5968  1710  07A5               	addwf	___awdiv@counter^(0+128),f
  5969  1711  2F04               	goto	l3292
  5970  1712                     l3294:	
  5971  1712  3001               	movlw	1
  5972  1713                     u4565:	
  5973  1713  1003               	clrc
  5974  1714  0DA7               	rlf	___awdiv@quotient^(0+128),f
  5975  1715  0DA8               	rlf	(___awdiv@quotient+1)^(0+128),f
  5976  1716  3EFF               	addlw	-1
  5977  1717  1D03               	skipz
  5978  1718  2F13               	goto	u4565
  5979  1719  0821               	movf	(___awdiv@divisor+1)^(0+128),w
  5980  171A  0223               	subwf	(___awdiv@dividend+1)^(0+128),w
  5981  171B  1D03               	skipz
  5982  171C  2F1F               	goto	u4575
  5983  171D  0820               	movf	___awdiv@divisor^(0+128),w
  5984  171E  0222               	subwf	___awdiv@dividend^(0+128),w
  5985  171F                     u4575:	
  5986  171F  1C03               	skipc
  5987  1720  2F28               	goto	l3300
  5988  1721  0820               	movf	___awdiv@divisor^(0+128),w
  5989  1722  02A2               	subwf	___awdiv@dividend^(0+128),f
  5990  1723  0821               	movf	(___awdiv@divisor+1)^(0+128),w
  5991  1724  1C03               	skipc
  5992  1725  03A3               	decf	(___awdiv@dividend+1)^(0+128),f
  5993  1726  02A3               	subwf	(___awdiv@dividend+1)^(0+128),f
  5994  1727  1427               	bsf	___awdiv@quotient^(0+128),0
  5995  1728                     l3300:	
  5996  1728  3001               	movlw	1
  5997  1729                     u4585:	
  5998  1729  1003               	clrc
  5999  172A  0CA1               	rrf	(___awdiv@divisor+1)^(0+128),f
  6000  172B  0CA0               	rrf	___awdiv@divisor^(0+128),f
  6001  172C  3EFF               	addlw	-1
  6002  172D  1D03               	skipz
  6003  172E  2F29               	goto	u4585
  6004  172F  3001               	movlw	1
  6005  1730  02A5               	subwf	___awdiv@counter^(0+128),f
  6006  1731  1D03               	btfss	3,2
  6007  1732  2F12               	goto	l3294
  6008  1733                     l3304:	
  6009  1733  0826               	movf	___awdiv@sign^(0+128),w
  6010  1734  1903               	btfsc	3,2
  6011  1735  2F3B               	goto	l3308
  6012  1736  09A7               	comf	___awdiv@quotient^(0+128),f
  6013  1737  09A8               	comf	(___awdiv@quotient+1)^(0+128),f
  6014  1738  0AA7               	incf	___awdiv@quotient^(0+128),f
  6015  1739  1903               	skipnz
  6016  173A  0AA8               	incf	(___awdiv@quotient+1)^(0+128),f
  6017  173B                     l3308:	
  6018  173B  0828               	movf	(___awdiv@quotient+1)^(0+128),w
  6019  173C  00A1               	movwf	(?___awdiv+1)^(0+128)
  6020  173D  0827               	movf	___awdiv@quotient^(0+128),w
  6021  173E  00A0               	movwf	?___awdiv^(0+128)
  6022  173F  0008               	return
  6023  1740                     __end_of___awdiv:	
  6024                           
  6025                           	psect	text25
  6026  14DF                     __ptext25:	
  6027 ;; *************** function _Lcd_Write_String *****************
  6028 ;; Defined at:
  6029 ;;		line 97 in file "lcd.h"
  6030 ;; Parameters:    Size  Location     Type
  6031 ;;  a               1    wreg     PTR unsigned char 
  6032 ;;		 -> STR_5(12), STR_4(3), STR_3(12), STR_2(13), 
  6033 ;;		 -> STR_1(13), 
  6034 ;; Auto vars:     Size  Location     Type
  6035 ;;  a               1    7[BANK1 ] PTR unsigned char 
  6036 ;;		 -> STR_5(12), STR_4(3), STR_3(12), STR_2(13), 
  6037 ;;		 -> STR_1(13), 
  6038 ;;  i               2    5[BANK1 ] int 
  6039 ;; Return value:  Size  Location     Type
  6040 ;;                  1    wreg      void 
  6041 ;; Registers used:
  6042 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6043 ;; Tracked objects:
  6044 ;;		On entry : 0/0
  6045 ;;		On exit  : 0/0
  6046 ;;		Unchanged: 0/0
  6047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6048 ;;      Params:         0       0       0       0       0
  6049 ;;      Locals:         0       0       3       0       0
  6050 ;;      Temps:          0       0       0       0       0
  6051 ;;      Totals:         0       0       3       0       0
  6052 ;;Total ram usage:        3 bytes
  6053 ;; Hardware stack levels used:    1
  6054 ;; Hardware stack levels required when called:    5
  6055 ;; This function calls:
  6056 ;;		_Lcd_Write_Char
  6057 ;; This function is called by:
  6058 ;;		_main
  6059 ;; This function uses a non-reentrant model
  6060 ;;
  6061                           
  6062                           
  6063                           ;psect for function _Lcd_Write_String
  6064  14DF                     _Lcd_Write_String:	
  6065                           
  6066                           ;incstack = 0
  6067                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6068                           ;Lcd_Write_String@a stored from wreg
  6069  14DF  1683               	bsf	3,5	;RP0=1, select bank1
  6070  14E0  1303               	bcf	3,6	;RP1=0, select bank1
  6071  14E1  00A7               	movwf	Lcd_Write_String@a^(0+128)
  6072                           
  6073                           ;lcd.h: 99: int i;
  6074                           ;lcd.h: 100: for(i=0;a[i]!='\0';i++)
  6075  14E2  01A5               	clrf	Lcd_Write_String@i^(0+128)
  6076  14E3  01A6               	clrf	(Lcd_Write_String@i+1)^(0+128)
  6077  14E4                     l3350:	
  6078  14E4  0825               	movf	Lcd_Write_String@i^(0+128),w
  6079  14E5  0727               	addwf	Lcd_Write_String@a^(0+128),w
  6080  14E6  0084               	movwf	4
  6081  14E7  120A  158A  2000  160A  118A  	fcall	stringdir
  6082  14EC  3A00               	xorlw	0
  6083  14ED  1903               	btfsc	3,2
  6084  14EE  0008               	return
  6085                           
  6086                           ;lcd.h: 101: Lcd_Write_Char(a[i]);
  6087  14EF  0825               	movf	Lcd_Write_String@i^(0+128),w
  6088  14F0  0727               	addwf	Lcd_Write_String@a^(0+128),w
  6089  14F1  0084               	movwf	4
  6090  14F2  120A  158A  2000  160A  118A  	fcall	stringdir
  6091  14F7  160A  118A  25B7  160A  118A  	fcall	_Lcd_Write_Char
  6092  14FC  3001               	movlw	1
  6093  14FD  1683               	bsf	3,5	;RP0=1, select bank1
  6094  14FE  1303               	bcf	3,6	;RP1=0, select bank1
  6095  14FF  07A5               	addwf	Lcd_Write_String@i^(0+128),f
  6096  1500  1803               	skipnc
  6097  1501  0AA6               	incf	(Lcd_Write_String@i+1)^(0+128),f
  6098  1502  3000               	movlw	0
  6099  1503  07A6               	addwf	(Lcd_Write_String@i+1)^(0+128),f
  6100  1504  2CE4               	goto	l3350
  6101  1505                     __end_of_Lcd_Write_String:	
  6102                           
  6103                           	psect	text26
  6104  15B7                     __ptext26:	
  6105 ;; *************** function _Lcd_Write_Char *****************
  6106 ;; Defined at:
  6107 ;;		line 81 in file "lcd.h"
  6108 ;; Parameters:    Size  Location     Type
  6109 ;;  a               1    wreg     unsigned char 
  6110 ;; Auto vars:     Size  Location     Type
  6111 ;;  a               1    4[BANK1 ] unsigned char 
  6112 ;;  y               1    3[BANK1 ] unsigned char 
  6113 ;;  temp            1    2[BANK1 ] unsigned char 
  6114 ;; Return value:  Size  Location     Type
  6115 ;;                  1    wreg      void 
  6116 ;; Registers used:
  6117 ;;		wreg, status,2, status,0, pclath, cstack
  6118 ;; Tracked objects:
  6119 ;;		On entry : 0/0
  6120 ;;		On exit  : 0/0
  6121 ;;		Unchanged: 0/0
  6122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6123 ;;      Params:         0       0       0       0       0
  6124 ;;      Locals:         0       0       3       0       0
  6125 ;;      Temps:          0       0       1       0       0
  6126 ;;      Totals:         0       0       4       0       0
  6127 ;;Total ram usage:        4 bytes
  6128 ;; Hardware stack levels used:    1
  6129 ;; Hardware stack levels required when called:    4
  6130 ;; This function calls:
  6131 ;;		_Lcd_Port
  6132 ;; This function is called by:
  6133 ;;		_Lcd_Write_String
  6134 ;;		_main
  6135 ;; This function uses a non-reentrant model
  6136 ;;
  6137                           
  6138                           
  6139                           ;psect for function _Lcd_Write_Char
  6140  15B7                     _Lcd_Write_Char:	
  6141                           
  6142                           ;incstack = 0
  6143                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  6144                           ;Lcd_Write_Char@a stored from wreg
  6145  15B7  1683               	bsf	3,5	;RP0=1, select bank1
  6146  15B8  1303               	bcf	3,6	;RP1=0, select bank1
  6147  15B9  00A4               	movwf	Lcd_Write_Char@a^(0+128)
  6148                           
  6149                           ;lcd.h: 83: char temp,y;
  6150                           ;lcd.h: 84: temp = a&0x0F;
  6151  15BA  0824               	movf	Lcd_Write_Char@a^(0+128),w
  6152  15BB  390F               	andlw	15
  6153  15BC  00A1               	movwf	??_Lcd_Write_Char^(0+128)
  6154  15BD  0821               	movf	??_Lcd_Write_Char^(0+128),w
  6155  15BE  00A2               	movwf	Lcd_Write_Char@temp^(0+128)
  6156                           
  6157                           ;lcd.h: 85: y = a&0xF0;
  6158  15BF  0824               	movf	Lcd_Write_Char@a^(0+128),w
  6159  15C0  39F0               	andlw	240
  6160  15C1  00A1               	movwf	??_Lcd_Write_Char^(0+128)
  6161  15C2  0821               	movf	??_Lcd_Write_Char^(0+128),w
  6162  15C3  00A3               	movwf	Lcd_Write_Char@y^(0+128)
  6163                           
  6164                           ;lcd.h: 86: RD2 = 1;
  6165  15C4  1283               	bcf	3,5	;RP0=0, select bank0
  6166  15C5  1303               	bcf	3,6	;RP1=0, select bank0
  6167  15C6  1508               	bsf	8,2	;volatile
  6168                           
  6169                           ;lcd.h: 87: Lcd_Port(y>>4);
  6170  15C7  1683               	bsf	3,5	;RP0=1, select bank1
  6171  15C8  1303               	bcf	3,6	;RP1=0, select bank1
  6172  15C9  0823               	movf	Lcd_Write_Char@y^(0+128),w
  6173  15CA  00A1               	movwf	??_Lcd_Write_Char^(0+128)
  6174  15CB  3004               	movlw	4
  6175  15CC                     u4495:	
  6176  15CC  1003               	clrc
  6177  15CD  0CA1               	rrf	??_Lcd_Write_Char^(0+128),f
  6178  15CE  3EFF               	addlw	-1
  6179  15CF  1D03               	skipz
  6180  15D0  2DCC               	goto	u4495
  6181  15D1  0821               	movf	??_Lcd_Write_Char^(0+128),w
  6182  15D2  160A  118A  2505  160A  118A  	fcall	_Lcd_Port
  6183                           
  6184                           ;lcd.h: 88: RD3 = 1;
  6185  15D7  1283               	bcf	3,5	;RP0=0, select bank0
  6186  15D8  1303               	bcf	3,6	;RP1=0, select bank0
  6187  15D9  1588               	bsf	8,3	;volatile
  6188                           
  6189                           ;lcd.h: 89: _delay((unsigned long)((40)*(8000000/4000000.0)));
  6190  15DA  301A               	movlw	26
  6191  15DB  1683               	bsf	3,5	;RP0=1, select bank1
  6192  15DC  1303               	bcf	3,6	;RP1=0, select bank1
  6193  15DD  00A1               	movwf	??_Lcd_Write_Char^(0+128)
  6194  15DE                     u4817:	
  6195  15DE  0BA1               	decfsz	??_Lcd_Write_Char^(0+128),f
  6196  15DF  2DDE               	goto	u4817
  6197  15E0  0000               	nop
  6198                           
  6199                           ;lcd.h: 90: RD3 = 0;
  6200  15E1  1283               	bcf	3,5	;RP0=0, select bank0
  6201  15E2  1303               	bcf	3,6	;RP1=0, select bank0
  6202  15E3  1188               	bcf	8,3	;volatile
  6203                           
  6204                           ;lcd.h: 91: Lcd_Port(temp);
  6205  15E4  1683               	bsf	3,5	;RP0=1, select bank1
  6206  15E5  1303               	bcf	3,6	;RP1=0, select bank1
  6207  15E6  0822               	movf	Lcd_Write_Char@temp^(0+128),w
  6208  15E7  160A  118A  2505  160A  118A  	fcall	_Lcd_Port
  6209                           
  6210                           ;lcd.h: 92: RD3 = 1;
  6211  15EC  1283               	bcf	3,5	;RP0=0, select bank0
  6212  15ED  1303               	bcf	3,6	;RP1=0, select bank0
  6213  15EE  1588               	bsf	8,3	;volatile
  6214                           
  6215                           ;lcd.h: 93: _delay((unsigned long)((40)*(8000000/4000000.0)));
  6216  15EF  301A               	movlw	26
  6217  15F0  1683               	bsf	3,5	;RP0=1, select bank1
  6218  15F1  1303               	bcf	3,6	;RP1=0, select bank1
  6219  15F2  00A1               	movwf	??_Lcd_Write_Char^(0+128)
  6220  15F3                     u4827:	
  6221  15F3  0BA1               	decfsz	??_Lcd_Write_Char^(0+128),f
  6222  15F4  2DF3               	goto	u4827
  6223  15F5  0000               	nop
  6224                           
  6225                           ;lcd.h: 94: RD3 = 0;
  6226  15F6  1283               	bcf	3,5	;RP0=0, select bank0
  6227  15F7  1303               	bcf	3,6	;RP1=0, select bank0
  6228  15F8  1188               	bcf	8,3	;volatile
  6229  15F9  0008               	return
  6230  15FA                     __end_of_Lcd_Write_Char:	
  6231                           
  6232                           	psect	text27
  6233  1693                     __ptext27:	
  6234 ;; *************** function _Lcd_Set_Cursor *****************
  6235 ;; Defined at:
  6236 ;;		line 41 in file "lcd.h"
  6237 ;; Parameters:    Size  Location     Type
  6238 ;;  a               1    wreg     unsigned char 
  6239 ;;  b               1    4[BANK1 ] unsigned char 
  6240 ;; Auto vars:     Size  Location     Type
  6241 ;;  a               1    7[BANK1 ] unsigned char 
  6242 ;;  temp            1   10[BANK1 ] unsigned char 
  6243 ;;  y               1    9[BANK1 ] unsigned char 
  6244 ;;  z               1    8[BANK1 ] unsigned char 
  6245 ;; Return value:  Size  Location     Type
  6246 ;;                  1    wreg      void 
  6247 ;; Registers used:
  6248 ;;		wreg, status,2, status,0, pclath, cstack
  6249 ;; Tracked objects:
  6250 ;;		On entry : 0/0
  6251 ;;		On exit  : 0/0
  6252 ;;		Unchanged: 0/0
  6253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6254 ;;      Params:         0       0       1       0       0
  6255 ;;      Locals:         0       0       4       0       0
  6256 ;;      Temps:          0       0       2       0       0
  6257 ;;      Totals:         0       0       7       0       0
  6258 ;;Total ram usage:        7 bytes
  6259 ;; Hardware stack levels used:    1
  6260 ;; Hardware stack levels required when called:    5
  6261 ;; This function calls:
  6262 ;;		_Lcd_Cmd
  6263 ;; This function is called by:
  6264 ;;		_main
  6265 ;; This function uses a non-reentrant model
  6266 ;;
  6267                           
  6268                           
  6269                           ;psect for function _Lcd_Set_Cursor
  6270  1693                     _Lcd_Set_Cursor:	
  6271                           
  6272                           ;incstack = 0
  6273                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  6274                           ;Lcd_Set_Cursor@a stored from wreg
  6275  1693  1683               	bsf	3,5	;RP0=1, select bank1
  6276  1694  1303               	bcf	3,6	;RP1=0, select bank1
  6277  1695  00A7               	movwf	Lcd_Set_Cursor@a^(0+128)
  6278                           
  6279                           ;lcd.h: 43: char temp,z,y;
  6280                           ;lcd.h: 44: if(a == 1)
  6281  1696  0327               	decf	Lcd_Set_Cursor@a^(0+128),w
  6282  1697  1D03               	btfss	3,2
  6283  1698  2EBC               	goto	l3324
  6284                           
  6285                           ;lcd.h: 45: {
  6286                           ;lcd.h: 46: temp = 0x80 + b - 1;
  6287  1699  0824               	movf	Lcd_Set_Cursor@b^(0+128),w
  6288  169A  3E7F               	addlw	127
  6289  169B  00A5               	movwf	??_Lcd_Set_Cursor^(0+128)
  6290  169C  0825               	movf	??_Lcd_Set_Cursor^(0+128),w
  6291  169D  00AA               	movwf	Lcd_Set_Cursor@temp^(0+128)
  6292                           
  6293                           ;lcd.h: 47: z = temp>>4;
  6294  169E  082A               	movf	Lcd_Set_Cursor@temp^(0+128),w
  6295  169F  00A5               	movwf	??_Lcd_Set_Cursor^(0+128)
  6296  16A0  3004               	movlw	4
  6297  16A1                     u4625:	
  6298  16A1  1003               	clrc
  6299  16A2  0CA5               	rrf	??_Lcd_Set_Cursor^(0+128),f
  6300  16A3  3EFF               	addlw	-1
  6301  16A4  1D03               	skipz
  6302  16A5  2EA1               	goto	u4625
  6303  16A6  0825               	movf	??_Lcd_Set_Cursor^(0+128),w
  6304  16A7  00A6               	movwf	(??_Lcd_Set_Cursor+1)^(0+128)
  6305  16A8  0826               	movf	(??_Lcd_Set_Cursor+1)^(0+128),w
  6306  16A9  00A8               	movwf	Lcd_Set_Cursor@z^(0+128)
  6307                           
  6308                           ;lcd.h: 48: y = temp & 0x0F;
  6309  16AA  082A               	movf	Lcd_Set_Cursor@temp^(0+128),w
  6310  16AB  390F               	andlw	15
  6311  16AC  00A5               	movwf	??_Lcd_Set_Cursor^(0+128)
  6312  16AD  0825               	movf	??_Lcd_Set_Cursor^(0+128),w
  6313  16AE  00A9               	movwf	Lcd_Set_Cursor@y^(0+128)
  6314                           
  6315                           ;lcd.h: 49: Lcd_Cmd(z);
  6316  16AF  0828               	movf	Lcd_Set_Cursor@z^(0+128),w
  6317  16B0  160A  118A  247D  160A  118A  	fcall	_Lcd_Cmd
  6318                           
  6319                           ;lcd.h: 50: Lcd_Cmd(y);
  6320  16B5  1683               	bsf	3,5	;RP0=1, select bank1
  6321  16B6  1303               	bcf	3,6	;RP1=0, select bank1
  6322  16B7  0829               	movf	Lcd_Set_Cursor@y^(0+128),w
  6323  16B8  160A  118A  247D   	fcall	_Lcd_Cmd
  6324                           
  6325                           ;lcd.h: 51: }
  6326  16BB  0008               	return
  6327  16BC                     l3324:	
  6328                           
  6329                           ;lcd.h: 52: else if(a == 2)
  6330  16BC  3002               	movlw	2
  6331  16BD  1683               	bsf	3,5	;RP0=1, select bank1
  6332  16BE  1303               	bcf	3,6	;RP1=0, select bank1
  6333  16BF  0627               	xorwf	Lcd_Set_Cursor@a^(0+128),w
  6334  16C0  1D03               	btfss	3,2
  6335  16C1  0008               	return
  6336                           
  6337                           ;lcd.h: 53: {
  6338                           ;lcd.h: 54: temp = 0xC0 + b - 1;
  6339  16C2  0824               	movf	Lcd_Set_Cursor@b^(0+128),w
  6340  16C3  3EBF               	addlw	191
  6341  16C4  00A5               	movwf	??_Lcd_Set_Cursor^(0+128)
  6342  16C5  0825               	movf	??_Lcd_Set_Cursor^(0+128),w
  6343  16C6  00AA               	movwf	Lcd_Set_Cursor@temp^(0+128)
  6344                           
  6345                           ;lcd.h: 55: z = temp>>4;
  6346  16C7  082A               	movf	Lcd_Set_Cursor@temp^(0+128),w
  6347  16C8  00A5               	movwf	??_Lcd_Set_Cursor^(0+128)
  6348  16C9  3004               	movlw	4
  6349  16CA                     u4645:	
  6350  16CA  1003               	clrc
  6351  16CB  0CA5               	rrf	??_Lcd_Set_Cursor^(0+128),f
  6352  16CC  3EFF               	addlw	-1
  6353  16CD  1D03               	skipz
  6354  16CE  2ECA               	goto	u4645
  6355  16CF  0825               	movf	??_Lcd_Set_Cursor^(0+128),w
  6356  16D0  00A6               	movwf	(??_Lcd_Set_Cursor+1)^(0+128)
  6357  16D1  0826               	movf	(??_Lcd_Set_Cursor+1)^(0+128),w
  6358  16D2  00A8               	movwf	Lcd_Set_Cursor@z^(0+128)
  6359                           
  6360                           ;lcd.h: 56: y = temp & 0x0F;
  6361  16D3  082A               	movf	Lcd_Set_Cursor@temp^(0+128),w
  6362  16D4  390F               	andlw	15
  6363  16D5  00A5               	movwf	??_Lcd_Set_Cursor^(0+128)
  6364  16D6  0825               	movf	??_Lcd_Set_Cursor^(0+128),w
  6365  16D7  00A9               	movwf	Lcd_Set_Cursor@y^(0+128)
  6366                           
  6367                           ;lcd.h: 57: Lcd_Cmd(z);
  6368  16D8  0828               	movf	Lcd_Set_Cursor@z^(0+128),w
  6369  16D9  160A  118A  247D  160A  118A  	fcall	_Lcd_Cmd
  6370                           
  6371                           ;lcd.h: 58: Lcd_Cmd(y);
  6372  16DE  1683               	bsf	3,5	;RP0=1, select bank1
  6373  16DF  1303               	bcf	3,6	;RP1=0, select bank1
  6374  16E0  0829               	movf	Lcd_Set_Cursor@y^(0+128),w
  6375  16E1  160A  118A  247D   	fcall	_Lcd_Cmd
  6376  16E4  0008               	return
  6377  16E5                     __end_of_Lcd_Set_Cursor:	
  6378                           
  6379                           	psect	text28
  6380  179F                     __ptext28:	
  6381 ;; *************** function _Lcd_Init *****************
  6382 ;; Defined at:
  6383 ;;		line 62 in file "lcd.h"
  6384 ;; Parameters:    Size  Location     Type
  6385 ;;		None
  6386 ;; Auto vars:     Size  Location     Type
  6387 ;;		None
  6388 ;; Return value:  Size  Location     Type
  6389 ;;                  1    wreg      void 
  6390 ;; Registers used:
  6391 ;;		wreg, status,2, status,0, pclath, cstack
  6392 ;; Tracked objects:
  6393 ;;		On entry : 0/0
  6394 ;;		On exit  : 0/0
  6395 ;;		Unchanged: 0/0
  6396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6397 ;;      Params:         0       0       0       0       0
  6398 ;;      Locals:         0       0       0       0       0
  6399 ;;      Temps:          0       0       2       0       0
  6400 ;;      Totals:         0       0       2       0       0
  6401 ;;Total ram usage:        2 bytes
  6402 ;; Hardware stack levels used:    1
  6403 ;; Hardware stack levels required when called:    5
  6404 ;; This function calls:
  6405 ;;		_Lcd_Cmd
  6406 ;;		_Lcd_Port
  6407 ;; This function is called by:
  6408 ;;		_main
  6409 ;; This function uses a non-reentrant model
  6410 ;;
  6411                           
  6412                           
  6413                           ;psect for function _Lcd_Init
  6414  179F                     _Lcd_Init:	
  6415                           
  6416                           ;lcd.h: 64: Lcd_Port(0x00);
  6417                           
  6418                           ;incstack = 0
  6419                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  6420  179F  3000               	movlw	0
  6421  17A0  160A  118A  2505  160A  118A  	fcall	_Lcd_Port
  6422                           
  6423                           ;lcd.h: 65: _delay((unsigned long)((20)*(8000000/4000.0)));
  6424  17A5  3034               	movlw	52
  6425  17A6  1683               	bsf	3,5	;RP0=1, select bank1
  6426  17A7  1303               	bcf	3,6	;RP1=0, select bank1
  6427  17A8  00A5               	movwf	(??_Lcd_Init^(0+128)+1)
  6428  17A9  30F1               	movlw	241
  6429  17AA  00A4               	movwf	??_Lcd_Init^(0+128)
  6430  17AB                     u4837:	
  6431  17AB  0BA4               	decfsz	??_Lcd_Init^(0+128),f
  6432  17AC  2FAB               	goto	u4837
  6433  17AD  0BA5               	decfsz	(??_Lcd_Init^(0+128)+1),f
  6434  17AE  2FAB               	goto	u4837
  6435  17AF  2FB0               	nop2
  6436                           
  6437                           ;lcd.h: 66: Lcd_Cmd(0x03);
  6438  17B0  3003               	movlw	3
  6439  17B1  160A  118A  247D  160A  118A  	fcall	_Lcd_Cmd
  6440                           
  6441                           ;lcd.h: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  6442  17B6  300D               	movlw	13
  6443  17B7  1683               	bsf	3,5	;RP0=1, select bank1
  6444  17B8  1303               	bcf	3,6	;RP1=0, select bank1
  6445  17B9  00A5               	movwf	(??_Lcd_Init^(0+128)+1)
  6446  17BA  30FB               	movlw	251
  6447  17BB  00A4               	movwf	??_Lcd_Init^(0+128)
  6448  17BC                     u4847:	
  6449  17BC  0BA4               	decfsz	??_Lcd_Init^(0+128),f
  6450  17BD  2FBC               	goto	u4847
  6451  17BE  0BA5               	decfsz	(??_Lcd_Init^(0+128)+1),f
  6452  17BF  2FBC               	goto	u4847
  6453  17C0  2FC1               	nop2
  6454                           
  6455                           ;lcd.h: 68: Lcd_Cmd(0x03);
  6456  17C1  3003               	movlw	3
  6457  17C2  160A  118A  247D  160A  118A  	fcall	_Lcd_Cmd
  6458                           
  6459                           ;lcd.h: 69: _delay((unsigned long)((11)*(8000000/4000.0)));
  6460  17C7  301D               	movlw	29
  6461  17C8  1683               	bsf	3,5	;RP0=1, select bank1
  6462  17C9  1303               	bcf	3,6	;RP1=0, select bank1
  6463  17CA  00A5               	movwf	(??_Lcd_Init^(0+128)+1)
  6464  17CB  3091               	movlw	145
  6465  17CC  00A4               	movwf	??_Lcd_Init^(0+128)
  6466  17CD                     u4857:	
  6467  17CD  0BA4               	decfsz	??_Lcd_Init^(0+128),f
  6468  17CE  2FCD               	goto	u4857
  6469  17CF  0BA5               	decfsz	(??_Lcd_Init^(0+128)+1),f
  6470  17D0  2FCD               	goto	u4857
  6471                           
  6472                           ;lcd.h: 70: Lcd_Cmd(0x03);
  6473  17D1  3003               	movlw	3
  6474  17D2  160A  118A  247D  160A  118A  	fcall	_Lcd_Cmd
  6475                           
  6476                           ;lcd.h: 72: Lcd_Cmd(0x02);
  6477  17D7  3002               	movlw	2
  6478  17D8  160A  118A  247D  160A  118A  	fcall	_Lcd_Cmd
  6479                           
  6480                           ;lcd.h: 73: Lcd_Cmd(0x02);
  6481  17DD  3002               	movlw	2
  6482  17DE  160A  118A  247D  160A  118A  	fcall	_Lcd_Cmd
  6483                           
  6484                           ;lcd.h: 74: Lcd_Cmd(0x08);
  6485  17E3  3008               	movlw	8
  6486  17E4  160A  118A  247D  160A  118A  	fcall	_Lcd_Cmd
  6487                           
  6488                           ;lcd.h: 75: Lcd_Cmd(0x00);
  6489  17E9  3000               	movlw	0
  6490  17EA  160A  118A  247D  160A  118A  	fcall	_Lcd_Cmd
  6491                           
  6492                           ;lcd.h: 76: Lcd_Cmd(0x0C);
  6493  17EF  300C               	movlw	12
  6494  17F0  160A  118A  247D  160A  118A  	fcall	_Lcd_Cmd
  6495                           
  6496                           ;lcd.h: 77: Lcd_Cmd(0x00);
  6497  17F5  3000               	movlw	0
  6498  17F6  160A  118A  247D  160A  118A  	fcall	_Lcd_Cmd
  6499                           
  6500                           ;lcd.h: 78: Lcd_Cmd(0x06);
  6501  17FB  3006               	movlw	6
  6502  17FC  160A  118A  247D   	fcall	_Lcd_Cmd
  6503  17FF  0008               	return
  6504  1800                     __end_of_Lcd_Init:	
  6505                           
  6506                           	psect	text29
  6507  1443                     __ptext29:	
  6508 ;; *************** function _Lcd_Clear *****************
  6509 ;; Defined at:
  6510 ;;		line 35 in file "lcd.h"
  6511 ;; Parameters:    Size  Location     Type
  6512 ;;		None
  6513 ;; Auto vars:     Size  Location     Type
  6514 ;;		None
  6515 ;; Return value:  Size  Location     Type
  6516 ;;                  2   68[None  ] int 
  6517 ;; Registers used:
  6518 ;;		wreg, status,2, status,0, pclath, cstack
  6519 ;; Tracked objects:
  6520 ;;		On entry : 0/0
  6521 ;;		On exit  : 0/0
  6522 ;;		Unchanged: 0/0
  6523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6524 ;;      Params:         0       0       0       0       0
  6525 ;;      Locals:         0       0       0       0       0
  6526 ;;      Temps:          0       0       0       0       0
  6527 ;;      Totals:         0       0       0       0       0
  6528 ;;Total ram usage:        0 bytes
  6529 ;; Hardware stack levels used:    1
  6530 ;; Hardware stack levels required when called:    5
  6531 ;; This function calls:
  6532 ;;		_Lcd_Cmd
  6533 ;; This function is called by:
  6534 ;;		_main
  6535 ;; This function uses a non-reentrant model
  6536 ;;
  6537                           
  6538                           
  6539                           ;psect for function _Lcd_Clear
  6540  1443                     _Lcd_Clear:	
  6541                           
  6542                           ;lcd.h: 37: Lcd_Cmd(0);
  6543                           
  6544                           ;incstack = 0
  6545                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  6546  1443  3000               	movlw	0
  6547  1444  160A  118A  247D  160A  118A  	fcall	_Lcd_Cmd
  6548                           
  6549                           ;lcd.h: 38: Lcd_Cmd(1);
  6550  1449  3001               	movlw	1
  6551  144A  160A  118A  247D   	fcall	_Lcd_Cmd
  6552  144D  0008               	return
  6553  144E                     __end_of_Lcd_Clear:	
  6554                           
  6555                           	psect	text30
  6556  147D                     __ptext30:	
  6557 ;; *************** function _Lcd_Cmd *****************
  6558 ;; Defined at:
  6559 ;;		line 26 in file "lcd.h"
  6560 ;; Parameters:    Size  Location     Type
  6561 ;;  a               1    wreg     unsigned char 
  6562 ;; Auto vars:     Size  Location     Type
  6563 ;;  a               1    3[BANK1 ] unsigned char 
  6564 ;; Return value:  Size  Location     Type
  6565 ;;                  1    wreg      void 
  6566 ;; Registers used:
  6567 ;;		wreg, status,2, status,0, pclath, cstack
  6568 ;; Tracked objects:
  6569 ;;		On entry : 0/0
  6570 ;;		On exit  : 0/0
  6571 ;;		Unchanged: 0/0
  6572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6573 ;;      Params:         0       0       0       0       0
  6574 ;;      Locals:         0       0       1       0       0
  6575 ;;      Temps:          0       0       2       0       0
  6576 ;;      Totals:         0       0       3       0       0
  6577 ;;Total ram usage:        3 bytes
  6578 ;; Hardware stack levels used:    1
  6579 ;; Hardware stack levels required when called:    4
  6580 ;; This function calls:
  6581 ;;		_Lcd_Port
  6582 ;; This function is called by:
  6583 ;;		_Lcd_Clear
  6584 ;;		_Lcd_Set_Cursor
  6585 ;;		_Lcd_Init
  6586 ;;		_Lcd_Shift_Right
  6587 ;;		_Lcd_Shift_Left
  6588 ;; This function uses a non-reentrant model
  6589 ;;
  6590                           
  6591                           
  6592                           ;psect for function _Lcd_Cmd
  6593  147D                     _Lcd_Cmd:	
  6594                           
  6595                           ;incstack = 0
  6596                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  6597                           ;Lcd_Cmd@a stored from wreg
  6598  147D  1683               	bsf	3,5	;RP0=1, select bank1
  6599  147E  1303               	bcf	3,6	;RP1=0, select bank1
  6600  147F  00A3               	movwf	Lcd_Cmd@a^(0+128)
  6601                           
  6602                           ;lcd.h: 28: RD2 = 0;
  6603  1480  1283               	bcf	3,5	;RP0=0, select bank0
  6604  1481  1303               	bcf	3,6	;RP1=0, select bank0
  6605  1482  1108               	bcf	8,2	;volatile
  6606                           
  6607                           ;lcd.h: 29: Lcd_Port(a);
  6608  1483  1683               	bsf	3,5	;RP0=1, select bank1
  6609  1484  1303               	bcf	3,6	;RP1=0, select bank1
  6610  1485  0823               	movf	Lcd_Cmd@a^(0+128),w
  6611  1486  160A  118A  2505  160A  118A  	fcall	_Lcd_Port
  6612                           
  6613                           ;lcd.h: 30: RD3 = 1;
  6614  148B  1283               	bcf	3,5	;RP0=0, select bank0
  6615  148C  1303               	bcf	3,6	;RP1=0, select bank0
  6616  148D  1588               	bsf	8,3	;volatile
  6617                           
  6618                           ;lcd.h: 31: _delay((unsigned long)((4)*(8000000/4000.0)));
  6619  148E  300B               	movlw	11
  6620  148F  1683               	bsf	3,5	;RP0=1, select bank1
  6621  1490  1303               	bcf	3,6	;RP1=0, select bank1
  6622  1491  00A2               	movwf	(??_Lcd_Cmd^(0+128)+1)
  6623  1492  3062               	movlw	98
  6624  1493  00A1               	movwf	??_Lcd_Cmd^(0+128)
  6625  1494                     u4867:	
  6626  1494  0BA1               	decfsz	??_Lcd_Cmd^(0+128),f
  6627  1495  2C94               	goto	u4867
  6628  1496  0BA2               	decfsz	(??_Lcd_Cmd^(0+128)+1),f
  6629  1497  2C94               	goto	u4867
  6630  1498  0000               	nop
  6631                           
  6632                           ;lcd.h: 32: RD3 = 0;
  6633  1499  1283               	bcf	3,5	;RP0=0, select bank0
  6634  149A  1303               	bcf	3,6	;RP1=0, select bank0
  6635  149B  1188               	bcf	8,3	;volatile
  6636  149C  0008               	return
  6637  149D                     __end_of_Lcd_Cmd:	
  6638                           
  6639                           	psect	text31
  6640  1505                     __ptext31:	
  6641 ;; *************** function _Lcd_Port *****************
  6642 ;; Defined at:
  6643 ;;		line 4 in file "lcd.h"
  6644 ;; Parameters:    Size  Location     Type
  6645 ;;  a               1    wreg     unsigned char 
  6646 ;; Auto vars:     Size  Location     Type
  6647 ;;  a               1    0[BANK1 ] unsigned char 
  6648 ;; Return value:  Size  Location     Type
  6649 ;;                  1    wreg      void 
  6650 ;; Registers used:
  6651 ;;		wreg
  6652 ;; Tracked objects:
  6653 ;;		On entry : 0/0
  6654 ;;		On exit  : 0/0
  6655 ;;		Unchanged: 0/0
  6656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6657 ;;      Params:         0       0       0       0       0
  6658 ;;      Locals:         0       0       1       0       0
  6659 ;;      Temps:          0       0       0       0       0
  6660 ;;      Totals:         0       0       1       0       0
  6661 ;;Total ram usage:        1 bytes
  6662 ;; Hardware stack levels used:    1
  6663 ;; Hardware stack levels required when called:    3
  6664 ;; This function calls:
  6665 ;;		Nothing
  6666 ;; This function is called by:
  6667 ;;		_Lcd_Cmd
  6668 ;;		_Lcd_Init
  6669 ;;		_Lcd_Write_Char
  6670 ;; This function uses a non-reentrant model
  6671 ;;
  6672                           
  6673                           
  6674                           ;psect for function _Lcd_Port
  6675  1505                     _Lcd_Port:	
  6676                           
  6677                           ;incstack = 0
  6678                           ; Regs used in _Lcd_Port: [wreg]
  6679                           ;Lcd_Port@a stored from wreg
  6680  1505  1683               	bsf	3,5	;RP0=1, select bank1
  6681  1506  1303               	bcf	3,6	;RP1=0, select bank1
  6682  1507  00A0               	movwf	Lcd_Port@a^(0+128)
  6683                           
  6684                           ;lcd.h: 6: if(a & 1)
  6685  1508  1C20               	btfss	Lcd_Port@a^(0+128),0
  6686  1509  2D0E               	goto	l55
  6687                           
  6688                           ;lcd.h: 7: RD4 = 1;
  6689  150A  1283               	bcf	3,5	;RP0=0, select bank0
  6690  150B  1303               	bcf	3,6	;RP1=0, select bank0
  6691  150C  1608               	bsf	8,4	;volatile
  6692  150D  2D11               	goto	l56
  6693  150E                     l55:	
  6694                           
  6695                           ;lcd.h: 8: else
  6696                           ;lcd.h: 9: RD4 = 0;
  6697  150E  1283               	bcf	3,5	;RP0=0, select bank0
  6698  150F  1303               	bcf	3,6	;RP1=0, select bank0
  6699  1510  1208               	bcf	8,4	;volatile
  6700  1511                     l56:	
  6701                           
  6702                           ;lcd.h: 11: if(a & 2)
  6703  1511  1683               	bsf	3,5	;RP0=1, select bank1
  6704  1512  1303               	bcf	3,6	;RP1=0, select bank1
  6705  1513  1CA0               	btfss	Lcd_Port@a^(0+128),1
  6706  1514  2D19               	goto	l57
  6707                           
  6708                           ;lcd.h: 12: RD5 = 1;
  6709  1515  1283               	bcf	3,5	;RP0=0, select bank0
  6710  1516  1303               	bcf	3,6	;RP1=0, select bank0
  6711  1517  1688               	bsf	8,5	;volatile
  6712  1518  2D1C               	goto	l58
  6713  1519                     l57:	
  6714                           
  6715                           ;lcd.h: 13: else
  6716                           ;lcd.h: 14: RD5 = 0;
  6717  1519  1283               	bcf	3,5	;RP0=0, select bank0
  6718  151A  1303               	bcf	3,6	;RP1=0, select bank0
  6719  151B  1288               	bcf	8,5	;volatile
  6720  151C                     l58:	
  6721                           
  6722                           ;lcd.h: 16: if(a & 4)
  6723  151C  1683               	bsf	3,5	;RP0=1, select bank1
  6724  151D  1303               	bcf	3,6	;RP1=0, select bank1
  6725  151E  1D20               	btfss	Lcd_Port@a^(0+128),2
  6726  151F  2D24               	goto	l59
  6727                           
  6728                           ;lcd.h: 17: RD6 = 1;
  6729  1520  1283               	bcf	3,5	;RP0=0, select bank0
  6730  1521  1303               	bcf	3,6	;RP1=0, select bank0
  6731  1522  1708               	bsf	8,6	;volatile
  6732  1523  2D27               	goto	l60
  6733  1524                     l59:	
  6734                           
  6735                           ;lcd.h: 18: else
  6736                           ;lcd.h: 19: RD6 = 0;
  6737  1524  1283               	bcf	3,5	;RP0=0, select bank0
  6738  1525  1303               	bcf	3,6	;RP1=0, select bank0
  6739  1526  1308               	bcf	8,6	;volatile
  6740  1527                     l60:	
  6741                           
  6742                           ;lcd.h: 21: if(a & 8)
  6743  1527  1683               	bsf	3,5	;RP0=1, select bank1
  6744  1528  1303               	bcf	3,6	;RP1=0, select bank1
  6745  1529  1DA0               	btfss	Lcd_Port@a^(0+128),3
  6746  152A  2D2F               	goto	l61
  6747                           
  6748                           ;lcd.h: 22: RD7 = 1;
  6749  152B  1283               	bcf	3,5	;RP0=0, select bank0
  6750  152C  1303               	bcf	3,6	;RP1=0, select bank0
  6751  152D  1788               	bsf	8,7	;volatile
  6752  152E  0008               	return
  6753  152F                     l61:	
  6754                           
  6755                           ;lcd.h: 23: else
  6756                           ;lcd.h: 24: RD7 = 0;
  6757  152F  1283               	bcf	3,5	;RP0=0, select bank0
  6758  1530  1303               	bcf	3,6	;RP1=0, select bank0
  6759  1531  1388               	bcf	8,7	;volatile
  6760  1532  0008               	return
  6761  1533                     __end_of_Lcd_Port:	
  6762                           
  6763                           	psect	text32
  6764  15FA                     __ptext32:	
  6765 ;; *************** function _ISR_HANDLER *****************
  6766 ;; Defined at:
  6767 ;;		line 35 in file "main.c"
  6768 ;; Parameters:    Size  Location     Type
  6769 ;;		None
  6770 ;; Auto vars:     Size  Location     Type
  6771 ;;		None
  6772 ;; Return value:  Size  Location     Type
  6773 ;;                  1    wreg      void 
  6774 ;; Registers used:
  6775 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6776 ;; Tracked objects:
  6777 ;;		On entry : 0/0
  6778 ;;		On exit  : 0/0
  6779 ;;		Unchanged: 0/0
  6780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6781 ;;      Params:         0       0       0       0       0
  6782 ;;      Locals:         0       0       0       0       0
  6783 ;;      Temps:          0       6       0       0       0
  6784 ;;      Totals:         0       6       0       0       0
  6785 ;;Total ram usage:        6 bytes
  6786 ;; Hardware stack levels used:    1
  6787 ;; Hardware stack levels required when called:    2
  6788 ;; This function calls:
  6789 ;;		i1___awtoft
  6790 ;;		i1___ftdiv
  6791 ;;		i1___fttol
  6792 ;; This function is called by:
  6793 ;;		Interrupt level 1
  6794 ;; This function uses a non-reentrant model
  6795 ;;
  6796                           
  6797                           
  6798                           ;psect for function _ISR_HANDLER
  6799  15FA                     _ISR_HANDLER:	
  6800                           
  6801                           ;main.c: 37: if(INTCONbits.RBIF == 1)
  6802  15FA  1C0B               	btfss	11,0	;volatile
  6803  15FB  2E3B               	goto	i1l125
  6804                           
  6805                           ;main.c: 38: {
  6806                           ;main.c: 39: INTCONbits.GIE=0;
  6807  15FC  138B               	bcf	11,7	;volatile
  6808                           
  6809                           ;main.c: 40: if(PORTBbits.RB4==1)T1CONbits.TMR1ON=1;
  6810  15FD  1E06               	btfss	6,4	;volatile
  6811  15FE  2E00               	goto	i1l123
  6812  15FF  1410               	bsf	16,0	;volatile
  6813  1600                     i1l123:	
  6814                           
  6815                           ;main.c: 41: if(PORTBbits.RB4==0)
  6816  1600  1A06               	btfsc	6,4	;volatile
  6817  1601  2E39               	goto	i1l2624
  6818                           
  6819                           ;main.c: 42: {
  6820                           ;main.c: 43: T1CONbits.TMR1ON=0;
  6821  1602  1010               	bcf	16,0	;volatile
  6822                           
  6823                           ;main.c: 44: a=(TMR1L|(TMR1H<<8))/58.82;
  6824  1603  080F               	movf	15,w	;volatile
  6825  1604  00BE               	movwf	??_ISR_HANDLER
  6826  1605  01BF               	clrf	??_ISR_HANDLER+1
  6827  1606  083E               	movf	??_ISR_HANDLER,w
  6828  1607  00BF               	movwf	??_ISR_HANDLER+1
  6829  1608  01BE               	clrf	??_ISR_HANDLER
  6830  1609  083E               	movf	??_ISR_HANDLER,w
  6831  160A  040E               	iorwf	14,w	;volatile
  6832  160B  00F8               	movwf	i1___awtoft@c
  6833  160C  083F               	movf	??_ISR_HANDLER+1,w
  6834  160D  00F9               	movwf	i1___awtoft@c+1
  6835  160E  160A  118A  249D  160A  118A  	fcall	i1___awtoft
  6836  1613  0878               	movf	?i1___awtoft,w
  6837  1614  1283               	bcf	3,5	;RP0=0, select bank0
  6838  1615  1303               	bcf	3,6	;RP1=0, select bank0
  6839  1616  00A3               	movwf	i1___ftdiv@f1
  6840  1617  0879               	movf	?i1___awtoft+1,w
  6841  1618  00A4               	movwf	i1___ftdiv@f1+1
  6842  1619  087A               	movf	?i1___awtoft+2,w
  6843  161A  00A5               	movwf	i1___ftdiv@f1+2
  6844  161B  3048               	movlw	72
  6845  161C  00A0               	movwf	i1___ftdiv@f2
  6846  161D  306B               	movlw	107
  6847  161E  00A1               	movwf	i1___ftdiv@f2+1
  6848  161F  3042               	movlw	66
  6849  1620  00A2               	movwf	i1___ftdiv@f2+2
  6850  1621  120A  158A  24F2  160A  118A  	fcall	i1___ftdiv
  6851  1626  1283               	bcf	3,5	;RP0=0, select bank0
  6852  1627  1303               	bcf	3,6	;RP1=0, select bank0
  6853  1628  0820               	movf	?i1___ftdiv,w
  6854  1629  00B0               	movwf	i1___fttol@f1
  6855  162A  0821               	movf	?i1___ftdiv+1,w
  6856  162B  00B1               	movwf	i1___fttol@f1+1
  6857  162C  0822               	movf	?i1___ftdiv+2,w
  6858  162D  00B2               	movwf	i1___fttol@f1+2
  6859  162E  120A  158A  21F2  160A  118A  	fcall	i1___fttol
  6860  1633  1283               	bcf	3,5	;RP0=0, select bank0
  6861  1634  1303               	bcf	3,6	;RP1=0, select bank0
  6862  1635  0831               	movf	?i1___fttol+1,w
  6863  1636  00C8               	movwf	_a+1
  6864  1637  0830               	movf	?i1___fttol,w
  6865  1638  00C7               	movwf	_a
  6866  1639                     i1l2624:	
  6867                           
  6868                           ;main.c: 45: }
  6869                           ;main.c: 46: INTCONbits.RBIF=0;
  6870  1639  100B               	bcf	11,0	;volatile
  6871                           
  6872                           ;main.c: 47: INTCONbits.GIE=1;
  6873  163A  178B               	bsf	11,7	;volatile
  6874  163B                     i1l125:	
  6875  163B  0843               	movf	??_ISR_HANDLER+5,w
  6876  163C  00FF               	movwf	127
  6877  163D  0842               	movf	??_ISR_HANDLER+4,w
  6878  163E  008A               	movwf	10
  6879  163F  0841               	movf	??_ISR_HANDLER+3,w
  6880  1640  0084               	movwf	4
  6881  1641  0E40               	swapf	(??_ISR_HANDLER+2)^0,w
  6882  1642  0083               	movwf	3
  6883  1643  0EFE               	swapf	126,f
  6884  1644  0E7E               	swapf	126,w
  6885  1645  0009               	retfie
  6886  1646                     __end_of_ISR_HANDLER:	
  6887                           
  6888                           	psect	intentry
  6889  0004                     __pintentry:	
  6890                           ;incstack = 0
  6891 ;; hardware stack exceeded
  6892                           ; Regs used in _ISR_HANDLER: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6893                           
  6894  0004                     interrupt_function:	
  6895  007E                     saved_w	set	btemp
  6896  0004  00FE               	movwf	btemp
  6897  0005  0E03               	swapf	3,w
  6898  0006  1283               	bcf	3,5	;RP0=0, select bank0
  6899  0007  1303               	bcf	3,6	;RP1=0, select bank0
  6900  0008  00C0               	movwf	??_ISR_HANDLER+2
  6901  0009  0804               	movf	4,w
  6902  000A  00C1               	movwf	??_ISR_HANDLER+3
  6903  000B  080A               	movf	10,w
  6904  000C  00C2               	movwf	??_ISR_HANDLER+4
  6905  000D  087F               	movf	btemp+1,w
  6906  000E  00C3               	movwf	??_ISR_HANDLER+5
  6907  000F  160A  118A  2DFA   	ljmp	_ISR_HANDLER
  6908                           
  6909                           	psect	text33
  6910  09F2                     __ptext33:	
  6911 ;; *************** function i1___fttol *****************
  6912 ;; Defined at:
  6913 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fttol.c"
  6914 ;; Parameters:    Size  Location     Type
  6915 ;;  f1              3   16[BANK0 ] float 
  6916 ;; Auto vars:     Size  Location     Type
  6917 ;;  __fttol         4   25[BANK0 ] unsigned long 
  6918 ;;  __fttol         1   29[BANK0 ] unsigned char 
  6919 ;;  __fttol         1   24[BANK0 ] unsigned char 
  6920 ;; Return value:  Size  Location     Type
  6921 ;;                  4   16[BANK0 ] long 
  6922 ;; Registers used:
  6923 ;;		wreg, status,2, status,0
  6924 ;; Tracked objects:
  6925 ;;		On entry : 0/0
  6926 ;;		On exit  : 0/0
  6927 ;;		Unchanged: 0/0
  6928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6929 ;;      Params:         0       4       0       0       0
  6930 ;;      Locals:         0       6       0       0       0
  6931 ;;      Temps:          0       4       0       0       0
  6932 ;;      Totals:         0      14       0       0       0
  6933 ;;Total ram usage:       14 bytes
  6934 ;; Hardware stack levels used:    1
  6935 ;; This function calls:
  6936 ;;		Nothing
  6937 ;; This function is called by:
  6938 ;;		_ISR_HANDLER
  6939 ;; This function uses a non-reentrant model
  6940 ;;
  6941                           
  6942                           
  6943                           ;psect for function i1___fttol
  6944  09F2                     i1___fttol:	
  6945                           
  6946                           ;incstack = 0
  6947 ;; hardware stack exceeded
  6948                           ; Regs used in i1___fttol: [wreg+status,2+status,0]
  6949  09F2  1283               	bcf	3,5	;RP0=0, select bank0
  6950  09F3  1303               	bcf	3,6	;RP1=0, select bank0
  6951  09F4  0830               	movf	i1___fttol@f1,w
  6952  09F5  00B4               	movwf	??i1___fttol
  6953  09F6  0831               	movf	i1___fttol@f1+1,w
  6954  09F7  00B5               	movwf	??i1___fttol+1
  6955  09F8  0832               	movf	i1___fttol@f1+2,w
  6956  09F9  00B6               	movwf	??i1___fttol+2
  6957  09FA  1003               	clrc
  6958  09FB  0D35               	rlf	??i1___fttol+1,w
  6959  09FC  0D36               	rlf	??i1___fttol+2,w
  6960  09FD  00B7               	movwf	??i1___fttol+3
  6961  09FE  0837               	movf	??i1___fttol+3,w
  6962  09FF  00BD               	movwf	i1___fttol@exp1
  6963  0A00  083D               	movf	i1___fttol@exp1,w
  6964  0A01  1D03               	btfss	3,2
  6965  0A02  2A0C               	goto	i1l2574
  6966  0A03  3000               	movlw	0
  6967  0A04  00B3               	movwf	?i1___fttol+3
  6968  0A05  3000               	movlw	0
  6969  0A06  00B2               	movwf	?i1___fttol+2
  6970  0A07  3000               	movlw	0
  6971  0A08  00B1               	movwf	?i1___fttol+1
  6972  0A09  3000               	movlw	0
  6973  0A0A  00B0               	movwf	?i1___fttol
  6974  0A0B  0008               	return
  6975  0A0C                     i1l2574:	
  6976  0A0C  0830               	movf	i1___fttol@f1,w
  6977  0A0D  00B4               	movwf	??i1___fttol
  6978  0A0E  0831               	movf	i1___fttol@f1+1,w
  6979  0A0F  00B5               	movwf	??i1___fttol+1
  6980  0A10  0832               	movf	i1___fttol@f1+2,w
  6981  0A11  00B6               	movwf	??i1___fttol+2
  6982  0A12  3017               	movlw	23
  6983  0A13                     u339_25:	
  6984  0A13  1003               	clrc
  6985  0A14  0CB6               	rrf	??i1___fttol+2,f
  6986  0A15  0CB5               	rrf	??i1___fttol+1,f
  6987  0A16  0CB4               	rrf	??i1___fttol,f
  6988  0A17  3EFF               	addlw	-1
  6989  0A18  1D03               	skipz
  6990  0A19  2A13               	goto	u339_25
  6991  0A1A  0834               	movf	??i1___fttol,w
  6992  0A1B  00B7               	movwf	??i1___fttol+3
  6993  0A1C  0837               	movf	??i1___fttol+3,w
  6994  0A1D  00B8               	movwf	i1___fttol@sign1
  6995  0A1E  17B1               	bsf	i1___fttol@f1+1,7
  6996  0A1F  30FF               	movlw	255
  6997  0A20  05B0               	andwf	i1___fttol@f1,f
  6998  0A21  30FF               	movlw	255
  6999  0A22  05B1               	andwf	i1___fttol@f1+1,f
  7000  0A23  3000               	movlw	0
  7001  0A24  05B2               	andwf	i1___fttol@f1+2,f
  7002  0A25  0830               	movf	i1___fttol@f1,w
  7003  0A26  00B9               	movwf	i1___fttol@lval
  7004  0A27  0831               	movf	i1___fttol@f1+1,w
  7005  0A28  00BA               	movwf	i1___fttol@lval+1
  7006  0A29  0832               	movf	i1___fttol@f1+2,w
  7007  0A2A  00BB               	movwf	i1___fttol@lval+2
  7008  0A2B  01BC               	clrf	i1___fttol@lval+3
  7009  0A2C  308E               	movlw	142
  7010  0A2D  02BD               	subwf	i1___fttol@exp1,f
  7011  0A2E  1FBD               	btfss	i1___fttol@exp1,7
  7012  0A2F  2A4E               	goto	i1l2594
  7013  0A30  083D               	movf	i1___fttol@exp1,w
  7014  0A31  3A80               	xorlw	128
  7015  0A32  3E8F               	addlw	143
  7016  0A33  1803               	skipnc
  7017  0A34  2A3E               	goto	i1l2592
  7018  0A35  3000               	movlw	0
  7019  0A36  00B3               	movwf	?i1___fttol+3
  7020  0A37  3000               	movlw	0
  7021  0A38  00B2               	movwf	?i1___fttol+2
  7022  0A39  3000               	movlw	0
  7023  0A3A  00B1               	movwf	?i1___fttol+1
  7024  0A3B  3000               	movlw	0
  7025  0A3C  00B0               	movwf	?i1___fttol
  7026  0A3D  0008               	return
  7027  0A3E                     i1l2592:	
  7028  0A3E  3001               	movlw	1
  7029  0A3F                     u342_25:	
  7030  0A3F  1003               	clrc
  7031  0A40  0CBC               	rrf	i1___fttol@lval+3,f
  7032  0A41  0CBB               	rrf	i1___fttol@lval+2,f
  7033  0A42  0CBA               	rrf	i1___fttol@lval+1,f
  7034  0A43  0CB9               	rrf	i1___fttol@lval,f
  7035  0A44  3EFF               	addlw	-1
  7036  0A45  1D03               	skipz
  7037  0A46  2A3F               	goto	u342_25
  7038  0A47  3001               	movlw	1
  7039  0A48  00B4               	movwf	??i1___fttol
  7040  0A49  0834               	movf	??i1___fttol,w
  7041  0A4A  07BD               	addwf	i1___fttol@exp1,f
  7042  0A4B  1903               	btfsc	3,2
  7043  0A4C  2A69               	goto	i1l2602
  7044  0A4D  2A3E               	goto	i1l2592
  7045  0A4E                     i1l2594:	
  7046  0A4E  3018               	movlw	24
  7047  0A4F  023D               	subwf	i1___fttol@exp1,w
  7048  0A50  1C03               	skipc
  7049  0A51  2A66               	goto	i1l467
  7050  0A52  3000               	movlw	0
  7051  0A53  00B3               	movwf	?i1___fttol+3
  7052  0A54  3000               	movlw	0
  7053  0A55  00B2               	movwf	?i1___fttol+2
  7054  0A56  3000               	movlw	0
  7055  0A57  00B1               	movwf	?i1___fttol+1
  7056  0A58  3000               	movlw	0
  7057  0A59  00B0               	movwf	?i1___fttol
  7058  0A5A  0008               	return
  7059  0A5B                     i1l2600:	
  7060  0A5B  3001               	movlw	1
  7061  0A5C  00B4               	movwf	??i1___fttol
  7062  0A5D                     u345_25:	
  7063  0A5D  1003               	clrc
  7064  0A5E  0DB9               	rlf	i1___fttol@lval,f
  7065  0A5F  0DBA               	rlf	i1___fttol@lval+1,f
  7066  0A60  0DBB               	rlf	i1___fttol@lval+2,f
  7067  0A61  0DBC               	rlf	i1___fttol@lval+3,f
  7068  0A62  0BB4               	decfsz	??i1___fttol,f
  7069  0A63  2A5D               	goto	u345_25
  7070  0A64  3001               	movlw	1
  7071  0A65  02BD               	subwf	i1___fttol@exp1,f
  7072  0A66                     i1l467:	
  7073  0A66  083D               	movf	i1___fttol@exp1,w
  7074  0A67  1D03               	btfss	3,2
  7075  0A68  2A5B               	goto	i1l2600
  7076  0A69                     i1l2602:	
  7077  0A69  0838               	movf	i1___fttol@sign1,w
  7078  0A6A  1903               	btfsc	3,2
  7079  0A6B  2A77               	goto	i1l2606
  7080  0A6C  09B9               	comf	i1___fttol@lval,f
  7081  0A6D  09BA               	comf	i1___fttol@lval+1,f
  7082  0A6E  09BB               	comf	i1___fttol@lval+2,f
  7083  0A6F  09BC               	comf	i1___fttol@lval+3,f
  7084  0A70  0AB9               	incf	i1___fttol@lval,f
  7085  0A71  1903               	skipnz
  7086  0A72  0ABA               	incf	i1___fttol@lval+1,f
  7087  0A73  1903               	skipnz
  7088  0A74  0ABB               	incf	i1___fttol@lval+2,f
  7089  0A75  1903               	skipnz
  7090  0A76  0ABC               	incf	i1___fttol@lval+3,f
  7091  0A77                     i1l2606:	
  7092  0A77  083C               	movf	i1___fttol@lval+3,w
  7093  0A78  00B3               	movwf	?i1___fttol+3
  7094  0A79  083B               	movf	i1___fttol@lval+2,w
  7095  0A7A  00B2               	movwf	?i1___fttol+2
  7096  0A7B  083A               	movf	i1___fttol@lval+1,w
  7097  0A7C  00B1               	movwf	?i1___fttol+1
  7098  0A7D  0839               	movf	i1___fttol@lval,w
  7099  0A7E  00B0               	movwf	?i1___fttol
  7100  0A7F  0008               	return
  7101  0A80                     __end_ofi1___fttol:	
  7102                           
  7103                           	psect	text34
  7104  0CF2                     __ptext34:	
  7105 ;; *************** function i1___ftdiv *****************
  7106 ;; Defined at:
  7107 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdiv.c"
  7108 ;; Parameters:    Size  Location     Type
  7109 ;;  f2              3    0[BANK0 ] float 
  7110 ;;  f1              3    3[BANK0 ] float 
  7111 ;; Auto vars:     Size  Location     Type
  7112 ;;  __ftdiv         3   11[BANK0 ] float 
  7113 ;;  __ftdiv         1   15[BANK0 ] unsigned char 
  7114 ;;  __ftdiv         1   14[BANK0 ] unsigned char 
  7115 ;;  __ftdiv         1   10[BANK0 ] unsigned char 
  7116 ;; Return value:  Size  Location     Type
  7117 ;;                  3    0[BANK0 ] float 
  7118 ;; Registers used:
  7119 ;;		wreg, status,2, status,0, pclath, cstack
  7120 ;; Tracked objects:
  7121 ;;		On entry : 0/0
  7122 ;;		On exit  : 0/0
  7123 ;;		Unchanged: 0/0
  7124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7125 ;;      Params:         0       6       0       0       0
  7126 ;;      Locals:         0       6       0       0       0
  7127 ;;      Temps:          0       4       0       0       0
  7128 ;;      Totals:         0      16       0       0       0
  7129 ;;Total ram usage:       16 bytes
  7130 ;; Hardware stack levels used:    1
  7131 ;; Hardware stack levels required when called:    1
  7132 ;; This function calls:
  7133 ;;		i1___ftpack
  7134 ;; This function is called by:
  7135 ;;		_ISR_HANDLER
  7136 ;; This function uses a non-reentrant model
  7137 ;;
  7138                           
  7139                           
  7140                           ;psect for function i1___ftdiv
  7141  0CF2                     i1___ftdiv:	
  7142                           
  7143                           ;incstack = 0
  7144 ;; hardware stack exceeded
  7145                           ; Regs used in i1___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  7146  0CF2  1283               	bcf	3,5	;RP0=0, select bank0
  7147  0CF3  1303               	bcf	3,6	;RP1=0, select bank0
  7148  0CF4  0823               	movf	i1___ftdiv@f1,w
  7149  0CF5  00A6               	movwf	??i1___ftdiv
  7150  0CF6  0824               	movf	i1___ftdiv@f1+1,w
  7151  0CF7  00A7               	movwf	??i1___ftdiv+1
  7152  0CF8  0825               	movf	i1___ftdiv@f1+2,w
  7153  0CF9  00A8               	movwf	??i1___ftdiv+2
  7154  0CFA  1003               	clrc
  7155  0CFB  0D27               	rlf	??i1___ftdiv+1,w
  7156  0CFC  0D28               	rlf	??i1___ftdiv+2,w
  7157  0CFD  00A9               	movwf	??i1___ftdiv+3
  7158  0CFE  0829               	movf	??i1___ftdiv+3,w
  7159  0CFF  00AE               	movwf	i1___ftdiv@exp
  7160  0D00  082E               	movf	i1___ftdiv@exp,w
  7161  0D01  1D03               	btfss	3,2
  7162  0D02  2D0A               	goto	i1l2532
  7163  0D03  3000               	movlw	0
  7164  0D04  00A0               	movwf	?i1___ftdiv
  7165  0D05  3000               	movlw	0
  7166  0D06  00A1               	movwf	?i1___ftdiv+1
  7167  0D07  3000               	movlw	0
  7168  0D08  00A2               	movwf	?i1___ftdiv+2
  7169  0D09  0008               	return
  7170  0D0A                     i1l2532:	
  7171  0D0A  0820               	movf	i1___ftdiv@f2,w
  7172  0D0B  00A6               	movwf	??i1___ftdiv
  7173  0D0C  0821               	movf	i1___ftdiv@f2+1,w
  7174  0D0D  00A7               	movwf	??i1___ftdiv+1
  7175  0D0E  0822               	movf	i1___ftdiv@f2+2,w
  7176  0D0F  00A8               	movwf	??i1___ftdiv+2
  7177  0D10  1003               	clrc
  7178  0D11  0D27               	rlf	??i1___ftdiv+1,w
  7179  0D12  0D28               	rlf	??i1___ftdiv+2,w
  7180  0D13  00A9               	movwf	??i1___ftdiv+3
  7181  0D14  0829               	movf	??i1___ftdiv+3,w
  7182  0D15  00AF               	movwf	i1___ftdiv@sign
  7183  0D16  082F               	movf	i1___ftdiv@sign,w
  7184  0D17  1D03               	btfss	3,2
  7185  0D18  2D20               	goto	i1l2538
  7186  0D19  3000               	movlw	0
  7187  0D1A  00A0               	movwf	?i1___ftdiv
  7188  0D1B  3000               	movlw	0
  7189  0D1C  00A1               	movwf	?i1___ftdiv+1
  7190  0D1D  3000               	movlw	0
  7191  0D1E  00A2               	movwf	?i1___ftdiv+2
  7192  0D1F  0008               	return
  7193  0D20                     i1l2538:	
  7194  0D20  3000               	movlw	0
  7195  0D21  00AB               	movwf	i1___ftdiv@f3
  7196  0D22  3000               	movlw	0
  7197  0D23  00AC               	movwf	i1___ftdiv@f3+1
  7198  0D24  3000               	movlw	0
  7199  0D25  00AD               	movwf	i1___ftdiv@f3+2
  7200  0D26  3089               	movlw	137
  7201  0D27  072F               	addwf	i1___ftdiv@sign,w
  7202  0D28  00A6               	movwf	??i1___ftdiv
  7203  0D29  0826               	movf	??i1___ftdiv,w
  7204  0D2A  02AE               	subwf	i1___ftdiv@exp,f
  7205  0D2B  0823               	movf	i1___ftdiv@f1,w
  7206  0D2C  00A6               	movwf	??i1___ftdiv
  7207  0D2D  0824               	movf	i1___ftdiv@f1+1,w
  7208  0D2E  00A7               	movwf	??i1___ftdiv+1
  7209  0D2F  0825               	movf	i1___ftdiv@f1+2,w
  7210  0D30  00A8               	movwf	??i1___ftdiv+2
  7211  0D31  3010               	movlw	16
  7212  0D32                     u332_25:	
  7213  0D32  1003               	clrc
  7214  0D33  0CA8               	rrf	??i1___ftdiv+2,f
  7215  0D34  0CA7               	rrf	??i1___ftdiv+1,f
  7216  0D35  0CA6               	rrf	??i1___ftdiv,f
  7217  0D36  3EFF               	addlw	-1
  7218  0D37  1D03               	skipz
  7219  0D38  2D32               	goto	u332_25
  7220  0D39  0826               	movf	??i1___ftdiv,w
  7221  0D3A  00A9               	movwf	??i1___ftdiv+3
  7222  0D3B  0829               	movf	??i1___ftdiv+3,w
  7223  0D3C  00AF               	movwf	i1___ftdiv@sign
  7224  0D3D  0820               	movf	i1___ftdiv@f2,w
  7225  0D3E  00A6               	movwf	??i1___ftdiv
  7226  0D3F  0821               	movf	i1___ftdiv@f2+1,w
  7227  0D40  00A7               	movwf	??i1___ftdiv+1
  7228  0D41  0822               	movf	i1___ftdiv@f2+2,w
  7229  0D42  00A8               	movwf	??i1___ftdiv+2
  7230  0D43  3010               	movlw	16
  7231  0D44                     u333_25:	
  7232  0D44  1003               	clrc
  7233  0D45  0CA8               	rrf	??i1___ftdiv+2,f
  7234  0D46  0CA7               	rrf	??i1___ftdiv+1,f
  7235  0D47  0CA6               	rrf	??i1___ftdiv,f
  7236  0D48  3EFF               	addlw	-1
  7237  0D49  1D03               	skipz
  7238  0D4A  2D44               	goto	u333_25
  7239  0D4B  0826               	movf	??i1___ftdiv,w
  7240  0D4C  00A9               	movwf	??i1___ftdiv+3
  7241  0D4D  0829               	movf	??i1___ftdiv+3,w
  7242  0D4E  06AF               	xorwf	i1___ftdiv@sign,f
  7243  0D4F  3080               	movlw	128
  7244  0D50  00A6               	movwf	??i1___ftdiv
  7245  0D51  0826               	movf	??i1___ftdiv,w
  7246  0D52  05AF               	andwf	i1___ftdiv@sign,f
  7247  0D53  17A4               	bsf	i1___ftdiv@f1+1,7
  7248  0D54  30FF               	movlw	255
  7249  0D55  05A3               	andwf	i1___ftdiv@f1,f
  7250  0D56  30FF               	movlw	255
  7251  0D57  05A4               	andwf	i1___ftdiv@f1+1,f
  7252  0D58  3000               	movlw	0
  7253  0D59  05A5               	andwf	i1___ftdiv@f1+2,f
  7254  0D5A  17A1               	bsf	i1___ftdiv@f2+1,7
  7255  0D5B  30FF               	movlw	255
  7256  0D5C  05A0               	andwf	i1___ftdiv@f2,f
  7257  0D5D  30FF               	movlw	255
  7258  0D5E  05A1               	andwf	i1___ftdiv@f2+1,f
  7259  0D5F  3000               	movlw	0
  7260  0D60  05A2               	andwf	i1___ftdiv@f2+2,f
  7261  0D61  3018               	movlw	24
  7262  0D62  00A6               	movwf	??i1___ftdiv
  7263  0D63  0826               	movf	??i1___ftdiv,w
  7264  0D64  00AA               	movwf	i1___ftdiv@cntr
  7265  0D65                     i1l2552:	
  7266  0D65  3001               	movlw	1
  7267  0D66                     u334_25:	
  7268  0D66  1003               	clrc
  7269  0D67  0DAB               	rlf	i1___ftdiv@f3,f
  7270  0D68  0DAC               	rlf	i1___ftdiv@f3+1,f
  7271  0D69  0DAD               	rlf	i1___ftdiv@f3+2,f
  7272  0D6A  3EFF               	addlw	-1
  7273  0D6B  1D03               	skipz
  7274  0D6C  2D66               	goto	u334_25
  7275  0D6D  0822               	movf	i1___ftdiv@f2+2,w
  7276  0D6E  0225               	subwf	i1___ftdiv@f1+2,w
  7277  0D6F  1D03               	skipz
  7278  0D70  2D77               	goto	u335_25
  7279  0D71  0821               	movf	i1___ftdiv@f2+1,w
  7280  0D72  0224               	subwf	i1___ftdiv@f1+1,w
  7281  0D73  1D03               	skipz
  7282  0D74  2D77               	goto	u335_25
  7283  0D75  0820               	movf	i1___ftdiv@f2,w
  7284  0D76  0223               	subwf	i1___ftdiv@f1,w
  7285  0D77                     u335_25:	
  7286  0D77  1C03               	skipc
  7287  0D78  2D84               	goto	i1l2560
  7288  0D79  0820               	movf	i1___ftdiv@f2,w
  7289  0D7A  02A3               	subwf	i1___ftdiv@f1,f
  7290  0D7B  0821               	movf	i1___ftdiv@f2+1,w
  7291  0D7C  1C03               	skipc
  7292  0D7D  0F21               	incfsz	i1___ftdiv@f2+1,w
  7293  0D7E  02A4               	subwf	i1___ftdiv@f1+1,f
  7294  0D7F  0822               	movf	i1___ftdiv@f2+2,w
  7295  0D80  1C03               	skipc
  7296  0D81  0A22               	incf	i1___ftdiv@f2+2,w
  7297  0D82  02A5               	subwf	i1___ftdiv@f1+2,f
  7298  0D83  142B               	bsf	i1___ftdiv@f3,0
  7299  0D84                     i1l2560:	
  7300  0D84  3001               	movlw	1
  7301  0D85                     u336_25:	
  7302  0D85  1003               	clrc
  7303  0D86  0DA3               	rlf	i1___ftdiv@f1,f
  7304  0D87  0DA4               	rlf	i1___ftdiv@f1+1,f
  7305  0D88  0DA5               	rlf	i1___ftdiv@f1+2,f
  7306  0D89  3EFF               	addlw	-1
  7307  0D8A  1D03               	skipz
  7308  0D8B  2D85               	goto	u336_25
  7309  0D8C  3001               	movlw	1
  7310  0D8D  02AA               	subwf	i1___ftdiv@cntr,f
  7311  0D8E  1D03               	btfss	3,2
  7312  0D8F  2D65               	goto	i1l2552
  7313  0D90  082B               	movf	i1___ftdiv@f3,w
  7314  0D91  00F0               	movwf	i1___ftpack@arg
  7315  0D92  082C               	movf	i1___ftdiv@f3+1,w
  7316  0D93  00F1               	movwf	i1___ftpack@arg+1
  7317  0D94  082D               	movf	i1___ftdiv@f3+2,w
  7318  0D95  00F2               	movwf	i1___ftpack@arg+2
  7319  0D96  082E               	movf	i1___ftdiv@exp,w
  7320  0D97  00A6               	movwf	??i1___ftdiv
  7321  0D98  0826               	movf	??i1___ftdiv,w
  7322  0D99  00F3               	movwf	i1___ftpack@exp
  7323  0D9A  082F               	movf	i1___ftdiv@sign,w
  7324  0D9B  00A7               	movwf	??i1___ftdiv+1
  7325  0D9C  0827               	movf	??i1___ftdiv+1,w
  7326  0D9D  00F4               	movwf	i1___ftpack@sign
  7327  0D9E  120A  158A  209F   	fcall	i1___ftpack
  7328  0DA1  0870               	movf	?i1___ftpack,w
  7329  0DA2  1283               	bcf	3,5	;RP0=0, select bank0
  7330  0DA3  1303               	bcf	3,6	;RP1=0, select bank0
  7331  0DA4  00A0               	movwf	?i1___ftdiv
  7332  0DA5  0871               	movf	?i1___ftpack+1,w
  7333  0DA6  00A1               	movwf	?i1___ftdiv+1
  7334  0DA7  0872               	movf	?i1___ftpack+2,w
  7335  0DA8  00A2               	movwf	?i1___ftdiv+2
  7336  0DA9  0008               	return
  7337  0DAA                     __end_ofi1___ftdiv:	
  7338                           
  7339                           	psect	text35
  7340  149D                     __ptext35:	
  7341 ;; *************** function i1___awtoft *****************
  7342 ;; Defined at:
  7343 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awtoft.c"
  7344 ;; Parameters:    Size  Location     Type
  7345 ;;  c               2    8[COMMON] int 
  7346 ;; Auto vars:     Size  Location     Type
  7347 ;;  __awtoft        1   13[COMMON] unsigned char 
  7348 ;; Return value:  Size  Location     Type
  7349 ;;                  3    8[COMMON] float 
  7350 ;; Registers used:
  7351 ;;		wreg, status,2, status,0, pclath, cstack
  7352 ;; Tracked objects:
  7353 ;;		On entry : 0/0
  7354 ;;		On exit  : 0/0
  7355 ;;		Unchanged: 0/0
  7356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7357 ;;      Params:         3       0       0       0       0
  7358 ;;      Locals:         1       0       0       0       0
  7359 ;;      Temps:          2       0       0       0       0
  7360 ;;      Totals:         6       0       0       0       0
  7361 ;;Total ram usage:        6 bytes
  7362 ;; Hardware stack levels used:    1
  7363 ;; Hardware stack levels required when called:    1
  7364 ;; This function calls:
  7365 ;;		i1___ftpack
  7366 ;; This function is called by:
  7367 ;;		_ISR_HANDLER
  7368 ;; This function uses a non-reentrant model
  7369 ;;
  7370                           
  7371                           
  7372                           ;psect for function i1___awtoft
  7373  149D                     i1___awtoft:	
  7374                           
  7375                           ;incstack = 0
  7376 ;; hardware stack exceeded
  7377                           ; Regs used in i1___awtoft: [wreg+status,2+status,0+pclath+cstack]
  7378  149D  01FD               	clrf	i1___awtoft@sign
  7379  149E  1FF9               	btfss	i1___awtoft@c+1,7
  7380  149F  2CA7               	goto	i1l2522
  7381  14A0  09F8               	comf	i1___awtoft@c,f
  7382  14A1  09F9               	comf	i1___awtoft@c+1,f
  7383  14A2  0AF8               	incf	i1___awtoft@c,f
  7384  14A3  1903               	skipnz
  7385  14A4  0AF9               	incf	i1___awtoft@c+1,f
  7386  14A5  01FD               	clrf	i1___awtoft@sign
  7387  14A6  0AFD               	incf	i1___awtoft@sign,f
  7388  14A7                     i1l2522:	
  7389  14A7  0878               	movf	i1___awtoft@c,w
  7390  14A8  00F0               	movwf	i1___ftpack@arg
  7391  14A9  0879               	movf	i1___awtoft@c+1,w
  7392  14AA  00F1               	movwf	i1___ftpack@arg+1
  7393  14AB  01F2               	clrf	i1___ftpack@arg+2
  7394  14AC  308E               	movlw	142
  7395  14AD  00FB               	movwf	??i1___awtoft
  7396  14AE  087B               	movf	??i1___awtoft,w
  7397  14AF  00F3               	movwf	i1___ftpack@exp
  7398  14B0  087D               	movf	i1___awtoft@sign,w
  7399  14B1  00FC               	movwf	??i1___awtoft+1
  7400  14B2  087C               	movf	??i1___awtoft+1,w
  7401  14B3  00F4               	movwf	i1___ftpack@sign
  7402  14B4  120A  158A  209F   	fcall	i1___ftpack
  7403  14B7  0870               	movf	?i1___ftpack,w
  7404  14B8  00F8               	movwf	?i1___awtoft
  7405  14B9  0871               	movf	?i1___ftpack+1,w
  7406  14BA  00F9               	movwf	?i1___awtoft+1
  7407  14BB  0872               	movf	?i1___ftpack+2,w
  7408  14BC  00FA               	movwf	?i1___awtoft+2
  7409  14BD  0008               	return
  7410  14BE                     __end_ofi1___awtoft:	
  7411                           
  7412                           	psect	text36
  7413  089F                     __ptext36:	
  7414 ;; *************** function i1___ftpack *****************
  7415 ;; Defined at:
  7416 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\float.c"
  7417 ;; Parameters:    Size  Location     Type
  7418 ;;  arg             3    0[COMMON] unsigned um
  7419 ;;  exp             1    3[COMMON] unsigned char 
  7420 ;;  sign            1    4[COMMON] unsigned char 
  7421 ;; Auto vars:     Size  Location     Type
  7422 ;;		None
  7423 ;; Return value:  Size  Location     Type
  7424 ;;                  3    0[COMMON] float 
  7425 ;; Registers used:
  7426 ;;		wreg, status,2, status,0
  7427 ;; Tracked objects:
  7428 ;;		On entry : 0/0
  7429 ;;		On exit  : 0/0
  7430 ;;		Unchanged: 0/0
  7431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7432 ;;      Params:         5       0       0       0       0
  7433 ;;      Locals:         0       0       0       0       0
  7434 ;;      Temps:          3       0       0       0       0
  7435 ;;      Totals:         8       0       0       0       0
  7436 ;;Total ram usage:        8 bytes
  7437 ;; Hardware stack levels used:    1
  7438 ;; This function calls:
  7439 ;;		Nothing
  7440 ;; This function is called by:
  7441 ;;		i1___awtoft
  7442 ;;		i1___ftdiv
  7443 ;; This function uses a non-reentrant model
  7444 ;;
  7445                           
  7446                           
  7447                           ;psect for function i1___ftpack
  7448  089F                     i1___ftpack:	
  7449                           
  7450                           ;incstack = 0
  7451 ;; hardware stack exceeded
  7452                           ; Regs used in i1___ftpack: [wreg+status,2+status,0]
  7453  089F  0873               	movf	i1___ftpack@exp,w
  7454  08A0  1903               	btfsc	3,2
  7455  08A1  28A7               	goto	i1l2368
  7456  08A2  0872               	movf	i1___ftpack@arg+2,w
  7457  08A3  0471               	iorwf	i1___ftpack@arg+1,w
  7458  08A4  0470               	iorwf	i1___ftpack@arg,w
  7459  08A5  1D03               	skipz
  7460  08A6  28BA               	goto	i1l2374
  7461  08A7                     i1l2368:	
  7462  08A7  3000               	movlw	0
  7463  08A8  00F0               	movwf	?i1___ftpack
  7464  08A9  3000               	movlw	0
  7465  08AA  00F1               	movwf	?i1___ftpack+1
  7466  08AB  3000               	movlw	0
  7467  08AC  00F2               	movwf	?i1___ftpack+2
  7468  08AD  0008               	return
  7469  08AE                     i1l2372:	
  7470  08AE  3001               	movlw	1
  7471  08AF  00F5               	movwf	??i1___ftpack
  7472  08B0  0875               	movf	??i1___ftpack,w
  7473  08B1  07F3               	addwf	i1___ftpack@exp,f
  7474  08B2  3001               	movlw	1
  7475  08B3                     u303_25:	
  7476  08B3  1003               	clrc
  7477  08B4  0CF2               	rrf	i1___ftpack@arg+2,f
  7478  08B5  0CF1               	rrf	i1___ftpack@arg+1,f
  7479  08B6  0CF0               	rrf	i1___ftpack@arg,f
  7480  08B7  3EFF               	addlw	-1
  7481  08B8  1D03               	skipz
  7482  08B9  28B3               	goto	u303_25
  7483  08BA                     i1l2374:	
  7484  08BA  30FE               	movlw	254
  7485  08BB  0572               	andwf	i1___ftpack@arg+2,w
  7486  08BC  1903               	btfsc	3,2
  7487  08BD  28D5               	goto	i1l376
  7488  08BE  28AE               	goto	i1l2372
  7489  08BF                     i1l2376:	
  7490  08BF  3001               	movlw	1
  7491  08C0  00F5               	movwf	??i1___ftpack
  7492  08C1  0875               	movf	??i1___ftpack,w
  7493  08C2  07F3               	addwf	i1___ftpack@exp,f
  7494  08C3  3001               	movlw	1
  7495  08C4  07F0               	addwf	i1___ftpack@arg,f
  7496  08C5  3000               	movlw	0
  7497  08C6  1803               	skipnc
  7498  08C7  3001               	movlw	1
  7499  08C8  07F1               	addwf	i1___ftpack@arg+1,f
  7500  08C9  3000               	movlw	0
  7501  08CA  1803               	skipnc
  7502  08CB  3001               	movlw	1
  7503  08CC  07F2               	addwf	i1___ftpack@arg+2,f
  7504  08CD  3001               	movlw	1
  7505  08CE                     u305_25:	
  7506  08CE  1003               	clrc
  7507  08CF  0CF2               	rrf	i1___ftpack@arg+2,f
  7508  08D0  0CF1               	rrf	i1___ftpack@arg+1,f
  7509  08D1  0CF0               	rrf	i1___ftpack@arg,f
  7510  08D2  3EFF               	addlw	-1
  7511  08D3  1D03               	skipz
  7512  08D4  28CE               	goto	u305_25
  7513  08D5                     i1l376:	
  7514  08D5  30FF               	movlw	255
  7515  08D6  0572               	andwf	i1___ftpack@arg+2,w
  7516  08D7  1903               	btfsc	3,2
  7517  08D8  28E4               	goto	i1l2384
  7518  08D9  28BF               	goto	i1l2376
  7519  08DA                     i1l2382:	
  7520  08DA  3001               	movlw	1
  7521  08DB  02F3               	subwf	i1___ftpack@exp,f
  7522  08DC  3001               	movlw	1
  7523  08DD                     u307_25:	
  7524  08DD  1003               	clrc
  7525  08DE  0DF0               	rlf	i1___ftpack@arg,f
  7526  08DF  0DF1               	rlf	i1___ftpack@arg+1,f
  7527  08E0  0DF2               	rlf	i1___ftpack@arg+2,f
  7528  08E1  3EFF               	addlw	-1
  7529  08E2  1D03               	skipz
  7530  08E3  28DD               	goto	u307_25
  7531  08E4                     i1l2384:	
  7532  08E4  1BF1               	btfsc	i1___ftpack@arg+1,7
  7533  08E5  28EA               	goto	i1l383
  7534  08E6  3002               	movlw	2
  7535  08E7  0273               	subwf	i1___ftpack@exp,w
  7536  08E8  1803               	skipnc
  7537  08E9  28DA               	goto	i1l2382
  7538  08EA                     i1l383:	
  7539  08EA  1873               	btfsc	i1___ftpack@exp,0
  7540  08EB  28F2               	goto	i1l384
  7541  08EC  30FF               	movlw	255
  7542  08ED  05F0               	andwf	i1___ftpack@arg,f
  7543  08EE  307F               	movlw	127
  7544  08EF  05F1               	andwf	i1___ftpack@arg+1,f
  7545  08F0  30FF               	movlw	255
  7546  08F1  05F2               	andwf	i1___ftpack@arg+2,f
  7547  08F2                     i1l384:	
  7548  08F2  1003               	clrc
  7549  08F3  0CF3               	rrf	i1___ftpack@exp,f
  7550  08F4  0873               	movf	i1___ftpack@exp,w
  7551  08F5  00F5               	movwf	??i1___ftpack
  7552  08F6  01F6               	clrf	??i1___ftpack+1
  7553  08F7  01F7               	clrf	??i1___ftpack+2
  7554  08F8  3010               	movlw	16
  7555  08F9                     u311_25:	
  7556  08F9  1003               	clrc
  7557  08FA  0DF5               	rlf	??i1___ftpack,f
  7558  08FB  0DF6               	rlf	??i1___ftpack+1,f
  7559  08FC  0DF7               	rlf	??i1___ftpack+2,f
  7560  08FD  3EFF               	addlw	-1
  7561  08FE  1D03               	skipz
  7562  08FF  28F9               	goto	u311_25
  7563  0900  0875               	movf	??i1___ftpack,w
  7564  0901  04F0               	iorwf	i1___ftpack@arg,f
  7565  0902  0876               	movf	??i1___ftpack+1,w
  7566  0903  04F1               	iorwf	i1___ftpack@arg+1,f
  7567  0904  0877               	movf	??i1___ftpack+2,w
  7568  0905  04F2               	iorwf	i1___ftpack@arg+2,f
  7569  0906  0874               	movf	i1___ftpack@sign,w
  7570  0907  1903               	btfsc	3,2
  7571  0908  0008               	return
  7572  0909  17F2               	bsf	i1___ftpack@arg+2,7
  7573  090A  0008               	return
  7574  090B                     __end_ofi1___ftpack:	
  7575  007E                     btemp	set	126	;btemp
  7576  007E                     wtemp	set	126
  7577  007E                     wtemp0	set	126
  7578  0080                     wtemp1	set	128
  7579  0082                     wtemp2	set	130
  7580  0084                     wtemp3	set	132
  7581  0086                     wtemp4	set	134
  7582  0088                     wtemp5	set	136
  7583  007F                     wtemp6	set	127
  7584  007E                     ttemp	set	126
  7585  007E                     ttemp0	set	126
  7586  0081                     ttemp1	set	129
  7587  0084                     ttemp2	set	132
  7588  0087                     ttemp3	set	135
  7589  007F                     ttemp4	set	127
  7590  007E                     ltemp	set	126
  7591  007E                     ltemp0	set	126
  7592  0082                     ltemp1	set	130
  7593  0086                     ltemp2	set	134
  7594  0080                     ltemp3	set	128


Data Sizes:
    Strings     41
    Constant    57
    Data        5
    BSS         9
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     36      45
    BANK1            80     80      80
    BANK3            96     43      48
    BANK2            96      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(1) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK1[2]), floor@expon(BANK1[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 13
		 -> STR_5(CODE[12]), STR_4(CODE[3]), STR_3(CODE[12]), STR_2(CODE[13]), 
		 -> STR_1(CODE[13]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR_HANDLER in COMMON

    _ISR_HANDLER->i1___awtoft
    i1___fttol->i1___awtoft
    i1___ftdiv->i1___awtoft
    i1___awtoft->i1___ftpack

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR_HANDLER in BANK0

    _ISR_HANDLER->i1___fttol
    i1___fttol->i1___ftdiv

Critical Paths under _main in BANK1

    _Process->_analogRead
    _analogRead->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftmul
    ___ftge->___ftmul
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___awtoft
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___ftdiv->___ftmul
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _ISR_HANDLER in BANK1

    None.

Critical Paths under _main in BANK3

    _main->_Process
    _Process->_analogRead
    _analogRead->_pow

Critical Paths under _ISR_HANDLER in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR_HANDLER in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0  104337
                                             40 BANK3      3     3      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                            _Process
                         _Sharp_Init
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4    1511
                                              0 BANK1      7     3      4
 ---------------------------------------------------------------------------------
 (1) _Sharp_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Process                                             15    13      2   98751
                                             25 BANK3     15    13      2
                            ___awdiv
                           ___awtoft
                             ___ftge
                            ___ftmul
                         _analogRead
 ---------------------------------------------------------------------------------
 (2) _analogRead                                          11     9      2   87990
                                             77 BANK1      3     1      2
                                             17 BANK3      8     8      0
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (3) _pow                                                 18    12      6   76276
                                             76 BANK1      1     1      0
                                              0 BANK3     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (4) _log                                                  6     3      3   24528
                                             53 BANK1      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _exp                                                 13    10      3   41561
                                             63 BANK1     13    10      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (5) _ldexp                                               10     5      5    2339
                                             53 BANK1     10     5      5
                             ___ftge
                            ___ftneg
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftneg                                              3     0      3     373
                                              0 BANK1      3     0      3
 ---------------------------------------------------------------------------------
 (5) _floor                                                9     6      3   10481
                                             52 BANK1      9     6      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                6     2      4     630
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     546
                                             30 BANK1     14    10      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftge                                              12     6      6    1416
                                             30 BANK1     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___altoft                                             8     4      4    2865
                                             44 BANK1      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           10     4      6    9957
                                             43 BANK1     10     4      6
                             ___bmul
                            ___ftadd
                            ___ftmul
 ---------------------------------------------------------------------------------
 (6) ___ftmul                                             16    10      6    4418
                                             14 BANK1     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     244
                                              0 BANK1      4     3      1
 ---------------------------------------------------------------------------------
 (5) ___ftsub                                              6     0      6    4829
                                             43 BANK1      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (6) ___ftadd                                             13     7      6    4579
                                             30 BANK1     13     7      6
                           ___awtoft (ARG)
                             ___bmul (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftdiv                                             16    10      6    3396
                                             30 BANK1     16    10      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___awtoft                                             6     3      3    3144
                                              8 BANK1      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             6     2      4    2763
                                              8 BANK1      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2584
                                              0 BANK1      8     3      5
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4    1369
                                              0 BANK1      9     5      4
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     3     3      0     549
                                              5 BANK1      3     3      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     254
                                              1 BANK1      4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1    1469
                                              4 BANK1      7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     279
                                              4 BANK1      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     155
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     155
                                              1 BANK1      3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0     124
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR_HANDLER                                          6     6      0    1501
                                             30 BANK0      6     6      0
                         i1___awtoft
                          i1___ftdiv
                          i1___fttol
 ---------------------------------------------------------------------------------
 (9) i1___fttol                                           14    10      4     278
                                             16 BANK0     14    10      4
                         i1___awtoft (ARG)
                          i1___ftdiv (ARG)
 ---------------------------------------------------------------------------------
 (9) i1___ftdiv                                           16    10      6     719
                                              0 BANK0     16    10      6
                         i1___awtoft (ARG)
                         i1___ftpack
 ---------------------------------------------------------------------------------
 (9) i1___awtoft                                           6     3      3     504
                                              8 COMMON     6     3      3
                         i1___ftpack
 ---------------------------------------------------------------------------------
 (10) i1___ftpack                                          8     3      5     387
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _Process
     ___awdiv
     ___awtoft
       ___ftpack
     ___ftge
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     _analogRead
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
       _pow
         ___ftge
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
         ___fttol
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         ___lltoft
           ___ftpack
         _exp
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftge
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
           ___fttol
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _eval_poly
             ___bmul
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _floor
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             ___fttol
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             _frexp
           _ldexp
             ___ftge
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             ___ftneg
             _eval_poly (ARG)
               ___bmul
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___bmul (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
           _log (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___bmul
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___bmul (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             _frexp
         _log
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___bmul
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp
   _Sharp_Init
   ___awdiv
   ___awmod

 _ISR_HANDLER (ROOT)
   i1___awtoft
     i1___ftpack
   i1___ftdiv
     i1___awtoft (ARG)
       i1___ftpack
     i1___ftpack (ARG)
   i1___fttol
     i1___awtoft (ARG)
       i1___ftpack
     i1___ftdiv (ARG)
       i1___awtoft (ARG)
         i1___ftpack
       i1___ftpack (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60     2B      30       9       50.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     50      50       7      100.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     24      2D       5       56.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      BB      12        0.0%
ABS                  0      0      BB       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Wed Dec 14 09:08:08 2016

             ___altoft@exp 00D2                          _a 0047                          _b 0044  
                        _r 004B                          pc 0002                 i1___awtoft 149D  
               i1___ftpack 089F             ___bmul@product 00A2                __CFG_CP$OFF 0000  
            ___altoft@sign 00D3                         l60 1527                         l61 152F  
                       l55 150E                         l56 1511                         l57 1519  
                       l58 151C                         l59 1524               ___awdiv@sign 00A6  
                       fsr 0004               ___ftadd@exp1 00CA               ___ftadd@exp2 00C9  
             ___ftadd@sign 00C8                        l407 06A7                        l383 0958  
                      l384 0960                        l376 0943                        l467 0AF4  
                      l579 0330                        _RD2 0042                        _RD3 0043  
                      _RD4 0044                        _RD5 0045                        _RD6 0046  
                      _RD7 0047               __CFG_CPD$OFF 0000                        _avg 01BE  
                      _exp 04B7                        _log 0E62                        _pow 0301  
                      fsr0 0004                        _tol 01BB               i1___ftdiv@f1 0023  
             i1___ftdiv@f2 0020               i1___ftdiv@f3 002B                        indf 0000  
             ___awmod@sign 00A6               i1___awtoft@c 0078               __CFG_FOSC$HS 0000  
             i1___fttol@f1 0030               __CFG_LVP$OFF 0000               ___ftdiv@cntr 00C8  
             ___ftdiv@sign 00CD                       l3012 0B3F                       l3102 0E86  
                     l3016 0B48                       l3026 0B9E                       l3210 0405  
                     l3300 1728                       l3036 09EB                       l3140 050B  
                     l3124 04C5                       l3108 0E9C                       l3046 0BB5  
                     l3134 04E7                       l3206 03D3                       l3304 1733  
                     l3080 0C27                       l3056 0BDE                       l3400 1652  
                     l3090 0876                       l3146 053E                       l3324 16BC  
                     l3308 173B                       l3092 0888                       l3076 0C1E  
                     l3412 165F                       l3404 1659                       l3350 14E4  
                     l3414 166D                       l3422 1686                       l3168 05E7  
                     l3192 0339                       l3282 16FC                       l2802 062F  
                     l3258 0C52                       l3426 168E                       l3418 167B  
                     l3292 1704                       l3276 16F1                       l2740 0928  
                     l2820 0658                       l1860 1790                       l3294 1712  
                     l2750 0952                       l2742 092D                       l2734 0915  
                     l2830 067E                       l2902 07AD                       l3198 0345  
                     l3382 0FCB                       l2840 06A3                       l2832 0682  
                     l2808 063E                       l1856 1769                       l1936 0A9A  
                     l3384 0F38                       l3464 008D                       l2738 091C  
                     l2826 066D                       l1962 0AE9                       l1954 0ACC  
                     l3386 0FD4                       l2748 0948                       l2844 06B9  
                     l2828 0679                       l2764 1452                       l1964 0AF7  
                     l1956 0ADC                       l2838 0697                       l2848 06CB  
                     l2768 1458                       l1968 0B05                       l2928 1589  
                     l2858 06EE                       l2890 0785                       l2874 0736  
                     l2786 1549                       l2948 07E7                       l2964 0DD8  
                     l2868 0720                       l2788 155B                       l2958 0DC2  
                     l2798 0628                       l2886 0775                       l2986 0E3C  
                     l2978 0E1D                       l2898 079D                       ?_exp 00DF  
                     ?_log 00D5                       l2998 14C7                       ?_pow 0190  
                     STR_1 084C                       STR_2 083F                       STR_3 0859  
                     STR_4 0865                       STR_5 0859                       u2201 1783  
                     u2202 1784                       u2203 1789                       u2204 178A  
                     u2181 175C                       u2182 175D                       u2183 1762  
                     u2415 0ACD                       u2184 1763                       u4115 0DEA  
                     u4035 07AE                       u4125 0DFC                       u4045 07B6  
                     u2445 0AEB                       u4135 0E1E                       u4145 0E2F  
                     u2385 0AA1                       u4155 0E3D                       u4340 0522  
                     u4350 0523                       u3615 0967                       u3535 0921  
                     u4255 0BE7                       u3555 093C                       u4275 087B  
                     u3805 066E                       u3575 094B                       u4625 16A1  
                     u4545 1707                       u3665 154E                       u4385 05DE  
                     u3835 0683                       u4475 03C2                       u4715 1662  
                     u4645 16CA                       u4565 1713                       u4495 15CC  
                     u4575 171F                       u3775 0659                       u4735 1673  
                     u4807 02F9                       u4817 15DE                       u4585 1729  
                     u3865 0698                       u3945 0742                       u4745 167C  
                     u4827 15F3                       u3955 0754                       u4675 0F42  
                     u4837 17AB                       u4847 17BC                       u4857 17CD  
                     u3985 0786                       u4777 007D                       u4867 1494  
                     u3995 078E                       u4787 009B                       u4797 00A9  
             __CFG_WRT$OFF 0000          ?_Lcd_Write_String 0070                       _main 0042  
             ___ftpack@arg 00A0               ___ftpack@exp 00A3                       btemp 007E  
                     exp@x 00DF                       log@x 00D5              i1___ftdiv@exp 002E  
                     ltemp 007E                       pow@x 0190                       pow@y 0193  
                     start 0012                       ttemp 007E         ??_Lcd_Write_String 00A5  
                     wtemp 007E              __CFG_IESO$OFF 0000            __end_of_Lcd_Cmd 149D  
        ___bmul@multiplier 00A3              __CFG_MCLRE$ON 0000               ___ftmul@cntr 00BC  
             ___ftmul@sign 00BD               ___fttol@exp1 00CB                      ??_exp 00E2  
                    ??_log 00D8               ___fttol@lval 00C7                      ??_pow 00EC  
          __end_of_Process 1000                      ?_main 0070            __end_of___awdiv 1740  
          __end_of___ftadd 0708              __CFG_WDTE$OFF 0000            __end_of___awmod 1693  
          __end_of___ftdiv 0E62            __end_of___ftneg 1443                      _ANSEL 0188  
          __end_of___ftmul 07DB            ___awdiv@divisor 00A0                      _T1CON 0010  
          __end_of___ftsub 14DF            __end_of___fttol 0B0E                      i1l123 1600  
                    i1l125 163B                      i1l383 08EA                      i1l384 08F2  
                    i1l376 08D5                      i1l467 0A66            ___awdiv@counter 00A5  
                    _TMR1H 000F                      _TMR1L 000E    __size_of_Lcd_Set_Cursor 0052  
                    _TRISA 0085                      _TRISB 0086                      _TRISD 0088  
             ___lltoft@exp 00AD             __CFG_FCMEN$OFF 0000              ___awtoft@sign 00AD  
                    _floor 0B0E                      _ldexp 0BA7                      _frexp 1575  
                    _errno 0049              ___ftpack@sign 00A4             __CFG_BOREN$OFF 0000  
                    pclath 000A                      ltemp0 007E                      ltemp1 0082  
                    ltemp2 0086                      ltemp3 0080             i1___ftdiv@cntr 002A  
                    pow@yi 019D             i1___ftdiv@sign 002F               ?_ISR_HANDLER 0070  
                    ttemp0 007E                      ttemp1 0081                      ttemp2 0084  
                    ttemp3 0087                      ttemp4 007F                      status 0003  
                    wtemp0 007E                      wtemp1 0080                      wtemp2 0082  
                    wtemp3 0084                      wtemp4 0086                      wtemp5 0088  
                    wtemp6 007F         __size_ofi1___ftdiv 00B8         __size_ofi1___fttol 008E  
              exp@exponent 00E9             i1___ftpack@arg 0070             i1___ftpack@exp 0073  
         __end_of_Lcd_Init 1800           __end_of_Lcd_Port 1533                ldexp@newexp 00D8  
          __initialization 0015                log@exponent 00D9               __end_of_main 0301  
              ?i1___awtoft 0078                ?i1___ftpack 0070             i1___fttol@exp1 003D  
           i1___fttol@lval 0039                     ??_main 01B8              ___fttol@sign1 00C6  
       __size_of_Lcd_Clear 000B             _analogRead$898 01A4                     ?_floor 00D4  
                   ?_ldexp 00D5                     ?_frexp 00A0           __end_of___altoft 1575  
                   _ADRESH 001E                     _ADRESL 009E           ___awdiv@dividend 00A2  
         __end_of___awtoft 0800           __end_of___ftpack 0979                     _ANSELH 0189  
         __end_of___lltoft 089F                     i1l2600 0A5B                     i1l2522 14A7  
                   i1l2602 0A69                     i1l2372 08AE                     i1l2532 0D0A  
                   i1l2382 08DA                     i1l2374 08BA                     i1l2606 0A77  
                   i1l2384 08E4                     i1l2376 08BF                     i1l2368 08A7  
                   i1l2560 0D84                     i1l2552 0D65                     i1l2624 1639  
                   i1l2538 0D20                     i1l2574 0A0C                     i1l2592 0A3E  
                   i1l2594 0A4E                     u311_25 08F9                     u303_25 08B3  
                   u305_25 08CE                     u307_25 08DD                     u332_25 0D32  
                   u333_25 0D44                     u334_25 0D66                     u342_25 0A3F  
                   u335_25 0D77                     u336_25 0D85                     u345_25 0A5D  
                   u339_25 0A13                  ??_Lcd_Cmd 00A1                 _Sharp_Init 1461  
  __size_of_Lcd_Write_Char 0043             __CFG_PWRTE$OFF 0000                  ??_Process 01AB  
                   ___bmul 144E                     ___ftge 1740                  ??___awdiv 00A4  
                ??___ftadd 00C4                  ??___awmod 00A4                  ??___ftdiv 00C4  
                ??___ftneg 00A3                  ??___ftmul 00B4                  ??___ftsub 00D1  
                ??___fttol 00C2           ___awdiv@quotient 00A7            ___awmod@divisor 00A0  
          ___awmod@counter 00A5                 Process@foo 01B6                 Process@sum 01B4  
                   floor@i 00D8          analogRead@channel 00ED                     floor@x 00D4  
    ___ftmul@f3_as_product 00B9          __end_ofi1___ftdiv 0DAA          __end_ofi1___fttol 0A80  
                   saved_w 007E    Process@accurateDistance 01AE            Lcd_Set_Cursor@a 00A7  
          Lcd_Set_Cursor@b 00A4            Lcd_Set_Cursor@y 00A9            Lcd_Set_Cursor@z 00A8  
      __size_ofi1___awtoft 0021        __size_ofi1___ftpack 006C           __end_ofexp@coeff 0824  
         __end_oflog@coeff 083F    __end_of__initialization 003E                 ___altoft@c 00CC  
          i1___awtoft@sign 007D                 ___ftadd@f1 00BE                 ___ftadd@f2 00C1  
               ___ftge@ff1 00BE                 ___ftge@ff2 00C1            i1___ftpack@sign 0074  
        __end_of_Lcd_Clear 144E               eval_poly@res 00D2                 ___ftdiv@f1 00C1  
               ___ftdiv@f2 00BE                 ___ftdiv@f3 00C9                 ___ftneg@f1 00A0  
               ___awtoft@c 00A8        ___bmul@multiplicand 00A0                 ___ftmul@f1 00AE  
               ___ftmul@f2 00B1                 ___ftsub@f1 00CE                 ___ftsub@f2 00CB  
               ___fttol@f1 00BE             __pcstackCOMMON 0070               __pidataBANK3 086B  
               ___lltoft@c 00A8              __end_of_floor 0BA7              __end_of_ldexp 0C40  
            __end_of_frexp 15B7             _Lcd_Set_Cursor 1693            i1___fttol@sign1 0038  
                ?_Lcd_Init 0070                  ?_Lcd_Port 0070                    ??_floor 00D7  
                  ??_ldexp 00DA                    ??_frexp 00A4                 __pbssBANK0 0044  
       __size_of_eval_poly 0079                ?_Sharp_Init 0070                 _analogRead 0C40  
     __size_of_ISR_HANDLER 004C                 __pmaintext 0042                    ?___bmul 00A0  
                  ?___ftge 00BE                 __pintentry 0004                  ?___altoft 00CC  
__size_of_Lcd_Write_String 0026                  ?___awtoft 00A8                  ?___ftpack 00A0  
   __end_of_Lcd_Set_Cursor 16E5                  ?___lltoft 00A8                 ??_Lcd_Init 00A4  
               ??_Lcd_Port 00A0                 __stringtab 0800             _Lcd_Write_Char 15B7  
                  _Lcd_Cmd 147D                    _Process 0F30            __size_of___bmul 0013  
          __size_of___ftge 005F               ??i1___awtoft 007B               ??i1___ftpack 0075  
                  ___awdiv 16E5                    ___ftadd 05FF                    ___awmod 1646  
                  ___ftdiv 0DAA                    ___ftneg 1439                    ___ftmul 0708  
                  ___ftsub 14BE                    ___fttol 0A80                 ??___altoft 00D0  
                  _exp$901 00E3                    _exp$667 00E6                 ??___awtoft 00AB  
               ??___ftpack 00A5                  _ANSELbits 0188          __end_of_eval_poly 09F2  
          ?_Lcd_Set_Cursor 00A4                 ??___lltoft 00AC                    __ptext1 1646  
                  __ptext2 1461                    __ptext3 0F30                    __ptext4 0C40  
                  __ptext5 0301                    __ptext6 0E62                    __ptext7 04B7  
                  __ptext8 0BA7                    __ptext9 1439                    _pow$900 0199  
      __size_of_Sharp_Init 001C                    _pow$899 0196                  _T1CONbits 0010  
             __size_of_exp 0148               __size_of_log 00CE               __size_of_pow 01B6  
         ___awmod@dividend 00A2     __end_of_Lcd_Write_Char 15FA       end_of_initialization 003E  
                  exp@sign 00EB         __end_ofi1___awtoft 14BE         __end_ofi1___ftpack 090B  
            analogRead@raw 01A7                ?_analogRead 00ED                    pow@sign 019C  
                Lcd_Port@a 00A0                  _PORTBbits 0006             Process@channel 01A9  
                _TRISAbits 0085                  i1___ftdiv 0CF2                  i1___fttol 09F2  
          ?_Lcd_Write_Char 0070          Lcd_Write_String@a 00A7          Lcd_Write_String@i 00A5  
              ___ftdiv@exp 00CC                ___ftmul@exp 00B8                  _Lcd_Clear 1443  
           __end_of___bmul 1461             __end_of___ftge 179F           _Lcd_Write_String 14DF  
               floor@expon 00DB        __size_of_analogRead 00B2        start_initialization 0015  
               eval_poly@d 00CE                 eval_poly@n 00CF                 eval_poly@x 00CB  
               ldexp@value 00D5                __end_of_exp 05FF                __end_of_log 0F30  
              __end_of_pow 04B7                 ?i1___ftdiv 0020                 ?i1___fttol 0030  
        __size_of_Lcd_Init 0061          __size_of_Lcd_Port 002E                 frexp@value 00A0  
             ??_Sharp_Init 00A0                 ?_Lcd_Clear 0070                   ??___bmul 00A1  
                 ??___ftge 00C4                __pdataBANK3 01BB            Lcd_Write_Char@a 00A4  
          Lcd_Write_Char@y 00A3          __size_of___altoft 0042          __size_of___awtoft 0025  
        __size_of___ftpack 006E         __end_of_Sharp_Init 147D          __size_of___lltoft 002F  
                ___latbits 0002              __pcstackBANK0 0020              __pcstackBANK1 00A0  
            __pcstackBANK3 0190              ??_ISR_HANDLER 003E                   ?_Lcd_Cmd 0070  
         ??_Lcd_Set_Cursor 00A5                   ?_Process 01A9                   ?___awdiv 00A0  
                 ?___ftadd 00BE                   ?___awmod 00A0                   ?___ftdiv 00BE  
                 ?___ftneg 00A0                   ?___ftmul 00AE                   ?___ftsub 00CB  
                 ?___fttol 00BE                  __pstrings 0800                  _ldexp$704 00DC  
                _eval_poly 0979                ??i1___ftdiv 0026                ??i1___fttol 0034  
           __size_of_floor 0099             __size_of_ldexp 0099             __size_of_frexp 0042  
        interrupt_function 0004                   _IOCBbits 0096               ??_analogRead 00EF  
                 Lcd_Cmd@a 00A3        __end_of_ISR_HANDLER 1646                ??_Lcd_Clear 00A4  
               _ADCON0bits 001F                __stringbase 0805                 _ADCON1bits 009F  
         ??_Lcd_Write_Char 00A1                 ?_eval_poly 00CB    Process@previousDistance 01AC  
       __end_of_analogRead 0CF2                   _Lcd_Init 179F                   _Lcd_Port 1505  
 __end_of_Lcd_Write_String 1505           __size_of_Lcd_Cmd 0020                  frexp@eptr 00A3  
                 Process@i 01B2                   Process@p 01B0           __size_of_Process 00D0  
         __size_of___awdiv 005B           __size_of___ftadd 0109           __size_of___awmod 004D  
         __size_of___ftdiv 00B8           __size_of___ftneg 000A                   ___altoft 1533  
         __size_of___ftmul 00D3           __size_of___ftsub 0021           __size_of___fttol 008E  
                 ___awtoft 07DB                   ___ftpack 090B         __end_of__stringtab 0806  
                 ___lltoft 0870                   __ptext10 0B0E                   __ptext11 1575  
                 __ptext20 0DAA                   __ptext12 0A80                   __ptext21 07DB  
                 __ptext13 1740                   __ptext30 147D                   __ptext22 0870  
                 __ptext14 1533                   __ptext31 1505                   __ptext23 090B  
                 __ptext15 0979                   __ptext32 15FA                   __ptext24 16E5  
                 __ptext16 0708                   __ptext33 09F2                   __ptext25 14DF  
                 __ptext17 144E                   __ptext34 0CF2                   __ptext26 15B7  
                 __ptext18 14BE                   __ptext35 149D                   __ptext27 1693  
                 __ptext19 05FF                   __ptext36 089F                   __ptext28 179F  
                 __ptext29 1443          __CFG_BOR4V$BOR40V 0000                _ISR_HANDLER 15FA  
            __size_of_main 02BF                   exp@coeff 0806                   log@coeff 0824  
               _INTCONbits 000B                ??_eval_poly 00D1             analogRead@volt 01A1  
       Lcd_Write_Char@temp 00A2                   intlevel1 0000                  stringcode 0800  
       Lcd_Set_Cursor@temp 00AA                   stringdir 0800                   stringtab 0800  
