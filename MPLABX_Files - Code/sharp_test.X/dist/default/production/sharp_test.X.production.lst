

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Wed Dec 14 08:35:22 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2
    40                           	psect	text28,local,class=CODE,merge=1,delta=2
    41                           	psect	text29,local,class=CODE,merge=1,delta=2
    42                           	psect	text30,local,class=CODE,merge=1,delta=2
    43                           	psect	text31,local,class=CODE,merge=1,delta=2
    44                           	dabs	1,0x7E,2
    45  0000                     	;# 
    46  0001                     	;# 
    47  0002                     	;# 
    48  0003                     	;# 
    49  0004                     	;# 
    50  0005                     	;# 
    51  0006                     	;# 
    52  0007                     	;# 
    53  0008                     	;# 
    54  0009                     	;# 
    55  000A                     	;# 
    56  000B                     	;# 
    57  000C                     	;# 
    58  000D                     	;# 
    59  000E                     	;# 
    60  000E                     	;# 
    61  000F                     	;# 
    62  0010                     	;# 
    63  0011                     	;# 
    64  0012                     	;# 
    65  0013                     	;# 
    66  0014                     	;# 
    67  0015                     	;# 
    68  0015                     	;# 
    69  0016                     	;# 
    70  0017                     	;# 
    71  0018                     	;# 
    72  0019                     	;# 
    73  001A                     	;# 
    74  001B                     	;# 
    75  001B                     	;# 
    76  001C                     	;# 
    77  001D                     	;# 
    78  001E                     	;# 
    79  001F                     	;# 
    80  0081                     	;# 
    81  0085                     	;# 
    82  0086                     	;# 
    83  0087                     	;# 
    84  0088                     	;# 
    85  0089                     	;# 
    86  008C                     	;# 
    87  008D                     	;# 
    88  008E                     	;# 
    89  008F                     	;# 
    90  0090                     	;# 
    91  0091                     	;# 
    92  0092                     	;# 
    93  0093                     	;# 
    94  0093                     	;# 
    95  0093                     	;# 
    96  0094                     	;# 
    97  0095                     	;# 
    98  0096                     	;# 
    99  0097                     	;# 
   100  0098                     	;# 
   101  0099                     	;# 
   102  009A                     	;# 
   103  009B                     	;# 
   104  009C                     	;# 
   105  009D                     	;# 
   106  009E                     	;# 
   107  009F                     	;# 
   108  0105                     	;# 
   109  0107                     	;# 
   110  0108                     	;# 
   111  0109                     	;# 
   112  010C                     	;# 
   113  010C                     	;# 
   114  010D                     	;# 
   115  010E                     	;# 
   116  010F                     	;# 
   117  0185                     	;# 
   118  0187                     	;# 
   119  0188                     	;# 
   120  0189                     	;# 
   121  018C                     	;# 
   122  018D                     	;# 
   123                           
   124                           	psect	idataBANK1
   125  0004                     __pidataBANK1:	
   126                           
   127                           ;initializer for _tol
   128  0004  34D7               	retlw	215
   129  0005  3423               	retlw	35
   130  0006  343C               	retlw	60
   131                           
   132                           ;initializer for _avg
   133  0007  3419               	retlw	25
   134  0008  3400               	retlw	0
   135                           
   136                           	psect	strings
   137  0800                     __pstrings:	
   138  0800                     stringtab:	
   139  0800                     __stringtab:	
   140  0800                     stringcode:	
   141                           ;	String table - string pointers are 1 byte each
   142                           
   143  0800                     stringdir:	
   144  0800  3008               	movlw	high stringdir
   145  0801  008A               	movwf	10
   146  0802  0804               	movf	4,w
   147  0803  0A84               	incf	4,f
   148  0804  0782               	addwf	2,f
   149  0805                     __stringbase:	
   150  0805  3400               	retlw	0
   151  0806                     __end_of__stringtab:	
   152  0806                     exp@coeff:	
   153  0806  3400               	retlw	0
   154  0807  3480               	retlw	128
   155  0808  343F               	retlw	63
   156  0809  3472               	retlw	114
   157  080A  3431               	retlw	49
   158  080B  343F               	retlw	63
   159  080C  34FE               	retlw	254
   160  080D  3475               	retlw	117
   161  080E  343E               	retlw	62
   162  080F  3458               	retlw	88
   163  0810  3463               	retlw	99
   164  0811  343D               	retlw	61
   165  0812  3495               	retlw	149
   166  0813  341D               	retlw	29
   167  0814  343C               	retlw	60
   168  0815  34C5               	retlw	197
   169  0816  34AE               	retlw	174
   170  0817  343A               	retlw	58
   171  0818  3479               	retlw	121
   172  0819  3421               	retlw	33
   173  081A  3439               	retlw	57
   174  081B  3494               	retlw	148
   175  081C  3480               	retlw	128
   176  081D  3437               	retlw	55
   177  081E  3493               	retlw	147
   178  081F  34A7               	retlw	167
   179  0820  3435               	retlw	53
   180  0821  3456               	retlw	86
   181  0822  3415               	retlw	21
   182  0823  3434               	retlw	52
   183  0824                     __end_ofexp@coeff:	
   184  0824                     log@coeff:	
   185  0824  3400               	retlw	0
   186  0825  3400               	retlw	0
   187  0826  3400               	retlw	0
   188  0827  3400               	retlw	0
   189  0828  3480               	retlw	128
   190  0829  343F               	retlw	63
   191  082A  34F0               	retlw	240
   192  082B  34FF               	retlw	255
   193  082C  34BE               	retlw	190
   194  082D  34E2               	retlw	226
   195  082E  34A9               	retlw	169
   196  082F  343E               	retlw	62
   197  0830  3483               	retlw	131
   198  0831  3476               	retlw	118
   199  0832  34BE               	retlw	190
   200  0833  34AE               	retlw	174
   201  0834  342B               	retlw	43
   202  0835  343E               	retlw	62
   203  0836  343C               	retlw	60
   204  0837  34C3               	retlw	195
   205  0838  34BD               	retlw	189
   206  0839  34D2               	retlw	210
   207  083A  3413               	retlw	19
   208  083B  343D               	retlw	61
   209  083C  3478               	retlw	120
   210  083D  34D3               	retlw	211
   211  083E  34BB               	retlw	187
   212  083F                     __end_oflog@coeff:	
   213  001F                     _ADCON0bits	set	31
   214  001E                     _ADRESH	set	30
   215  0042                     _RD2	set	66
   216  0043                     _RD3	set	67
   217  0044                     _RD4	set	68
   218  0045                     _RD5	set	69
   219  0046                     _RD6	set	70
   220  0047                     _RD7	set	71
   221  009F                     _ADCON1bits	set	159
   222  009E                     _ADRESL	set	158
   223  0085                     _TRISA	set	133
   224  0085                     _TRISAbits	set	133
   225  0088                     _TRISD	set	136
   226  0188                     _ANSEL	set	392
   227  0189                     _ANSELH	set	393
   228  0188                     _ANSELbits	set	392
   229  083F                     STR_2:	
   230  083F  3448               	retlw	72	;'H'
   231  0840  3469               	retlw	105	;'i'
   232  0841  3472               	retlw	114	;'r'
   233  0842  3461               	retlw	97	;'a'
   234  0843  346E               	retlw	110	;'n'
   235  0844  3420               	retlw	32	;' '
   236  0845  3450               	retlw	80	;'P'
   237  0846  3465               	retlw	101	;'e'
   238  0847  3472               	retlw	114	;'r'
   239  0848  3465               	retlw	101	;'e'
   240  0849  3472               	retlw	114	;'r'
   241  084A  3461               	retlw	97	;'a'
   242  084B  3400               	retlw	0
   243  084C                     STR_1:	
   244  084C  3444               	retlw	68	;'D'
   245  084D  3465               	retlw	101	;'e'
   246  084E  3476               	retlw	118	;'v'
   247  084F  3465               	retlw	101	;'e'
   248  0850  346C               	retlw	108	;'l'
   249  0851  346F               	retlw	111	;'o'
   250  0852  3470               	retlw	112	;'p'
   251  0853  3465               	retlw	101	;'e'
   252  0854  3464               	retlw	100	;'d'
   253  0855  3420               	retlw	32	;' '
   254  0856  3442               	retlw	66	;'B'
   255  0857  3479               	retlw	121	;'y'
   256  0858  3400               	retlw	0
   257  0859                     STR_3:	
   258  0859  3444               	retlw	68	;'D'
   259  085A  3469               	retlw	105	;'i'
   260  085B  3473               	retlw	115	;'s'
   261  085C  3474               	retlw	116	;'t'
   262  085D  3461               	retlw	97	;'a'
   263  085E  346E               	retlw	110	;'n'
   264  085F  3463               	retlw	99	;'c'
   265  0860  3465               	retlw	101	;'e'
   266  0861  3420               	retlw	32	;' '
   267  0862  343D               	retlw	61	;'='
   268  0863  3420               	retlw	32	;' '
   269  0864  3400               	retlw	0
   270                           
   271                           ; #config settings
   272  0000                     
   273                           	psect	cinit
   274  07DA                     start_initialization:	
   275  07DA                     __initialization:	
   276                           
   277                           ; Initialize objects allocated to BANK1
   278  07DA  1683               	bsf	3,5	;RP0=1, select bank1
   279  07DB  1303               	bcf	3,6	;RP1=0, select bank1
   280  07DC  120A  118A  2004  120A  118A  	fcall	__pidataBANK1	;fetch initializer
   281  07E1  00BD               	movwf	__pdataBANK1& (0+127)
   282  07E2  120A  118A  2005  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
   283  07E7  00BE               	movwf	(__pdataBANK1+1)& (0+127)
   284  07E8  120A  118A  2006  120A  118A  	fcall	__pidataBANK1+2	;fetch initializer
   285  07ED  00BF               	movwf	(__pdataBANK1+2)& (0+127)
   286  07EE  120A  118A  2007  120A  118A  	fcall	__pidataBANK1+3	;fetch initializer
   287  07F3  00C0               	movwf	(__pdataBANK1+3)& (0+127)
   288  07F4  120A  118A  2008   	fcall	__pidataBANK1+4	;fetch initializer
   289  07F7  00C1               	movwf	(__pdataBANK1+4)& (0+127)
   290                           
   291                           ; Clear objects allocated to BANK1
   292  07F8  01C2               	clrf	__pbssBANK1& (0+127)
   293  07F9  01C3               	clrf	(__pbssBANK1+1)& (0+127)
   294  07FA  01C4               	clrf	(__pbssBANK1+2)& (0+127)
   295  07FB  01C5               	clrf	(__pbssBANK1+3)& (0+127)
   296  07FC                     end_of_initialization:	
   297                           ;End of C runtime variable initialization code
   298                           
   299  07FC                     __end_of__initialization:	
   300  07FC  0183               	clrf	3
   301  07FD  120A  118A  2D5F   	ljmp	_main	;jump to C main() function
   302                           
   303                           	psect	bssBANK1
   304  00C2                     __pbssBANK1:	
   305  00C2                     _a:	
   306  00C2                     	ds	2
   307  00C4                     _errno:	
   308  00C4                     	ds	2
   309                           
   310                           	psect	dataBANK1
   311  00BD                     __pdataBANK1:	
   312  00BD                     _tol:	
   313  00BD                     	ds	3
   314  00C0                     _avg:	
   315  00C0                     	ds	2
   316                           
   317                           	psect	cstackBANK1
   318  00A0                     __pcstackBANK1:	
   319  00A0                     ?_analogRead:	
   320  00A0                     analogRead@channel:	
   321                           ; 2 bytes @ 0x0
   322                           
   323                           
   324                           ; 2 bytes @ 0x0
   325  00A0                     	ds	2
   326  00A2                     ??_analogRead:	
   327                           
   328                           ; 1 bytes @ 0x2
   329  00A2                     	ds	1
   330  00A3                     analogRead@volt:	
   331                           
   332                           ; 3 bytes @ 0x3
   333  00A3                     	ds	3
   334  00A6                     _analogRead$732:	
   335                           
   336                           ; 3 bytes @ 0x6
   337  00A6                     	ds	3
   338  00A9                     analogRead@raw:	
   339                           
   340                           ; 2 bytes @ 0x9
   341  00A9                     	ds	2
   342  00AB                     ?_Process:	
   343  00AB                     Process@channel:	
   344                           ; 2 bytes @ 0xB
   345                           
   346                           
   347                           ; 2 bytes @ 0xB
   348  00AB                     	ds	2
   349  00AD                     ??_Process:	
   350                           
   351                           ; 1 bytes @ 0xD
   352  00AD                     	ds	1
   353  00AE                     Process@previousDistance:	
   354                           
   355                           ; 2 bytes @ 0xE
   356  00AE                     	ds	2
   357  00B0                     Process@accurateDistance:	
   358                           
   359                           ; 2 bytes @ 0x10
   360  00B0                     	ds	2
   361  00B2                     Process@p:	
   362                           
   363                           ; 2 bytes @ 0x12
   364  00B2                     	ds	2
   365  00B4                     Process@i:	
   366                           
   367                           ; 2 bytes @ 0x14
   368  00B4                     	ds	2
   369  00B6                     Process@sum:	
   370                           
   371                           ; 2 bytes @ 0x16
   372  00B6                     	ds	2
   373  00B8                     Process@foo:	
   374                           
   375                           ; 2 bytes @ 0x18
   376  00B8                     	ds	2
   377  00BA                     ??_main:	
   378                           
   379                           ; 1 bytes @ 0x1A
   380  00BA                     	ds	3
   381                           
   382                           	psect	cstackCOMMON
   383  0070                     __pcstackCOMMON:	
   384  0070                     ?_Lcd_Port:	
   385  0070                     ??_Lcd_Port:	
   386                           ; 1 bytes @ 0x0
   387                           
   388  0070                     ?_Lcd_Cmd:	
   389                           ; 1 bytes @ 0x0
   390                           
   391  0070                     ?_Lcd_Init:	
   392                           ; 1 bytes @ 0x0
   393                           
   394  0070                     ?_Lcd_Write_Char:	
   395                           ; 1 bytes @ 0x0
   396                           
   397  0070                     ?_Lcd_Write_String:	
   398                           ; 1 bytes @ 0x0
   399                           
   400  0070                     ?_Sharp_Init:	
   401                           ; 1 bytes @ 0x0
   402                           
   403  0070                     ??_Sharp_Init:	
   404                           ; 1 bytes @ 0x0
   405                           
   406  0070                     ?___bmul:	
   407                           ; 1 bytes @ 0x0
   408                           
   409  0070                     ?_Lcd_Clear:	
   410                           ; 1 bytes @ 0x0
   411                           
   412  0070                     ?_main:	
   413                           ; 2 bytes @ 0x0
   414                           
   415  0070                     ?___awdiv:	
   416                           ; 2 bytes @ 0x0
   417                           
   418  0070                     ?___awmod:	
   419                           ; 2 bytes @ 0x0
   420                           
   421  0070                     ?___ftpack:	
   422                           ; 2 bytes @ 0x0
   423                           
   424  0070                     ?_frexp:	
   425                           ; 3 bytes @ 0x0
   426                           
   427  0070                     ?___ftneg:	
   428                           ; 3 bytes @ 0x0
   429                           
   430  0070                     Lcd_Port@a:	
   431                           ; 3 bytes @ 0x0
   432                           
   433  0070                     ___bmul@multiplicand:	
   434                           ; 1 bytes @ 0x0
   435                           
   436  0070                     ___awdiv@divisor:	
   437                           ; 1 bytes @ 0x0
   438                           
   439  0070                     ___awmod@divisor:	
   440                           ; 2 bytes @ 0x0
   441                           
   442  0070                     ___ftpack@arg:	
   443                           ; 2 bytes @ 0x0
   444                           
   445  0070                     ___ftneg@f1:	
   446                           ; 3 bytes @ 0x0
   447                           
   448  0070                     frexp@value:	
   449                           ; 3 bytes @ 0x0
   450                           
   451                           
   452                           ; 3 bytes @ 0x0
   453  0070                     	ds	1
   454  0071                     ??_Lcd_Cmd:	
   455  0071                     ??_Lcd_Write_Char:	
   456                           ; 1 bytes @ 0x1
   457                           
   458  0071                     ??___bmul:	
   459                           ; 1 bytes @ 0x1
   460                           
   461                           
   462                           ; 1 bytes @ 0x1
   463  0071                     	ds	1
   464  0072                     Lcd_Write_Char@temp:	
   465  0072                     ___bmul@product:	
   466                           ; 1 bytes @ 0x2
   467                           
   468  0072                     ___awdiv@dividend:	
   469                           ; 1 bytes @ 0x2
   470                           
   471  0072                     ___awmod@dividend:	
   472                           ; 2 bytes @ 0x2
   473                           
   474                           
   475                           ; 2 bytes @ 0x2
   476  0072                     	ds	1
   477  0073                     ??___ftneg:	
   478  0073                     Lcd_Cmd@a:	
   479                           ; 1 bytes @ 0x3
   480                           
   481  0073                     Lcd_Write_Char@y:	
   482                           ; 1 bytes @ 0x3
   483                           
   484  0073                     ___bmul@multiplier:	
   485                           ; 1 bytes @ 0x3
   486                           
   487  0073                     ___ftpack@exp:	
   488                           ; 1 bytes @ 0x3
   489                           
   490  0073                     frexp@eptr:	
   491                           ; 1 bytes @ 0x3
   492                           
   493                           
   494                           ; 1 bytes @ 0x3
   495  0073                     	ds	1
   496  0074                     ??_frexp:	
   497  0074                     ??_Lcd_Clear:	
   498                           ; 1 bytes @ 0x4
   499                           
   500  0074                     ?_Lcd_Set_Cursor:	
   501                           ; 1 bytes @ 0x4
   502                           
   503  0074                     ??_Lcd_Init:	
   504                           ; 1 bytes @ 0x4
   505                           
   506  0074                     ??___awdiv:	
   507                           ; 1 bytes @ 0x4
   508                           
   509  0074                     ??___awmod:	
   510                           ; 1 bytes @ 0x4
   511                           
   512  0074                     Lcd_Set_Cursor@b:	
   513                           ; 1 bytes @ 0x4
   514                           
   515  0074                     Lcd_Write_Char@a:	
   516                           ; 1 bytes @ 0x4
   517                           
   518  0074                     ___ftpack@sign:	
   519                           ; 1 bytes @ 0x4
   520                           
   521                           
   522                           ; 1 bytes @ 0x4
   523  0074                     	ds	1
   524  0075                     ??___ftpack:	
   525  0075                     ??_Lcd_Set_Cursor:	
   526                           ; 1 bytes @ 0x5
   527                           
   528  0075                     ??_Lcd_Write_String:	
   529                           ; 1 bytes @ 0x5
   530                           
   531  0075                     ___awdiv@counter:	
   532                           ; 1 bytes @ 0x5
   533                           
   534  0075                     ___awmod@counter:	
   535                           ; 1 bytes @ 0x5
   536                           
   537  0075                     Lcd_Write_String@i:	
   538                           ; 1 bytes @ 0x5
   539                           
   540                           
   541                           ; 2 bytes @ 0x5
   542  0075                     	ds	1
   543  0076                     ___awdiv@sign:	
   544  0076                     ___awmod@sign:	
   545                           ; 1 bytes @ 0x6
   546                           
   547                           
   548                           ; 1 bytes @ 0x6
   549  0076                     	ds	1
   550  0077                     Lcd_Set_Cursor@a:	
   551  0077                     Lcd_Write_String@a:	
   552                           ; 1 bytes @ 0x7
   553                           
   554  0077                     ___awdiv@quotient:	
   555                           ; 1 bytes @ 0x7
   556                           
   557                           
   558                           ; 2 bytes @ 0x7
   559  0077                     	ds	1
   560  0078                     ?___awtoft:	
   561  0078                     ?___lltoft:	
   562                           ; 3 bytes @ 0x8
   563                           
   564  0078                     Lcd_Set_Cursor@z:	
   565                           ; 3 bytes @ 0x8
   566                           
   567  0078                     ___awtoft@c:	
   568                           ; 1 bytes @ 0x8
   569                           
   570  0078                     ___lltoft@c:	
   571                           ; 2 bytes @ 0x8
   572                           
   573                           
   574                           ; 4 bytes @ 0x8
   575  0078                     	ds	1
   576  0079                     Lcd_Set_Cursor@y:	
   577                           
   578                           ; 1 bytes @ 0x9
   579  0079                     	ds	1
   580  007A                     Lcd_Set_Cursor@temp:	
   581                           
   582                           ; 1 bytes @ 0xA
   583  007A                     	ds	1
   584  007B                     ??___awtoft:	
   585                           
   586                           ; 1 bytes @ 0xB
   587  007B                     	ds	1
   588  007C                     ??___lltoft:	
   589                           
   590                           ; 1 bytes @ 0xC
   591  007C                     	ds	1
   592  007D                     ___awtoft@sign:	
   593  007D                     ___lltoft@exp:	
   594                           ; 1 bytes @ 0xD
   595                           
   596                           
   597                           ; 1 bytes @ 0xD
   598  007D                     	ds	1
   599  007E                     ??___ftsub:	
   600                           
   601                           	psect	cstackBANK0
   602  0020                     __pcstackBANK0:	
   603                           ; 1 bytes @ 0xE
   604                           
   605  0020                     ?___ftmul:	
   606  0020                     ___ftmul@f1:	
   607                           ; 3 bytes @ 0x0
   608                           
   609                           
   610                           ; 3 bytes @ 0x0
   611  0020                     	ds	3
   612  0023                     ___ftmul@f2:	
   613                           
   614                           ; 3 bytes @ 0x3
   615  0023                     	ds	3
   616  0026                     ??___ftmul:	
   617                           
   618                           ; 1 bytes @ 0x6
   619  0026                     	ds	4
   620  002A                     ___ftmul@exp:	
   621                           
   622                           ; 1 bytes @ 0xA
   623  002A                     	ds	1
   624  002B                     ___ftmul@f3_as_product:	
   625                           
   626                           ; 3 bytes @ 0xB
   627  002B                     	ds	3
   628  002E                     ___ftmul@cntr:	
   629                           
   630                           ; 1 bytes @ 0xE
   631  002E                     	ds	1
   632  002F                     ___ftmul@sign:	
   633                           
   634                           ; 1 bytes @ 0xF
   635  002F                     	ds	1
   636  0030                     ?___ftge:	
   637  0030                     ?___ftadd:	
   638                           ; 1 bit 
   639                           
   640  0030                     ?___ftdiv:	
   641                           ; 3 bytes @ 0x10
   642                           
   643  0030                     ?___fttol:	
   644                           ; 3 bytes @ 0x10
   645                           
   646  0030                     ___ftadd@f1:	
   647                           ; 4 bytes @ 0x10
   648                           
   649  0030                     ___ftdiv@f2:	
   650                           ; 3 bytes @ 0x10
   651                           
   652  0030                     ___ftge@ff1:	
   653                           ; 3 bytes @ 0x10
   654                           
   655  0030                     ___fttol@f1:	
   656                           ; 3 bytes @ 0x10
   657                           
   658                           
   659                           ; 3 bytes @ 0x10
   660  0030                     	ds	3
   661  0033                     ___ftadd@f2:	
   662  0033                     ___ftdiv@f1:	
   663                           ; 3 bytes @ 0x13
   664                           
   665  0033                     ___ftge@ff2:	
   666                           ; 3 bytes @ 0x13
   667                           
   668                           
   669                           ; 3 bytes @ 0x13
   670  0033                     	ds	1
   671  0034                     ??___fttol:	
   672                           
   673                           ; 1 bytes @ 0x14
   674  0034                     	ds	2
   675  0036                     ??___ftadd:	
   676  0036                     ??___ftdiv:	
   677                           ; 1 bytes @ 0x16
   678                           
   679  0036                     ??___ftge:	
   680                           ; 1 bytes @ 0x16
   681                           
   682                           
   683                           ; 1 bytes @ 0x16
   684  0036                     	ds	2
   685  0038                     ___fttol@sign1:	
   686                           
   687                           ; 1 bytes @ 0x18
   688  0038                     	ds	1
   689  0039                     ___fttol@lval:	
   690                           
   691                           ; 4 bytes @ 0x19
   692  0039                     	ds	1
   693  003A                     ___ftadd@sign:	
   694  003A                     ___ftdiv@cntr:	
   695                           ; 1 bytes @ 0x1A
   696                           
   697                           
   698                           ; 1 bytes @ 0x1A
   699  003A                     	ds	1
   700  003B                     ___ftadd@exp2:	
   701  003B                     ___ftdiv@f3:	
   702                           ; 1 bytes @ 0x1B
   703                           
   704                           
   705                           ; 3 bytes @ 0x1B
   706  003B                     	ds	1
   707  003C                     ___ftadd@exp1:	
   708                           
   709                           ; 1 bytes @ 0x1C
   710  003C                     	ds	1
   711  003D                     ?_eval_poly:	
   712  003D                     ?___ftsub:	
   713                           ; 3 bytes @ 0x1D
   714                           
   715  003D                     ___fttol@exp1:	
   716                           ; 3 bytes @ 0x1D
   717                           
   718  003D                     ___ftsub@f2:	
   719                           ; 1 bytes @ 0x1D
   720                           
   721  003D                     eval_poly@x:	
   722                           ; 3 bytes @ 0x1D
   723                           
   724                           
   725                           ; 3 bytes @ 0x1D
   726  003D                     	ds	1
   727  003E                     ?___altoft:	
   728  003E                     ___ftdiv@exp:	
   729                           ; 3 bytes @ 0x1E
   730                           
   731  003E                     ___altoft@c:	
   732                           ; 1 bytes @ 0x1E
   733                           
   734                           
   735                           ; 4 bytes @ 0x1E
   736  003E                     	ds	1
   737  003F                     ___ftdiv@sign:	
   738                           
   739                           ; 1 bytes @ 0x1F
   740  003F                     	ds	1
   741  0040                     eval_poly@d:	
   742  0040                     ___ftsub@f1:	
   743                           ; 1 bytes @ 0x20
   744                           
   745                           
   746                           ; 3 bytes @ 0x20
   747  0040                     	ds	1
   748  0041                     eval_poly@n:	
   749                           
   750                           ; 2 bytes @ 0x21
   751  0041                     	ds	1
   752  0042                     ??___altoft:	
   753                           
   754                           ; 1 bytes @ 0x22
   755  0042                     	ds	1
   756  0043                     ??_eval_poly:	
   757                           
   758                           ; 1 bytes @ 0x23
   759  0043                     	ds	1
   760  0044                     ___altoft@exp:	
   761  0044                     eval_poly@res:	
   762                           ; 1 bytes @ 0x24
   763                           
   764                           
   765                           ; 3 bytes @ 0x24
   766  0044                     	ds	1
   767  0045                     ___altoft@sign:	
   768                           
   769                           ; 1 bytes @ 0x25
   770  0045                     	ds	1
   771  0046                     ?_floor:	
   772  0046                     floor@x:	
   773                           ; 3 bytes @ 0x26
   774                           
   775                           
   776                           ; 3 bytes @ 0x26
   777  0046                     	ds	1
   778  0047                     ?_log:	
   779  0047                     ?_ldexp:	
   780                           ; 3 bytes @ 0x27
   781                           
   782  0047                     ldexp@value:	
   783                           ; 3 bytes @ 0x27
   784                           
   785  0047                     log@x:	
   786                           ; 3 bytes @ 0x27
   787                           
   788                           
   789                           ; 3 bytes @ 0x27
   790  0047                     	ds	2
   791  0049                     ??_floor:	
   792                           
   793                           ; 1 bytes @ 0x29
   794  0049                     	ds	1
   795  004A                     ??_log:	
   796  004A                     ldexp@newexp:	
   797                           ; 1 bytes @ 0x2A
   798                           
   799  004A                     floor@i:	
   800                           ; 2 bytes @ 0x2A
   801                           
   802                           
   803                           ; 3 bytes @ 0x2A
   804  004A                     	ds	1
   805  004B                     log@exponent:	
   806                           
   807                           ; 2 bytes @ 0x2B
   808  004B                     	ds	1
   809  004C                     ??_ldexp:	
   810                           
   811                           ; 1 bytes @ 0x2C
   812  004C                     	ds	1
   813  004D                     floor@expon:	
   814                           
   815                           ; 2 bytes @ 0x2D
   816  004D                     	ds	1
   817  004E                     _ldexp$541:	
   818                           
   819                           ; 3 bytes @ 0x2E
   820  004E                     	ds	3
   821  0051                     ?_exp:	
   822  0051                     exp@x:	
   823                           ; 3 bytes @ 0x31
   824                           
   825                           
   826                           ; 3 bytes @ 0x31
   827  0051                     	ds	3
   828  0054                     ??_exp:	
   829                           
   830                           ; 1 bytes @ 0x34
   831  0054                     	ds	1
   832  0055                     _exp$735:	
   833                           
   834                           ; 3 bytes @ 0x35
   835  0055                     	ds	3
   836  0058                     _exp$504:	
   837                           
   838                           ; 3 bytes @ 0x38
   839  0058                     	ds	3
   840  005B                     exp@exponent:	
   841                           
   842                           ; 2 bytes @ 0x3B
   843  005B                     	ds	2
   844  005D                     exp@sign:	
   845                           
   846                           ; 1 bytes @ 0x3D
   847  005D                     	ds	1
   848  005E                     ?_pow:	
   849  005E                     pow@x:	
   850                           ; 3 bytes @ 0x3E
   851                           
   852                           
   853                           ; 3 bytes @ 0x3E
   854  005E                     	ds	3
   855  0061                     pow@y:	
   856                           
   857                           ; 3 bytes @ 0x41
   858  0061                     	ds	3
   859  0064                     ??_pow:	
   860                           
   861                           ; 1 bytes @ 0x44
   862  0064                     	ds	1
   863  0065                     _pow$733:	
   864                           
   865                           ; 3 bytes @ 0x45
   866  0065                     	ds	3
   867  0068                     _pow$734:	
   868                           
   869                           ; 3 bytes @ 0x48
   870  0068                     	ds	3
   871  006B                     pow@sign:	
   872                           
   873                           ; 1 bytes @ 0x4B
   874  006B                     	ds	1
   875  006C                     pow@yi:	
   876                           
   877                           ; 4 bytes @ 0x4C
   878  006C                     	ds	4
   879                           
   880                           	psect	maintext
   881  055F                     __pmaintext:	
   882 ;;
   883 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   884 ;;
   885 ;; *************** function _main *****************
   886 ;; Defined at:
   887 ;;		line 36 in file "sharp.c"
   888 ;; Parameters:    Size  Location     Type
   889 ;;		None
   890 ;; Auto vars:     Size  Location     Type
   891 ;;		None
   892 ;; Return value:  Size  Location     Type
   893 ;;                  2  101[None  ] int 
   894 ;; Registers used:
   895 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   896 ;; Tracked objects:
   897 ;;		On entry : B00/0
   898 ;;		On exit  : 0/0
   899 ;;		Unchanged: 0/0
   900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   901 ;;      Params:         0       0       0       0       0
   902 ;;      Locals:         0       0       0       0       0
   903 ;;      Temps:          0       0       3       0       0
   904 ;;      Totals:         0       0       3       0       0
   905 ;;Total ram usage:        3 bytes
   906 ;; Hardware stack levels required when called:    7
   907 ;; This function calls:
   908 ;;		_Lcd_Clear
   909 ;;		_Lcd_Init
   910 ;;		_Lcd_Set_Cursor
   911 ;;		_Lcd_Write_Char
   912 ;;		_Lcd_Write_String
   913 ;;		_Process
   914 ;;		_Sharp_Init
   915 ;;		___awdiv
   916 ;;		___awmod
   917 ;; This function is called by:
   918 ;;		Startup code after reset
   919 ;; This function uses a non-reentrant model
   920 ;;
   921                           
   922                           
   923                           ;psect for function _main
   924  055F                     _main:	
   925                           
   926                           ;sharp.c: 38: TRISD = 0x00;
   927                           
   928                           ;incstack = 0
   929                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   930  055F  1683               	bsf	3,5	;RP0=1, select bank1
   931  0560  1303               	bcf	3,6	;RP1=0, select bank1
   932  0561  0188               	clrf	8	;volatile
   933                           
   934                           ;sharp.c: 39: Sharp_Init();
   935  0562  120A  158A  21E2  120A  118A  	fcall	_Sharp_Init
   936                           
   937                           ;sharp.c: 43: Lcd_Init();
   938  0567  120A  158A  23FD  120A  118A  	fcall	_Lcd_Init
   939                           
   940                           ;sharp.c: 45: Lcd_Set_Cursor(1,1);
   941  056C  01F4               	clrf	Lcd_Set_Cursor@b
   942  056D  0AF4               	incf	Lcd_Set_Cursor@b,f
   943  056E  3001               	movlw	1
   944  056F  120A  158A  230F  120A  118A  	fcall	_Lcd_Set_Cursor
   945                           
   946                           ;sharp.c: 46: Lcd_Write_String("Developed By");
   947  0574  3047               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   948  0575  120A  158A  2240  120A  118A  	fcall	_Lcd_Write_String
   949                           
   950                           ;sharp.c: 47: Lcd_Set_Cursor(2,1);
   951  057A  01F4               	clrf	Lcd_Set_Cursor@b
   952  057B  0AF4               	incf	Lcd_Set_Cursor@b,f
   953  057C  3002               	movlw	2
   954  057D  120A  158A  230F  120A  118A  	fcall	_Lcd_Set_Cursor
   955                           
   956                           ;sharp.c: 48: Lcd_Write_String("Hiran Perera");
   957  0582  303A               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   958  0583  120A  158A  2240  120A  118A  	fcall	_Lcd_Write_String
   959                           
   960                           ;sharp.c: 49: _delay((unsigned long)((3000)*(8000000/4000.0)));
   961  0588  301F               	movlw	31
   962  0589  1683               	bsf	3,5	;RP0=1, select bank1
   963  058A  1303               	bcf	3,6	;RP1=0, select bank1
   964  058B  00BC               	movwf	(??_main^(0+128)+2)
   965  058C  3071               	movlw	113
   966  058D  00BB               	movwf	(??_main^(0+128)+1)
   967  058E  303B               	movlw	59
   968  058F  00BA               	movwf	??_main^(0+128)
   969  0590                     u2837:	
   970  0590  0BBA               	decfsz	??_main^(0+128),f
   971  0591  2D90               	goto	u2837
   972  0592  0BBB               	decfsz	(??_main^(0+128)+1),f
   973  0593  2D90               	goto	u2837
   974  0594  0BBC               	decfsz	(??_main^(0+128)+2),f
   975  0595  2D90               	goto	u2837
   976  0596  0000               	nop
   977                           
   978                           ;sharp.c: 50: Lcd_Clear();
   979  0597  120A  158A  2192  120A  118A  	fcall	_Lcd_Clear
   980  059C                     l2286:	
   981                           ;sharp.c: 54: while(1)
   982                           
   983                           
   984                           ;sharp.c: 55: {
   985                           ;sharp.c: 56: a=Process(2);
   986  059C  3002               	movlw	2
   987  059D  1683               	bsf	3,5	;RP0=1, select bank1
   988  059E  1303               	bcf	3,6	;RP1=0, select bank1
   989  059F  00AB               	movwf	Process@channel^(0+128)
   990  05A0  3000               	movlw	0
   991  05A1  00AC               	movwf	(Process@channel^(0+128)+1)
   992  05A2  120A  158A  275C  120A  118A  	fcall	_Process
   993  05A7  1683               	bsf	3,5	;RP0=1, select bank1
   994  05A8  1303               	bcf	3,6	;RP1=0, select bank1
   995  05A9  082C               	movf	(?_Process+1)^(0+128),w
   996  05AA  00C3               	movwf	(_a+1)^(0+128)
   997  05AB  082B               	movf	?_Process^(0+128),w
   998  05AC  00C2               	movwf	_a^(0+128)
   999                           
  1000                           ;sharp.c: 61: Lcd_Clear();
  1001  05AD  120A  158A  2192  120A  118A  	fcall	_Lcd_Clear
  1002                           
  1003                           ;sharp.c: 62: Lcd_Set_Cursor(1,1);
  1004  05B2  01F4               	clrf	Lcd_Set_Cursor@b
  1005  05B3  0AF4               	incf	Lcd_Set_Cursor@b,f
  1006  05B4  3001               	movlw	1
  1007  05B5  120A  158A  230F  120A  118A  	fcall	_Lcd_Set_Cursor
  1008                           
  1009                           ;sharp.c: 63: Lcd_Write_String("Distance = ");
  1010  05BA  3054               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1011  05BB  120A  158A  2240  120A  118A  	fcall	_Lcd_Write_String
  1012                           
  1013                           ;sharp.c: 65: Lcd_Set_Cursor(2,15);
  1014  05C0  300F               	movlw	15
  1015  05C1  1683               	bsf	3,5	;RP0=1, select bank1
  1016  05C2  1303               	bcf	3,6	;RP1=0, select bank1
  1017  05C3  00BA               	movwf	??_main^(0+128)
  1018  05C4  083A               	movf	??_main^(0+128),w
  1019  05C5  00F4               	movwf	Lcd_Set_Cursor@b
  1020  05C6  3002               	movlw	2
  1021  05C7  120A  158A  230F  120A  118A  	fcall	_Lcd_Set_Cursor
  1022                           
  1023                           ;sharp.c: 66: Lcd_Write_Char(a%10+48);
  1024  05CC  300A               	movlw	10
  1025  05CD  00F0               	movwf	___awmod@divisor
  1026  05CE  3000               	movlw	0
  1027  05CF  00F1               	movwf	___awmod@divisor+1
  1028  05D0  1683               	bsf	3,5	;RP0=1, select bank1
  1029  05D1  1303               	bcf	3,6	;RP1=0, select bank1
  1030  05D2  0843               	movf	(_a+1)^(0+128),w
  1031  05D3  00F3               	movwf	___awmod@dividend+1
  1032  05D4  0842               	movf	_a^(0+128),w
  1033  05D5  00F2               	movwf	___awmod@dividend
  1034  05D6  120A  158A  2359  120A  118A  	fcall	___awmod
  1035  05DB  0870               	movf	?___awmod,w
  1036  05DC  3E30               	addlw	48
  1037  05DD  120A  118A  2009  120A  118A  	fcall	_Lcd_Write_Char
  1038                           
  1039                           ;sharp.c: 68: a=a/10;
  1040  05E2  300A               	movlw	10
  1041  05E3  00F0               	movwf	___awdiv@divisor
  1042  05E4  3000               	movlw	0
  1043  05E5  00F1               	movwf	___awdiv@divisor+1
  1044  05E6  1683               	bsf	3,5	;RP0=1, select bank1
  1045  05E7  1303               	bcf	3,6	;RP1=0, select bank1
  1046  05E8  0843               	movf	(_a+1)^(0+128),w
  1047  05E9  00F3               	movwf	___awdiv@dividend+1
  1048  05EA  0842               	movf	_a^(0+128),w
  1049  05EB  00F2               	movwf	___awdiv@dividend
  1050  05EC  120A  158A  23A4  120A  118A  	fcall	___awdiv
  1051  05F1  0871               	movf	?___awdiv+1,w
  1052  05F2  1683               	bsf	3,5	;RP0=1, select bank1
  1053  05F3  1303               	bcf	3,6	;RP1=0, select bank1
  1054  05F4  00C3               	movwf	(_a+1)^(0+128)
  1055  05F5  0870               	movf	?___awdiv,w
  1056  05F6  00C2               	movwf	_a^(0+128)
  1057                           
  1058                           ;sharp.c: 69: Lcd_Set_Cursor(2,14);
  1059  05F7  300E               	movlw	14
  1060  05F8  00BA               	movwf	??_main^(0+128)
  1061  05F9  083A               	movf	??_main^(0+128),w
  1062  05FA  00F4               	movwf	Lcd_Set_Cursor@b
  1063  05FB  3002               	movlw	2
  1064  05FC  120A  158A  230F  120A  118A  	fcall	_Lcd_Set_Cursor
  1065                           
  1066                           ;sharp.c: 70: Lcd_Write_Char(a%10+48);
  1067  0601  300A               	movlw	10
  1068  0602  00F0               	movwf	___awmod@divisor
  1069  0603  3000               	movlw	0
  1070  0604  00F1               	movwf	___awmod@divisor+1
  1071  0605  1683               	bsf	3,5	;RP0=1, select bank1
  1072  0606  1303               	bcf	3,6	;RP1=0, select bank1
  1073  0607  0843               	movf	(_a+1)^(0+128),w
  1074  0608  00F3               	movwf	___awmod@dividend+1
  1075  0609  0842               	movf	_a^(0+128),w
  1076  060A  00F2               	movwf	___awmod@dividend
  1077  060B  120A  158A  2359  120A  118A  	fcall	___awmod
  1078  0610  0870               	movf	?___awmod,w
  1079  0611  3E30               	addlw	48
  1080  0612  120A  118A  2009  120A  118A  	fcall	_Lcd_Write_Char
  1081                           
  1082                           ;sharp.c: 72: a=a/10;
  1083  0617  300A               	movlw	10
  1084  0618  00F0               	movwf	___awdiv@divisor
  1085  0619  3000               	movlw	0
  1086  061A  00F1               	movwf	___awdiv@divisor+1
  1087  061B  1683               	bsf	3,5	;RP0=1, select bank1
  1088  061C  1303               	bcf	3,6	;RP1=0, select bank1
  1089  061D  0843               	movf	(_a+1)^(0+128),w
  1090  061E  00F3               	movwf	___awdiv@dividend+1
  1091  061F  0842               	movf	_a^(0+128),w
  1092  0620  00F2               	movwf	___awdiv@dividend
  1093  0621  120A  158A  23A4  120A  118A  	fcall	___awdiv
  1094  0626  0871               	movf	?___awdiv+1,w
  1095  0627  1683               	bsf	3,5	;RP0=1, select bank1
  1096  0628  1303               	bcf	3,6	;RP1=0, select bank1
  1097  0629  00C3               	movwf	(_a+1)^(0+128)
  1098  062A  0870               	movf	?___awdiv,w
  1099  062B  00C2               	movwf	_a^(0+128)
  1100                           
  1101                           ;sharp.c: 73: Lcd_Set_Cursor(2,13);
  1102  062C  300D               	movlw	13
  1103  062D  00BA               	movwf	??_main^(0+128)
  1104  062E  083A               	movf	??_main^(0+128),w
  1105  062F  00F4               	movwf	Lcd_Set_Cursor@b
  1106  0630  3002               	movlw	2
  1107  0631  120A  158A  230F  120A  118A  	fcall	_Lcd_Set_Cursor
  1108                           
  1109                           ;sharp.c: 74: Lcd_Write_Char(a%10+48);
  1110  0636  300A               	movlw	10
  1111  0637  00F0               	movwf	___awmod@divisor
  1112  0638  3000               	movlw	0
  1113  0639  00F1               	movwf	___awmod@divisor+1
  1114  063A  1683               	bsf	3,5	;RP0=1, select bank1
  1115  063B  1303               	bcf	3,6	;RP1=0, select bank1
  1116  063C  0843               	movf	(_a+1)^(0+128),w
  1117  063D  00F3               	movwf	___awmod@dividend+1
  1118  063E  0842               	movf	_a^(0+128),w
  1119  063F  00F2               	movwf	___awmod@dividend
  1120  0640  120A  158A  2359  120A  118A  	fcall	___awmod
  1121  0645  0870               	movf	?___awmod,w
  1122  0646  3E30               	addlw	48
  1123  0647  120A  118A  2009  120A  118A  	fcall	_Lcd_Write_Char
  1124                           
  1125                           ;sharp.c: 76: a=a/10;
  1126  064C  300A               	movlw	10
  1127  064D  00F0               	movwf	___awdiv@divisor
  1128  064E  3000               	movlw	0
  1129  064F  00F1               	movwf	___awdiv@divisor+1
  1130  0650  1683               	bsf	3,5	;RP0=1, select bank1
  1131  0651  1303               	bcf	3,6	;RP1=0, select bank1
  1132  0652  0843               	movf	(_a+1)^(0+128),w
  1133  0653  00F3               	movwf	___awdiv@dividend+1
  1134  0654  0842               	movf	_a^(0+128),w
  1135  0655  00F2               	movwf	___awdiv@dividend
  1136  0656  120A  158A  23A4  120A  118A  	fcall	___awdiv
  1137  065B  0871               	movf	?___awdiv+1,w
  1138  065C  1683               	bsf	3,5	;RP0=1, select bank1
  1139  065D  1303               	bcf	3,6	;RP1=0, select bank1
  1140  065E  00C3               	movwf	(_a+1)^(0+128)
  1141  065F  0870               	movf	?___awdiv,w
  1142  0660  00C2               	movwf	_a^(0+128)
  1143                           
  1144                           ;sharp.c: 77: Lcd_Set_Cursor(2,12);
  1145  0661  300C               	movlw	12
  1146  0662  00BA               	movwf	??_main^(0+128)
  1147  0663  083A               	movf	??_main^(0+128),w
  1148  0664  00F4               	movwf	Lcd_Set_Cursor@b
  1149  0665  3002               	movlw	2
  1150  0666  120A  158A  230F  120A  118A  	fcall	_Lcd_Set_Cursor
  1151                           
  1152                           ;sharp.c: 78: Lcd_Write_Char(a%10+48);
  1153  066B  300A               	movlw	10
  1154  066C  00F0               	movwf	___awmod@divisor
  1155  066D  3000               	movlw	0
  1156  066E  00F1               	movwf	___awmod@divisor+1
  1157  066F  1683               	bsf	3,5	;RP0=1, select bank1
  1158  0670  1303               	bcf	3,6	;RP1=0, select bank1
  1159  0671  0843               	movf	(_a+1)^(0+128),w
  1160  0672  00F3               	movwf	___awmod@dividend+1
  1161  0673  0842               	movf	_a^(0+128),w
  1162  0674  00F2               	movwf	___awmod@dividend
  1163  0675  120A  158A  2359  120A  118A  	fcall	___awmod
  1164  067A  0870               	movf	?___awmod,w
  1165  067B  3E30               	addlw	48
  1166  067C  120A  118A  2009  120A  118A  	fcall	_Lcd_Write_Char
  1167  0681  2D9C               	goto	l2286
  1168                           
  1169                           ;sharp.c: 82: }
  1170                           ;sharp.c: 83: _delay((unsigned long)((400)*(8000000/4000.0)));
  1171  0682  3005               	movlw	5
  1172  0683  1683               	bsf	3,5	;RP0=1, select bank1
  1173  0684  1303               	bcf	3,6	;RP1=0, select bank1
  1174  0685  00BC               	movwf	(??_main^(0+128)+2)
  1175  0686  300F               	movlw	15
  1176  0687  00BB               	movwf	(??_main^(0+128)+1)
  1177  0688  30F4               	movlw	244
  1178  0689  00BA               	movwf	??_main^(0+128)
  1179  068A                     u2847:	
  1180  068A  0BBA               	decfsz	??_main^(0+128),f
  1181  068B  2E8A               	goto	u2847
  1182  068C  0BBB               	decfsz	(??_main^(0+128)+1),f
  1183  068D  2E8A               	goto	u2847
  1184  068E  0BBC               	decfsz	(??_main^(0+128)+2),f
  1185  068F  2E8A               	goto	u2847
  1186                           
  1187                           ;sharp.c: 84: return 0;
  1188                           ;	Return value of _main is never used
  1189  0690  120A  118A  2800   	ljmp	start
  1190  0693                     __end_of_main:	
  1191                           
  1192                           	psect	text1
  1193  0B59                     __ptext1:	
  1194 ;; *************** function ___awmod *****************
  1195 ;; Defined at:
  1196 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
  1197 ;; Parameters:    Size  Location     Type
  1198 ;;  divisor         2    0[COMMON] int 
  1199 ;;  dividend        2    2[COMMON] int 
  1200 ;; Auto vars:     Size  Location     Type
  1201 ;;  sign            1    6[COMMON] unsigned char 
  1202 ;;  counter         1    5[COMMON] unsigned char 
  1203 ;; Return value:  Size  Location     Type
  1204 ;;                  2    0[COMMON] int 
  1205 ;; Registers used:
  1206 ;;		wreg, status,2, status,0
  1207 ;; Tracked objects:
  1208 ;;		On entry : 0/0
  1209 ;;		On exit  : 0/0
  1210 ;;		Unchanged: 0/0
  1211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1212 ;;      Params:         4       0       0       0       0
  1213 ;;      Locals:         2       0       0       0       0
  1214 ;;      Temps:          1       0       0       0       0
  1215 ;;      Totals:         7       0       0       0       0
  1216 ;;Total ram usage:        7 bytes
  1217 ;; Hardware stack levels used:    1
  1218 ;; This function calls:
  1219 ;;		Nothing
  1220 ;; This function is called by:
  1221 ;;		_main
  1222 ;; This function uses a non-reentrant model
  1223 ;;
  1224                           
  1225                           
  1226                           ;psect for function ___awmod
  1227  0B59                     ___awmod:	
  1228                           
  1229                           ;incstack = 0
  1230                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  1231  0B59  01F6               	clrf	___awmod@sign
  1232  0B5A  1FF3               	btfss	___awmod@dividend+1,7
  1233  0B5B  2B63               	goto	l2234
  1234  0B5C  09F2               	comf	___awmod@dividend,f
  1235  0B5D  09F3               	comf	___awmod@dividend+1,f
  1236  0B5E  0AF2               	incf	___awmod@dividend,f
  1237  0B5F  1903               	skipnz
  1238  0B60  0AF3               	incf	___awmod@dividend+1,f
  1239  0B61  01F6               	clrf	___awmod@sign
  1240  0B62  0AF6               	incf	___awmod@sign,f
  1241  0B63                     l2234:	
  1242  0B63  1FF1               	btfss	___awmod@divisor+1,7
  1243  0B64  2B6A               	goto	l2238
  1244  0B65  09F0               	comf	___awmod@divisor,f
  1245  0B66  09F1               	comf	___awmod@divisor+1,f
  1246  0B67  0AF0               	incf	___awmod@divisor,f
  1247  0B68  1903               	skipnz
  1248  0B69  0AF1               	incf	___awmod@divisor+1,f
  1249  0B6A                     l2238:	
  1250  0B6A  0870               	movf	___awmod@divisor,w
  1251  0B6B  0471               	iorwf	___awmod@divisor+1,w
  1252  0B6C  1903               	btfsc	3,2
  1253  0B6D  2B97               	goto	l2256
  1254  0B6E  01F5               	clrf	___awmod@counter
  1255  0B6F  0AF5               	incf	___awmod@counter,f
  1256  0B70                     l2246:	
  1257  0B70  1BF1               	btfsc	___awmod@divisor+1,7
  1258  0B71  2B7E               	goto	l2248
  1259  0B72  3001               	movlw	1
  1260  0B73                     u2775:	
  1261  0B73  1003               	clrc
  1262  0B74  0DF0               	rlf	___awmod@divisor,f
  1263  0B75  0DF1               	rlf	___awmod@divisor+1,f
  1264  0B76  3EFF               	addlw	-1
  1265  0B77  1D03               	skipz
  1266  0B78  2B73               	goto	u2775
  1267  0B79  3001               	movlw	1
  1268  0B7A  00F4               	movwf	??___awmod
  1269  0B7B  0874               	movf	??___awmod,w
  1270  0B7C  07F5               	addwf	___awmod@counter,f
  1271  0B7D  2B70               	goto	l2246
  1272  0B7E                     l2248:	
  1273  0B7E  0871               	movf	___awmod@divisor+1,w
  1274  0B7F  0273               	subwf	___awmod@dividend+1,w
  1275  0B80  1D03               	skipz
  1276  0B81  2B84               	goto	u2795
  1277  0B82  0870               	movf	___awmod@divisor,w
  1278  0B83  0272               	subwf	___awmod@dividend,w
  1279  0B84                     u2795:	
  1280  0B84  1C03               	skipc
  1281  0B85  2B8C               	goto	l2252
  1282  0B86  0870               	movf	___awmod@divisor,w
  1283  0B87  02F2               	subwf	___awmod@dividend,f
  1284  0B88  0871               	movf	___awmod@divisor+1,w
  1285  0B89  1C03               	skipc
  1286  0B8A  03F3               	decf	___awmod@dividend+1,f
  1287  0B8B  02F3               	subwf	___awmod@dividend+1,f
  1288  0B8C                     l2252:	
  1289  0B8C  3001               	movlw	1
  1290  0B8D                     u2805:	
  1291  0B8D  1003               	clrc
  1292  0B8E  0CF1               	rrf	___awmod@divisor+1,f
  1293  0B8F  0CF0               	rrf	___awmod@divisor,f
  1294  0B90  3EFF               	addlw	-1
  1295  0B91  1D03               	skipz
  1296  0B92  2B8D               	goto	u2805
  1297  0B93  3001               	movlw	1
  1298  0B94  02F5               	subwf	___awmod@counter,f
  1299  0B95  1D03               	btfss	3,2
  1300  0B96  2B7E               	goto	l2248
  1301  0B97                     l2256:	
  1302  0B97  0876               	movf	___awmod@sign,w
  1303  0B98  1903               	btfsc	3,2
  1304  0B99  2B9F               	goto	l2260
  1305  0B9A  09F2               	comf	___awmod@dividend,f
  1306  0B9B  09F3               	comf	___awmod@dividend+1,f
  1307  0B9C  0AF2               	incf	___awmod@dividend,f
  1308  0B9D  1903               	skipnz
  1309  0B9E  0AF3               	incf	___awmod@dividend+1,f
  1310  0B9F                     l2260:	
  1311  0B9F  0873               	movf	___awmod@dividend+1,w
  1312  0BA0  00F1               	movwf	?___awmod+1
  1313  0BA1  0872               	movf	___awmod@dividend,w
  1314  0BA2  00F0               	movwf	?___awmod
  1315  0BA3  0008               	return
  1316  0BA4                     __end_of___awmod:	
  1317                           
  1318                           	psect	text2
  1319  09E2                     __ptext2:	
  1320 ;; *************** function _Sharp_Init *****************
  1321 ;; Defined at:
  1322 ;;		line 5 in file "SharpIR.h"
  1323 ;; Parameters:    Size  Location     Type
  1324 ;;		None
  1325 ;; Auto vars:     Size  Location     Type
  1326 ;;		None
  1327 ;; Return value:  Size  Location     Type
  1328 ;;                  1    wreg      void 
  1329 ;; Registers used:
  1330 ;;		wreg, status,2, status,0
  1331 ;; Tracked objects:
  1332 ;;		On entry : 0/0
  1333 ;;		On exit  : 0/0
  1334 ;;		Unchanged: 0/0
  1335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1336 ;;      Params:         0       0       0       0       0
  1337 ;;      Locals:         0       0       0       0       0
  1338 ;;      Temps:          0       0       0       0       0
  1339 ;;      Totals:         0       0       0       0       0
  1340 ;;Total ram usage:        0 bytes
  1341 ;; Hardware stack levels used:    1
  1342 ;; This function calls:
  1343 ;;		Nothing
  1344 ;; This function is called by:
  1345 ;;		_main
  1346 ;; This function uses a non-reentrant model
  1347 ;;
  1348                           
  1349                           
  1350                           ;psect for function _Sharp_Init
  1351  09E2                     _Sharp_Init:	
  1352                           
  1353                           ;SharpIR.h: 7: ANSEL=0x00;
  1354                           
  1355                           ;incstack = 0
  1356                           ; Regs used in _Sharp_Init: [wreg+status,2+status,0]
  1357  09E2  1683               	bsf	3,5	;RP0=1, select bank3
  1358  09E3  1703               	bsf	3,6	;RP1=1, select bank3
  1359  09E4  0188               	clrf	8	;volatile
  1360                           
  1361                           ;SharpIR.h: 8: ANSELH=0x00;
  1362  09E5  0189               	clrf	9	;volatile
  1363                           
  1364                           ;SharpIR.h: 9: TRISA=0xFF;
  1365  09E6  30FF               	movlw	255
  1366  09E7  1683               	bsf	3,5	;RP0=1, select bank1
  1367  09E8  1303               	bcf	3,6	;RP1=0, select bank1
  1368  09E9  0085               	movwf	5	;volatile
  1369                           
  1370                           ;SharpIR.h: 12: TRISAbits.TRISA2=1;
  1371  09EA  1505               	bsf	5,2	;volatile
  1372                           
  1373                           ;SharpIR.h: 13: ANSELbits.ANS2=1;
  1374  09EB  1683               	bsf	3,5	;RP0=1, select bank3
  1375  09EC  1703               	bsf	3,6	;RP1=1, select bank3
  1376  09ED  1508               	bsf	8,2	;volatile
  1377                           
  1378                           ;SharpIR.h: 15: ADCON1bits.ADFM=1;
  1379  09EE  1683               	bsf	3,5	;RP0=1, select bank1
  1380  09EF  1303               	bcf	3,6	;RP1=0, select bank1
  1381  09F0  179F               	bsf	31,7	;volatile
  1382                           
  1383                           ;SharpIR.h: 16: ADCON1bits.VCFG0=0;
  1384  09F1  121F               	bcf	31,4	;volatile
  1385                           
  1386                           ;SharpIR.h: 17: ADCON0bits.ADCS=0b101;
  1387  09F2  1283               	bcf	3,5	;RP0=0, select bank0
  1388  09F3  1303               	bcf	3,6	;RP1=0, select bank0
  1389  09F4  081F               	movf	31,w	;volatile
  1390  09F5  393F               	andlw	-193
  1391  09F6  3840               	iorlw	64
  1392  09F7  009F               	movwf	31	;volatile
  1393                           
  1394                           ;SharpIR.h: 19: ADCON0bits.CHS=2;
  1395  09F8  081F               	movf	31,w	;volatile
  1396  09F9  39C3               	andlw	-61
  1397  09FA  3808               	iorlw	8
  1398  09FB  009F               	movwf	31	;volatile
  1399                           
  1400                           ;SharpIR.h: 20: ADCON0bits.ADON=1;
  1401  09FC  141F               	bsf	31,0	;volatile
  1402  09FD  0008               	return
  1403  09FE                     __end_of_Sharp_Init:	
  1404                           
  1405                           	psect	text3
  1406  0F5C                     __ptext3:	
  1407 ;; *************** function _Process *****************
  1408 ;; Defined at:
  1409 ;;		line 38 in file "SharpIR.h"
  1410 ;; Parameters:    Size  Location     Type
  1411 ;;  channel         2   11[BANK1 ] int 
  1412 ;; Auto vars:     Size  Location     Type
  1413 ;;  foo             2   24[BANK1 ] int 
  1414 ;;  i               2   20[BANK1 ] int 
  1415 ;;  sum             2   22[BANK1 ] int 
  1416 ;;  p               2   18[BANK1 ] int 
  1417 ;;  accurateDist    2   16[BANK1 ] int 
  1418 ;;  previousDist    2   14[BANK1 ] int 
  1419 ;; Return value:  Size  Location     Type
  1420 ;;                  2   11[BANK1 ] int 
  1421 ;; Registers used:
  1422 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1423 ;; Tracked objects:
  1424 ;;		On entry : 0/0
  1425 ;;		On exit  : 0/0
  1426 ;;		Unchanged: 0/0
  1427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1428 ;;      Params:         0       0       2       0       0
  1429 ;;      Locals:         0       0      12       0       0
  1430 ;;      Temps:          0       0       1       0       0
  1431 ;;      Totals:         0       0      15       0       0
  1432 ;;Total ram usage:       15 bytes
  1433 ;; Hardware stack levels used:    1
  1434 ;; Hardware stack levels required when called:    6
  1435 ;; This function calls:
  1436 ;;		___awdiv
  1437 ;;		___awtoft
  1438 ;;		___ftge
  1439 ;;		___ftmul
  1440 ;;		_analogRead
  1441 ;; This function is called by:
  1442 ;;		_main
  1443 ;; This function uses a non-reentrant model
  1444 ;;
  1445                           
  1446                           
  1447                           ;psect for function _Process
  1448  0F5C                     _Process:	
  1449                           
  1450                           ;SharpIR.h: 41: int p=0;
  1451                           
  1452                           ;incstack = 0
  1453                           ; Regs used in _Process: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1454  0F5C  1683               	bsf	3,5	;RP0=1, select bank1
  1455  0F5D  1303               	bcf	3,6	;RP1=0, select bank1
  1456  0F5E  01B2               	clrf	Process@p^(0+128)
  1457  0F5F  01B3               	clrf	(Process@p+1)^(0+128)
  1458                           
  1459                           ;SharpIR.h: 42: int sum=0;
  1460  0F60  01B6               	clrf	Process@sum^(0+128)
  1461  0F61  01B7               	clrf	(Process@sum+1)^(0+128)
  1462                           
  1463                           ;SharpIR.h: 43: int previousDistance;
  1464                           ;SharpIR.h: 45: for (int i=0; i<avg; i++){
  1465  0F62  01B4               	clrf	Process@i^(0+128)
  1466  0F63  01B5               	clrf	(Process@i+1)^(0+128)
  1467  0F64                     l2218:	
  1468  0F64  0835               	movf	(Process@i+1)^(0+128),w
  1469  0F65  3A80               	xorlw	128
  1470  0F66  00AD               	movwf	??_Process^(0+128)
  1471  0F67  0841               	movf	(_avg+1)^(0+128),w
  1472  0F68  3A80               	xorlw	128
  1473  0F69  022D               	subwf	??_Process^(0+128),w
  1474  0F6A  1D03               	skipz
  1475  0F6B  2F6E               	goto	u2735
  1476  0F6C  0840               	movf	_avg^(0+128),w
  1477  0F6D  0234               	subwf	Process@i^(0+128),w
  1478  0F6E                     u2735:	
  1479  0F6E  1803               	btfsc	3,0
  1480  0F6F  2FE8               	goto	l2220
  1481                           
  1482                           ;SharpIR.h: 47: int foo=analogRead(channel);
  1483  0F70  1683               	bsf	3,5	;RP0=1, select bank1
  1484  0F71  1303               	bcf	3,6	;RP1=0, select bank1
  1485  0F72  082C               	movf	(Process@channel+1)^(0+128),w
  1486  0F73  00A1               	movwf	(analogRead@channel+1)^(0+128)
  1487  0F74  082B               	movf	Process@channel^(0+128),w
  1488  0F75  00A0               	movwf	analogRead@channel^(0+128)
  1489  0F76  120A  118A  20FA  120A  158A  	fcall	_analogRead
  1490  0F7B  1683               	bsf	3,5	;RP0=1, select bank1
  1491  0F7C  1303               	bcf	3,6	;RP1=0, select bank1
  1492  0F7D  0821               	movf	(?_analogRead+1)^(0+128),w
  1493  0F7E  00B9               	movwf	(Process@foo+1)^(0+128)
  1494  0F7F  0820               	movf	?_analogRead^(0+128),w
  1495  0F80  00B8               	movwf	Process@foo^(0+128)
  1496                           
  1497                           ;SharpIR.h: 49: if (foo>=(tol*previousDistance)){
  1498  0F81  0839               	movf	(Process@foo+1)^(0+128),w
  1499  0F82  00F9               	movwf	___awtoft@c+1
  1500  0F83  0838               	movf	Process@foo^(0+128),w
  1501  0F84  00F8               	movwf	___awtoft@c
  1502  0F85  120A  158A  21FE  120A  158A  	fcall	___awtoft
  1503  0F8A  0878               	movf	?___awtoft,w
  1504  0F8B  1283               	bcf	3,5	;RP0=0, select bank0
  1505  0F8C  1303               	bcf	3,6	;RP1=0, select bank0
  1506  0F8D  00B0               	movwf	___ftge@ff1
  1507  0F8E  0879               	movf	?___awtoft+1,w
  1508  0F8F  00B1               	movwf	___ftge@ff1+1
  1509  0F90  087A               	movf	?___awtoft+2,w
  1510  0F91  00B2               	movwf	___ftge@ff1+2
  1511  0F92  1683               	bsf	3,5	;RP0=1, select bank1
  1512  0F93  1303               	bcf	3,6	;RP1=0, select bank1
  1513  0F94  082F               	movf	(Process@previousDistance+1)^(0+128),w
  1514  0F95  00F9               	movwf	___awtoft@c+1
  1515  0F96  082E               	movf	Process@previousDistance^(0+128),w
  1516  0F97  00F8               	movwf	___awtoft@c
  1517  0F98  120A  158A  21FE  120A  158A  	fcall	___awtoft
  1518  0F9D  0878               	movf	?___awtoft,w
  1519  0F9E  1283               	bcf	3,5	;RP0=0, select bank0
  1520  0F9F  1303               	bcf	3,6	;RP1=0, select bank0
  1521  0FA0  00A3               	movwf	___ftmul@f2
  1522  0FA1  0879               	movf	?___awtoft+1,w
  1523  0FA2  00A4               	movwf	___ftmul@f2+1
  1524  0FA3  087A               	movf	?___awtoft+2,w
  1525  0FA4  00A5               	movwf	___ftmul@f2+2
  1526  0FA5  1683               	bsf	3,5	;RP0=1, select bank1
  1527  0FA6  1303               	bcf	3,6	;RP1=0, select bank1
  1528  0FA7  083D               	movf	_tol^(0+128),w
  1529  0FA8  1283               	bcf	3,5	;RP0=0, select bank0
  1530  0FA9  1303               	bcf	3,6	;RP1=0, select bank0
  1531  0FAA  00A0               	movwf	___ftmul@f1
  1532  0FAB  1683               	bsf	3,5	;RP0=1, select bank1
  1533  0FAC  1303               	bcf	3,6	;RP1=0, select bank1
  1534  0FAD  083E               	movf	(_tol+1)^(0+128),w
  1535  0FAE  1283               	bcf	3,5	;RP0=0, select bank0
  1536  0FAF  1303               	bcf	3,6	;RP1=0, select bank0
  1537  0FB0  00A1               	movwf	___ftmul@f1+1
  1538  0FB1  1683               	bsf	3,5	;RP0=1, select bank1
  1539  0FB2  1303               	bcf	3,6	;RP1=0, select bank1
  1540  0FB3  083F               	movf	(_tol+2)^(0+128),w
  1541  0FB4  1283               	bcf	3,5	;RP0=0, select bank0
  1542  0FB5  1303               	bcf	3,6	;RP1=0, select bank0
  1543  0FB6  00A2               	movwf	___ftmul@f1+2
  1544  0FB7  120A  118A  228B  120A  158A  	fcall	___ftmul
  1545  0FBC  1283               	bcf	3,5	;RP0=0, select bank0
  1546  0FBD  1303               	bcf	3,6	;RP1=0, select bank0
  1547  0FBE  0820               	movf	?___ftmul,w
  1548  0FBF  00B3               	movwf	___ftge@ff2
  1549  0FC0  0821               	movf	?___ftmul+1,w
  1550  0FC1  00B4               	movwf	___ftge@ff2+1
  1551  0FC2  0822               	movf	?___ftmul+2,w
  1552  0FC3  00B5               	movwf	___ftge@ff2+2
  1553  0FC4  120A  158A  2458  120A  158A  	fcall	___ftge
  1554  0FC9  1C03               	btfss	3,0
  1555  0FCA  2FDF               	goto	l2216
  1556                           
  1557                           ;SharpIR.h: 51: previousDistance=foo;
  1558  0FCB  1683               	bsf	3,5	;RP0=1, select bank1
  1559  0FCC  1303               	bcf	3,6	;RP1=0, select bank1
  1560  0FCD  0839               	movf	(Process@foo+1)^(0+128),w
  1561  0FCE  00AF               	movwf	(Process@previousDistance+1)^(0+128)
  1562  0FCF  0838               	movf	Process@foo^(0+128),w
  1563  0FD0  00AE               	movwf	Process@previousDistance^(0+128)
  1564                           
  1565                           ;SharpIR.h: 52: sum=sum+foo;
  1566  0FD1  0838               	movf	Process@foo^(0+128),w
  1567  0FD2  0736               	addwf	Process@sum^(0+128),w
  1568  0FD3  00B6               	movwf	Process@sum^(0+128)
  1569  0FD4  0839               	movf	(Process@foo+1)^(0+128),w
  1570  0FD5  1803               	skipnc
  1571  0FD6  0A39               	incf	(Process@foo+1)^(0+128),w
  1572  0FD7  0737               	addwf	(Process@sum+1)^(0+128),w
  1573  0FD8  00B7               	movwf	(Process@sum+1)^(0+128)
  1574                           
  1575                           ;SharpIR.h: 53: p++;
  1576  0FD9  3001               	movlw	1
  1577  0FDA  07B2               	addwf	Process@p^(0+128),f
  1578  0FDB  1803               	skipnc
  1579  0FDC  0AB3               	incf	(Process@p+1)^(0+128),f
  1580  0FDD  3000               	movlw	0
  1581  0FDE  07B3               	addwf	(Process@p+1)^(0+128),f
  1582  0FDF                     l2216:	
  1583  0FDF  3001               	movlw	1
  1584  0FE0  1683               	bsf	3,5	;RP0=1, select bank1
  1585  0FE1  1303               	bcf	3,6	;RP1=0, select bank1
  1586  0FE2  07B4               	addwf	Process@i^(0+128),f
  1587  0FE3  1803               	skipnc
  1588  0FE4  0AB5               	incf	(Process@i+1)^(0+128),f
  1589  0FE5  3000               	movlw	0
  1590  0FE6  07B5               	addwf	(Process@i+1)^(0+128),f
  1591  0FE7  2F64               	goto	l2218
  1592  0FE8                     l2220:	
  1593                           
  1594                           ;SharpIR.h: 55: }
  1595                           ;SharpIR.h: 58: }
  1596                           ;SharpIR.h: 61: int accurateDistance=sum/p;
  1597  0FE8  1683               	bsf	3,5	;RP0=1, select bank1
  1598  0FE9  1303               	bcf	3,6	;RP1=0, select bank1
  1599  0FEA  0833               	movf	(Process@p+1)^(0+128),w
  1600  0FEB  00F1               	movwf	___awdiv@divisor+1
  1601  0FEC  0832               	movf	Process@p^(0+128),w
  1602  0FED  00F0               	movwf	___awdiv@divisor
  1603  0FEE  0837               	movf	(Process@sum+1)^(0+128),w
  1604  0FEF  00F3               	movwf	___awdiv@dividend+1
  1605  0FF0  0836               	movf	Process@sum^(0+128),w
  1606  0FF1  00F2               	movwf	___awdiv@dividend
  1607  0FF2  120A  158A  23A4   	fcall	___awdiv
  1608  0FF5  0871               	movf	?___awdiv+1,w
  1609  0FF6  1683               	bsf	3,5	;RP0=1, select bank1
  1610  0FF7  1303               	bcf	3,6	;RP1=0, select bank1
  1611  0FF8  00B1               	movwf	(Process@accurateDistance+1)^(0+128)
  1612  0FF9  0870               	movf	?___awdiv,w
  1613  0FFA  00B0               	movwf	Process@accurateDistance^(0+128)
  1614                           
  1615                           ;SharpIR.h: 63: return accurateDistance;
  1616  0FFB  0831               	movf	(Process@accurateDistance+1)^(0+128),w
  1617  0FFC  00AC               	movwf	(?_Process+1)^(0+128)
  1618  0FFD  0830               	movf	Process@accurateDistance^(0+128),w
  1619  0FFE  00AB               	movwf	?_Process^(0+128)
  1620  0FFF  0008               	return
  1621  1000                     __end_of_Process:	
  1622                           
  1623                           	psect	text4
  1624  00FA                     __ptext4:	
  1625 ;; *************** function _analogRead *****************
  1626 ;; Defined at:
  1627 ;;		line 23 in file "SharpIR.h"
  1628 ;; Parameters:    Size  Location     Type
  1629 ;;  channel         2    0[BANK1 ] int 
  1630 ;; Auto vars:     Size  Location     Type
  1631 ;;  volt            3    3[BANK1 ] float 
  1632 ;;  raw             2    9[BANK1 ] int 
  1633 ;; Return value:  Size  Location     Type
  1634 ;;                  2    0[BANK1 ] int 
  1635 ;; Registers used:
  1636 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1637 ;; Tracked objects:
  1638 ;;		On entry : 0/0
  1639 ;;		On exit  : 0/0
  1640 ;;		Unchanged: 0/0
  1641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1642 ;;      Params:         0       0       2       0       0
  1643 ;;      Locals:         0       0       8       0       0
  1644 ;;      Temps:          0       0       1       0       0
  1645 ;;      Totals:         0       0      11       0       0
  1646 ;;Total ram usage:       11 bytes
  1647 ;; Hardware stack levels used:    1
  1648 ;; Hardware stack levels required when called:    5
  1649 ;; This function calls:
  1650 ;;		___awtoft
  1651 ;;		___ftdiv
  1652 ;;		___ftmul
  1653 ;;		___fttol
  1654 ;;		_pow
  1655 ;; This function is called by:
  1656 ;;		_Process
  1657 ;; This function uses a non-reentrant model
  1658 ;;
  1659                           
  1660                           
  1661                           ;psect for function _analogRead
  1662  00FA                     _analogRead:	
  1663                           
  1664                           ;SharpIR.h: 25: float volt;
  1665                           ;SharpIR.h: 27: ADCON0bits.CHS=channel;
  1666                           
  1667                           ;incstack = 0
  1668                           ; Regs used in _analogRead: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1669  00FA  1683               	bsf	3,5	;RP0=1, select bank1
  1670  00FB  1303               	bcf	3,6	;RP1=0, select bank1
  1671  00FC  0820               	movf	analogRead@channel^(0+128),w
  1672  00FD  00A2               	movwf	??_analogRead^(0+128)
  1673  00FE  0DA2               	rlf	??_analogRead^(0+128),f
  1674  00FF  0DA2               	rlf	??_analogRead^(0+128),f
  1675  0100  1283               	bcf	3,5	;RP0=0, select bank0
  1676  0101  1303               	bcf	3,6	;RP1=0, select bank0
  1677  0102  081F               	movf	31,w	;volatile
  1678  0103  1683               	bsf	3,5	;RP0=1, select bank1
  1679  0104  1303               	bcf	3,6	;RP1=0, select bank1
  1680  0105  0622               	xorwf	??_analogRead^(0+128),w
  1681  0106  39C3               	andlw	-61
  1682  0107  0622               	xorwf	??_analogRead^(0+128),w
  1683  0108  1283               	bcf	3,5	;RP0=0, select bank0
  1684  0109  1303               	bcf	3,6	;RP1=0, select bank0
  1685  010A  009F               	movwf	31	;volatile
  1686                           
  1687                           ;SharpIR.h: 28: ADCON0bits.GO=1;
  1688  010B  149F               	bsf	31,1	;volatile
  1689  010C                     l2092:	
  1690                           ;SharpIR.h: 29: while(ADCON0bits.GO==1)
  1691                           
  1692  010C  1283               	bcf	3,5	;RP0=0, select bank0
  1693  010D  1C9F               	btfss	31,1	;volatile
  1694  010E  2916               	goto	L1
  1695                           
  1696                           ;SharpIR.h: 30: {
  1697                           ;SharpIR.h: 31: raw=(ADRESH<<8)|ADRESL;
  1698  010F  081E               	movf	30,w	;volatile
  1699  0110  1683               	bsf	3,5	;RP0=1, select bank1
  1700  0111  1303               	bcf	3,6	;RP1=0, select bank1
  1701  0112  00AA               	movwf	(analogRead@raw+1)^(0+128)
  1702  0113  081E               	movf	30,w	;volatile
  1703  0114  00A9               	movwf	analogRead@raw^(0+128)
  1704  0115  290C               	goto	l2092
  1705  0116                     L1:	
  1706                           ;SharpIR.h: 32: }
  1707                           ;SharpIR.h: 33: ADCON0bits.GO=0;
  1708                           
  1709                           
  1710                           ;SharpIR.h: 34: volt=(raw*5.0)/1023.0;
  1711  0116  30C0               	movlw	192
  1712  0117  00B0               	movwf	___ftdiv@f2
  1713  0118  307F               	movlw	127
  1714  0119  00B1               	movwf	___ftdiv@f2+1
  1715  011A  3044               	movlw	68
  1716  011B  00B2               	movwf	___ftdiv@f2+2
  1717  011C  3000               	movlw	0
  1718  011D  00A0               	movwf	___ftmul@f1
  1719  011E  30A0               	movlw	160
  1720  011F  00A1               	movwf	___ftmul@f1+1
  1721  0120  3040               	movlw	64
  1722  0121  00A2               	movwf	___ftmul@f1+2
  1723  0122  1683               	bsf	3,5	;RP0=1, select bank1
  1724  0123  1303               	bcf	3,6	;RP1=0, select bank1
  1725  0124  082A               	movf	(analogRead@raw+1)^(0+128),w
  1726  0125  00F9               	movwf	___awtoft@c+1
  1727  0126  0829               	movf	analogRead@raw^(0+128),w
  1728  0127  00F8               	movwf	___awtoft@c
  1729  0128  120A  158A  21FE  120A  118A  	fcall	___awtoft
  1730  012D  0878               	movf	?___awtoft,w
  1731  012E  1283               	bcf	3,5	;RP0=0, select bank0
  1732  012F  1303               	bcf	3,6	;RP1=0, select bank0
  1733  0130  00A3               	movwf	___ftmul@f2
  1734  0131  0879               	movf	?___awtoft+1,w
  1735  0132  00A4               	movwf	___ftmul@f2+1
  1736  0133  087A               	movf	?___awtoft+2,w
  1737  0134  00A5               	movwf	___ftmul@f2+2
  1738  0135  120A  118A  228B  120A  118A  	fcall	___ftmul
  1739  013A  1283               	bcf	3,5	;RP0=0, select bank0
  1740  013B  1303               	bcf	3,6	;RP1=0, select bank0
  1741  013C  0820               	movf	?___ftmul,w
  1742  013D  00B3               	movwf	___ftdiv@f1
  1743  013E  0821               	movf	?___ftmul+1,w
  1744  013F  00B4               	movwf	___ftdiv@f1+1
  1745  0140  0822               	movf	?___ftmul+2,w
  1746  0141  00B5               	movwf	___ftdiv@f1+2
  1747  0142  120A  118A  2042  120A  118A  	fcall	___ftdiv
  1748  0147  1283               	bcf	3,5	;RP0=0, select bank0
  1749  0148  1303               	bcf	3,6	;RP1=0, select bank0
  1750  0149  0830               	movf	?___ftdiv,w
  1751  014A  1683               	bsf	3,5	;RP0=1, select bank1
  1752  014B  1303               	bcf	3,6	;RP1=0, select bank1
  1753  014C  00A3               	movwf	analogRead@volt^(0+128)
  1754  014D  1283               	bcf	3,5	;RP0=0, select bank0
  1755  014E  1303               	bcf	3,6	;RP1=0, select bank0
  1756  014F  0831               	movf	?___ftdiv+1,w
  1757  0150  1683               	bsf	3,5	;RP0=1, select bank1
  1758  0151  1303               	bcf	3,6	;RP1=0, select bank1
  1759  0152  00A4               	movwf	(analogRead@volt+1)^(0+128)
  1760  0153  1283               	bcf	3,5	;RP0=0, select bank0
  1761  0154  1303               	bcf	3,6	;RP1=0, select bank0
  1762  0155  0832               	movf	?___ftdiv+2,w
  1763  0156  1683               	bsf	3,5	;RP0=1, select bank1
  1764  0157  1303               	bcf	3,6	;RP1=0, select bank1
  1765  0158  00A5               	movwf	(analogRead@volt+2)^(0+128)
  1766                           
  1767                           ;SharpIR.h: 35: return (int)(61.573*pow(volt, -1.1068));
  1768  0159  30AC               	movlw	172
  1769  015A  1283               	bcf	3,5	;RP0=0, select bank0
  1770  015B  1303               	bcf	3,6	;RP1=0, select bank0
  1771  015C  00E1               	movwf	pow@y
  1772  015D  308D               	movlw	141
  1773  015E  00E2               	movwf	pow@y+1
  1774  015F  30BF               	movlw	191
  1775  0160  00E3               	movwf	pow@y+2
  1776  0161  1683               	bsf	3,5	;RP0=1, select bank1
  1777  0162  1303               	bcf	3,6	;RP1=0, select bank1
  1778  0163  0823               	movf	analogRead@volt^(0+128),w
  1779  0164  1283               	bcf	3,5	;RP0=0, select bank0
  1780  0165  1303               	bcf	3,6	;RP1=0, select bank0
  1781  0166  00DE               	movwf	pow@x
  1782  0167  1683               	bsf	3,5	;RP0=1, select bank1
  1783  0168  1303               	bcf	3,6	;RP1=0, select bank1
  1784  0169  0824               	movf	(analogRead@volt+1)^(0+128),w
  1785  016A  1283               	bcf	3,5	;RP0=0, select bank0
  1786  016B  1303               	bcf	3,6	;RP1=0, select bank0
  1787  016C  00DF               	movwf	pow@x+1
  1788  016D  1683               	bsf	3,5	;RP0=1, select bank1
  1789  016E  1303               	bcf	3,6	;RP1=0, select bank1
  1790  016F  0825               	movf	(analogRead@volt+2)^(0+128),w
  1791  0170  1283               	bcf	3,5	;RP0=0, select bank0
  1792  0171  1303               	bcf	3,6	;RP1=0, select bank0
  1793  0172  00E0               	movwf	pow@x+2
  1794  0173  120A  118A  235E  120A  118A  	fcall	_pow
  1795  0178  1283               	bcf	3,5	;RP0=0, select bank0
  1796  0179  1303               	bcf	3,6	;RP1=0, select bank0
  1797  017A  085E               	movf	?_pow,w
  1798  017B  1683               	bsf	3,5	;RP0=1, select bank1
  1799  017C  1303               	bcf	3,6	;RP1=0, select bank1
  1800  017D  00A6               	movwf	_analogRead$732^(0+128)
  1801  017E  1283               	bcf	3,5	;RP0=0, select bank0
  1802  017F  1303               	bcf	3,6	;RP1=0, select bank0
  1803  0180  085F               	movf	?_pow+1,w
  1804  0181  1683               	bsf	3,5	;RP0=1, select bank1
  1805  0182  1303               	bcf	3,6	;RP1=0, select bank1
  1806  0183  00A7               	movwf	(_analogRead$732+1)^(0+128)
  1807  0184  1283               	bcf	3,5	;RP0=0, select bank0
  1808  0185  1303               	bcf	3,6	;RP1=0, select bank0
  1809  0186  0860               	movf	?_pow+2,w
  1810  0187  1683               	bsf	3,5	;RP0=1, select bank1
  1811  0188  1303               	bcf	3,6	;RP1=0, select bank1
  1812  0189  00A8               	movwf	(_analogRead$732+2)^(0+128)
  1813                           
  1814                           ;SharpIR.h: 35: return (int)(61.573*pow(volt, -1.1068));
  1815  018A  0826               	movf	_analogRead$732^(0+128),w
  1816  018B  1283               	bcf	3,5	;RP0=0, select bank0
  1817  018C  1303               	bcf	3,6	;RP1=0, select bank0
  1818  018D  00A3               	movwf	___ftmul@f2
  1819  018E  1683               	bsf	3,5	;RP0=1, select bank1
  1820  018F  1303               	bcf	3,6	;RP1=0, select bank1
  1821  0190  0827               	movf	(_analogRead$732+1)^(0+128),w
  1822  0191  1283               	bcf	3,5	;RP0=0, select bank0
  1823  0192  1303               	bcf	3,6	;RP1=0, select bank0
  1824  0193  00A4               	movwf	___ftmul@f2+1
  1825  0194  1683               	bsf	3,5	;RP0=1, select bank1
  1826  0195  1303               	bcf	3,6	;RP1=0, select bank1
  1827  0196  0828               	movf	(_analogRead$732+2)^(0+128),w
  1828  0197  1283               	bcf	3,5	;RP0=0, select bank0
  1829  0198  1303               	bcf	3,6	;RP1=0, select bank0
  1830  0199  00A5               	movwf	___ftmul@f2+2
  1831  019A  304B               	movlw	75
  1832  019B  00A0               	movwf	___ftmul@f1
  1833  019C  3076               	movlw	118
  1834  019D  00A1               	movwf	___ftmul@f1+1
  1835  019E  3042               	movlw	66
  1836  019F  00A2               	movwf	___ftmul@f1+2
  1837  01A0  120A  118A  228B  120A  118A  	fcall	___ftmul
  1838  01A5  1283               	bcf	3,5	;RP0=0, select bank0
  1839  01A6  1303               	bcf	3,6	;RP1=0, select bank0
  1840  01A7  0820               	movf	?___ftmul,w
  1841  01A8  00B0               	movwf	___fttol@f1
  1842  01A9  0821               	movf	?___ftmul+1,w
  1843  01AA  00B1               	movwf	___fttol@f1+1
  1844  01AB  0822               	movf	?___ftmul+2,w
  1845  01AC  00B2               	movwf	___fttol@f1+2
  1846  01AD  120A  158A  259C   	fcall	___fttol
  1847  01B0  1283               	bcf	3,5	;RP0=0, select bank0
  1848  01B1  1303               	bcf	3,6	;RP1=0, select bank0
  1849  01B2  0831               	movf	?___fttol+1,w
  1850  01B3  1683               	bsf	3,5	;RP0=1, select bank1
  1851  01B4  1303               	bcf	3,6	;RP1=0, select bank1
  1852  01B5  00A1               	movwf	(?_analogRead+1)^(0+128)
  1853  01B6  1283               	bcf	3,5	;RP0=0, select bank0
  1854  01B7  1303               	bcf	3,6	;RP1=0, select bank0
  1855  01B8  0830               	movf	?___fttol,w
  1856  01B9  1683               	bsf	3,5	;RP0=1, select bank1
  1857  01BA  1303               	bcf	3,6	;RP1=0, select bank1
  1858  01BB  00A0               	movwf	?_analogRead^(0+128)
  1859  01BC  0008               	return
  1860  01BD                     __end_of_analogRead:	
  1861                           
  1862                           	psect	text5
  1863  035E                     __ptext5:	
  1864 ;; *************** function _pow *****************
  1865 ;; Defined at:
  1866 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\pow.c"
  1867 ;; Parameters:    Size  Location     Type
  1868 ;;  x               3   62[BANK0 ] int 
  1869 ;;  y               3   65[BANK0 ] int 
  1870 ;; Auto vars:     Size  Location     Type
  1871 ;;  yi              4   76[BANK0 ] unsigned long 
  1872 ;;  sign            1   75[BANK0 ] unsigned char 
  1873 ;; Return value:  Size  Location     Type
  1874 ;;                  3   62[BANK0 ] unsigned char 
  1875 ;; Registers used:
  1876 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1877 ;; Tracked objects:
  1878 ;;		On entry : 0/0
  1879 ;;		On exit  : 0/0
  1880 ;;		Unchanged: 0/0
  1881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1882 ;;      Params:         0       6       0       0       0
  1883 ;;      Locals:         0      11       0       0       0
  1884 ;;      Temps:          0       1       0       0       0
  1885 ;;      Totals:         0      18       0       0       0
  1886 ;;Total ram usage:       18 bytes
  1887 ;; Hardware stack levels used:    1
  1888 ;; Hardware stack levels required when called:    4
  1889 ;; This function calls:
  1890 ;;		___ftge
  1891 ;;		___ftmul
  1892 ;;		___ftneg
  1893 ;;		___fttol
  1894 ;;		___lltoft
  1895 ;;		_exp
  1896 ;;		_log
  1897 ;; This function is called by:
  1898 ;;		_analogRead
  1899 ;; This function uses a non-reentrant model
  1900 ;;
  1901                           
  1902                           
  1903                           ;psect for function _pow
  1904  035E                     _pow:	
  1905                           
  1906                           ;incstack = 0
  1907                           ; Regs used in _pow: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1908  035E  1283               	bcf	3,5	;RP0=0, select bank0
  1909  035F  1303               	bcf	3,6	;RP1=0, select bank0
  1910  0360  01EB               	clrf	pow@sign
  1911  0361  0860               	movf	pow@x+2,w
  1912  0362  045F               	iorwf	pow@x+1,w
  1913  0363  045E               	iorwf	pow@x,w
  1914  0364  1D03               	skipz
  1915  0365  2B88               	goto	l2026
  1916  0366  3000               	movlw	0
  1917  0367  00B0               	movwf	___ftge@ff1
  1918  0368  3000               	movlw	0
  1919  0369  00B1               	movwf	___ftge@ff1+1
  1920  036A  3000               	movlw	0
  1921  036B  00B2               	movwf	___ftge@ff1+2
  1922  036C  0861               	movf	pow@y,w
  1923  036D  00B3               	movwf	___ftge@ff2
  1924  036E  0862               	movf	pow@y+1,w
  1925  036F  00B4               	movwf	___ftge@ff2+1
  1926  0370  0863               	movf	pow@y+2,w
  1927  0371  00B5               	movwf	___ftge@ff2+2
  1928  0372  120A  158A  2458  120A  118A  	fcall	___ftge
  1929  0377  1C03               	btfss	3,0
  1930  0378  2B7F               	goto	l553
  1931  0379  3021               	movlw	33
  1932  037A  1683               	bsf	3,5	;RP0=1, select bank1
  1933  037B  1303               	bcf	3,6	;RP1=0, select bank1
  1934  037C  00C4               	movwf	_errno^(0+128)
  1935  037D  3000               	movlw	0
  1936  037E  00C5               	movwf	(_errno^(0+128)+1)
  1937  037F                     l553:	
  1938  037F  3000               	movlw	0
  1939  0380  1283               	bcf	3,5	;RP0=0, select bank0
  1940  0381  1303               	bcf	3,6	;RP1=0, select bank0
  1941  0382  00DE               	movwf	?_pow
  1942  0383  3000               	movlw	0
  1943  0384  00DF               	movwf	?_pow+1
  1944  0385  3000               	movlw	0
  1945  0386  00E0               	movwf	?_pow+2
  1946  0387  0008               	return
  1947  0388                     l2026:	
  1948  0388  0863               	movf	pow@y+2,w
  1949  0389  0462               	iorwf	pow@y+1,w
  1950  038A  0461               	iorwf	pow@y,w
  1951  038B  1D03               	skipz
  1952  038C  2B94               	goto	l2032
  1953  038D  3000               	movlw	0
  1954  038E  00DE               	movwf	?_pow
  1955  038F  3080               	movlw	128
  1956  0390  00DF               	movwf	?_pow+1
  1957  0391  303F               	movlw	63
  1958  0392  00E0               	movwf	?_pow+2
  1959  0393  0008               	return
  1960  0394                     l2032:	
  1961  0394  085E               	movf	pow@x,w
  1962  0395  00B0               	movwf	___ftge@ff1
  1963  0396  085F               	movf	pow@x+1,w
  1964  0397  00B1               	movwf	___ftge@ff1+1
  1965  0398  0860               	movf	pow@x+2,w
  1966  0399  00B2               	movwf	___ftge@ff1+2
  1967  039A  3000               	movlw	0
  1968  039B  00B3               	movwf	___ftge@ff2
  1969  039C  3000               	movlw	0
  1970  039D  00B4               	movwf	___ftge@ff2+1
  1971  039E  3000               	movlw	0
  1972  039F  00B5               	movwf	___ftge@ff2+2
  1973  03A0  120A  158A  2458  120A  118A  	fcall	___ftge
  1974  03A5  1803               	btfsc	3,0
  1975  03A6  2C00               	goto	l2044
  1976  03A7  1283               	bcf	3,5	;RP0=0, select bank0
  1977  03A8  1303               	bcf	3,6	;RP1=0, select bank0
  1978  03A9  0861               	movf	pow@y,w
  1979  03AA  00B0               	movwf	___fttol@f1
  1980  03AB  0862               	movf	pow@y+1,w
  1981  03AC  00B1               	movwf	___fttol@f1+1
  1982  03AD  0863               	movf	pow@y+2,w
  1983  03AE  00B2               	movwf	___fttol@f1+2
  1984  03AF  120A  158A  259C  120A  118A  	fcall	___fttol
  1985  03B4  1283               	bcf	3,5	;RP0=0, select bank0
  1986  03B5  1303               	bcf	3,6	;RP1=0, select bank0
  1987  03B6  0833               	movf	?___fttol+3,w
  1988  03B7  00EF               	movwf	pow@yi+3
  1989  03B8  0832               	movf	?___fttol+2,w
  1990  03B9  00EE               	movwf	pow@yi+2
  1991  03BA  0831               	movf	?___fttol+1,w
  1992  03BB  00ED               	movwf	pow@yi+1
  1993  03BC  0830               	movf	?___fttol,w
  1994  03BD  00EC               	movwf	pow@yi
  1995  03BE  086F               	movf	pow@yi+3,w
  1996  03BF  00FB               	movwf	___lltoft@c+3
  1997  03C0  086E               	movf	pow@yi+2,w
  1998  03C1  00FA               	movwf	___lltoft@c+2
  1999  03C2  086D               	movf	pow@yi+1,w
  2000  03C3  00F9               	movwf	___lltoft@c+1
  2001  03C4  086C               	movf	pow@yi,w
  2002  03C5  00F8               	movwf	___lltoft@c
  2003  03C6  120A  158A  2262  120A  118A  	fcall	___lltoft
  2004  03CB  1283               	bcf	3,5	;RP0=0, select bank0
  2005  03CC  1303               	bcf	3,6	;RP1=0, select bank0
  2006  03CD  0863               	movf	pow@y+2,w
  2007  03CE  067A               	xorwf	?___lltoft+2,w
  2008  03CF  1D03               	skipz
  2009  03D0  2BD7               	goto	u2535
  2010  03D1  0862               	movf	pow@y+1,w
  2011  03D2  0679               	xorwf	?___lltoft+1,w
  2012  03D3  1D03               	skipz
  2013  03D4  2BD7               	goto	u2535
  2014  03D5  0861               	movf	pow@y,w
  2015  03D6  0678               	xorwf	?___lltoft,w
  2016  03D7                     u2535:	
  2017  03D7  1903               	skipnz
  2018  03D8  2BE8               	goto	l2040
  2019  03D9  3021               	movlw	33
  2020  03DA  1683               	bsf	3,5	;RP0=1, select bank1
  2021  03DB  1303               	bcf	3,6	;RP1=0, select bank1
  2022  03DC  00C4               	movwf	_errno^(0+128)
  2023  03DD  3000               	movlw	0
  2024  03DE  00C5               	movwf	(_errno^(0+128)+1)
  2025  03DF  3000               	movlw	0
  2026  03E0  1283               	bcf	3,5	;RP0=0, select bank0
  2027  03E1  1303               	bcf	3,6	;RP1=0, select bank0
  2028  03E2  00DE               	movwf	?_pow
  2029  03E3  3000               	movlw	0
  2030  03E4  00DF               	movwf	?_pow+1
  2031  03E5  3000               	movlw	0
  2032  03E6  00E0               	movwf	?_pow+2
  2033  03E7  0008               	return
  2034  03E8                     l2040:	
  2035  03E8  086C               	movf	pow@yi,w
  2036  03E9  3901               	andlw	1
  2037  03EA  00E4               	movwf	??_pow
  2038  03EB  0864               	movf	??_pow,w
  2039  03EC  00EB               	movwf	pow@sign
  2040  03ED  085E               	movf	pow@x,w
  2041  03EE  00F0               	movwf	___ftneg@f1
  2042  03EF  085F               	movf	pow@x+1,w
  2043  03F0  00F1               	movwf	___ftneg@f1+1
  2044  03F1  0860               	movf	pow@x+2,w
  2045  03F2  00F2               	movwf	___ftneg@f1+2
  2046  03F3  120A  158A  218A  120A  118A  	fcall	___ftneg
  2047  03F8  0870               	movf	?___ftneg,w
  2048  03F9  1283               	bcf	3,5	;RP0=0, select bank0
  2049  03FA  1303               	bcf	3,6	;RP1=0, select bank0
  2050  03FB  00DE               	movwf	pow@x
  2051  03FC  0871               	movf	?___ftneg+1,w
  2052  03FD  00DF               	movwf	pow@x+1
  2053  03FE  0872               	movf	?___ftneg+2,w
  2054  03FF  00E0               	movwf	pow@x+2
  2055  0400                     l2044:	
  2056  0400  1283               	bcf	3,5	;RP0=0, select bank0
  2057  0401  1303               	bcf	3,6	;RP1=0, select bank0
  2058  0402  085E               	movf	pow@x,w
  2059  0403  00C7               	movwf	log@x
  2060  0404  085F               	movf	pow@x+1,w
  2061  0405  00C8               	movwf	log@x+1
  2062  0406  0860               	movf	pow@x+2,w
  2063  0407  00C9               	movwf	log@x+2
  2064  0408  120A  118A  21BD  120A  118A  	fcall	_log
  2065  040D  1283               	bcf	3,5	;RP0=0, select bank0
  2066  040E  1303               	bcf	3,6	;RP1=0, select bank0
  2067  040F  0847               	movf	?_log,w
  2068  0410  00E5               	movwf	_pow$733
  2069  0411  0848               	movf	?_log+1,w
  2070  0412  00E6               	movwf	_pow$733+1
  2071  0413  0849               	movf	?_log+2,w
  2072  0414  00E7               	movwf	_pow$733+2
  2073  0415  0861               	movf	pow@y,w
  2074  0416  00A0               	movwf	___ftmul@f1
  2075  0417  0862               	movf	pow@y+1,w
  2076  0418  00A1               	movwf	___ftmul@f1+1
  2077  0419  0863               	movf	pow@y+2,w
  2078  041A  00A2               	movwf	___ftmul@f1+2
  2079  041B  0865               	movf	_pow$733,w
  2080  041C  00A3               	movwf	___ftmul@f2
  2081  041D  0866               	movf	_pow$733+1,w
  2082  041E  00A4               	movwf	___ftmul@f2+1
  2083  041F  0867               	movf	_pow$733+2,w
  2084  0420  00A5               	movwf	___ftmul@f2+2
  2085  0421  120A  118A  228B  120A  118A  	fcall	___ftmul
  2086  0426  1283               	bcf	3,5	;RP0=0, select bank0
  2087  0427  1303               	bcf	3,6	;RP1=0, select bank0
  2088  0428  0820               	movf	?___ftmul,w
  2089  0429  00E8               	movwf	_pow$734
  2090  042A  0821               	movf	?___ftmul+1,w
  2091  042B  00E9               	movwf	_pow$734+1
  2092  042C  0822               	movf	?___ftmul+2,w
  2093  042D  00EA               	movwf	_pow$734+2
  2094  042E  0868               	movf	_pow$734,w
  2095  042F  00D1               	movwf	exp@x
  2096  0430  0869               	movf	_pow$734+1,w
  2097  0431  00D2               	movwf	exp@x+1
  2098  0432  086A               	movf	_pow$734+2,w
  2099  0433  00D3               	movwf	exp@x+2
  2100  0434  120A  118A  2693  120A  118A  	fcall	_exp
  2101  0439  1283               	bcf	3,5	;RP0=0, select bank0
  2102  043A  1303               	bcf	3,6	;RP1=0, select bank0
  2103  043B  0851               	movf	?_exp,w
  2104  043C  00DE               	movwf	pow@x
  2105  043D  0852               	movf	?_exp+1,w
  2106  043E  00DF               	movwf	pow@x+1
  2107  043F  0853               	movf	?_exp+2,w
  2108  0440  00E0               	movwf	pow@x+2
  2109  0441  086B               	movf	pow@sign,w
  2110  0442  1903               	btfsc	3,2
  2111  0443  0008               	return
  2112  0444  085E               	movf	pow@x,w
  2113  0445  00F0               	movwf	___ftneg@f1
  2114  0446  085F               	movf	pow@x+1,w
  2115  0447  00F1               	movwf	___ftneg@f1+1
  2116  0448  0860               	movf	pow@x+2,w
  2117  0449  00F2               	movwf	___ftneg@f1+2
  2118  044A  120A  158A  218A   	fcall	___ftneg
  2119  044D  0870               	movf	?___ftneg,w
  2120  044E  1283               	bcf	3,5	;RP0=0, select bank0
  2121  044F  1303               	bcf	3,6	;RP1=0, select bank0
  2122  0450  00DE               	movwf	?_pow
  2123  0451  0871               	movf	?___ftneg+1,w
  2124  0452  00DF               	movwf	?_pow+1
  2125  0453  0872               	movf	?___ftneg+2,w
  2126  0454  00E0               	movwf	?_pow+2
  2127  0455  0008               	return
  2128  0456                     __end_of_pow:	
  2129                           
  2130                           	psect	text6
  2131  01BD                     __ptext6:	
  2132 ;; *************** function _log *****************
  2133 ;; Defined at:
  2134 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\log.c"
  2135 ;; Parameters:    Size  Location     Type
  2136 ;;  x               3   39[BANK0 ] unsigned char 
  2137 ;; Auto vars:     Size  Location     Type
  2138 ;;  exponent        2   43[BANK0 ] int 
  2139 ;; Return value:  Size  Location     Type
  2140 ;;                  3   39[BANK0 ] int 
  2141 ;; Registers used:
  2142 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2143 ;; Tracked objects:
  2144 ;;		On entry : 0/0
  2145 ;;		On exit  : 0/0
  2146 ;;		Unchanged: 0/0
  2147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2148 ;;      Params:         0       3       0       0       0
  2149 ;;      Locals:         0       2       0       0       0
  2150 ;;      Temps:          0       1       0       0       0
  2151 ;;      Totals:         0       6       0       0       0
  2152 ;;Total ram usage:        6 bytes
  2153 ;; Hardware stack levels used:    1
  2154 ;; Hardware stack levels required when called:    3
  2155 ;; This function calls:
  2156 ;;		___awtoft
  2157 ;;		___ftadd
  2158 ;;		___ftge
  2159 ;;		___ftmul
  2160 ;;		_eval_poly
  2161 ;;		_frexp
  2162 ;; This function is called by:
  2163 ;;		_pow
  2164 ;; This function uses a non-reentrant model
  2165 ;;
  2166                           
  2167                           
  2168                           ;psect for function _log
  2169  01BD                     _log:	
  2170                           
  2171                           ;incstack = 0
  2172                           ; Regs used in _log: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2173  01BD  1283               	bcf	3,5	;RP0=0, select bank0
  2174  01BE  1303               	bcf	3,6	;RP1=0, select bank0
  2175  01BF  0847               	movf	log@x,w
  2176  01C0  00B0               	movwf	___ftge@ff1
  2177  01C1  0848               	movf	log@x+1,w
  2178  01C2  00B1               	movwf	___ftge@ff1+1
  2179  01C3  0849               	movf	log@x+2,w
  2180  01C4  00B2               	movwf	___ftge@ff1+2
  2181  01C5  3000               	movlw	0
  2182  01C6  00B3               	movwf	___ftge@ff2
  2183  01C7  3000               	movlw	0
  2184  01C8  00B4               	movwf	___ftge@ff2+1
  2185  01C9  3000               	movlw	0
  2186  01CA  00B5               	movwf	___ftge@ff2+2
  2187  01CB  120A  158A  2458  120A  118A  	fcall	___ftge
  2188  01D0  1803               	btfsc	3,0
  2189  01D1  29E1               	goto	l1936
  2190  01D2  3021               	movlw	33
  2191  01D3  1683               	bsf	3,5	;RP0=1, select bank1
  2192  01D4  1303               	bcf	3,6	;RP1=0, select bank1
  2193  01D5  00C4               	movwf	_errno^(0+128)
  2194  01D6  3000               	movlw	0
  2195  01D7  00C5               	movwf	(_errno^(0+128)+1)
  2196  01D8  3000               	movlw	0
  2197  01D9  1283               	bcf	3,5	;RP0=0, select bank0
  2198  01DA  1303               	bcf	3,6	;RP1=0, select bank0
  2199  01DB  00C7               	movwf	?_log
  2200  01DC  3000               	movlw	0
  2201  01DD  00C8               	movwf	?_log+1
  2202  01DE  3000               	movlw	0
  2203  01DF  00C9               	movwf	?_log+2
  2204  01E0  0008               	return
  2205  01E1                     l1936:	
  2206  01E1  1283               	bcf	3,5	;RP0=0, select bank0
  2207  01E2  1303               	bcf	3,6	;RP1=0, select bank0
  2208  01E3  0849               	movf	log@x+2,w
  2209  01E4  0448               	iorwf	log@x+1,w
  2210  01E5  0447               	iorwf	log@x,w
  2211  01E6  1D03               	skipz
  2212  01E7  29F7               	goto	l1942
  2213  01E8  3022               	movlw	34
  2214  01E9  1683               	bsf	3,5	;RP0=1, select bank1
  2215  01EA  1303               	bcf	3,6	;RP1=0, select bank1
  2216  01EB  00C4               	movwf	_errno^(0+128)
  2217  01EC  3000               	movlw	0
  2218  01ED  00C5               	movwf	(_errno^(0+128)+1)
  2219  01EE  3000               	movlw	0
  2220  01EF  1283               	bcf	3,5	;RP0=0, select bank0
  2221  01F0  1303               	bcf	3,6	;RP1=0, select bank0
  2222  01F1  00C7               	movwf	?_log
  2223  01F2  3000               	movlw	0
  2224  01F3  00C8               	movwf	?_log+1
  2225  01F4  3000               	movlw	0
  2226  01F5  00C9               	movwf	?_log+2
  2227  01F6  0008               	return
  2228  01F7                     l1942:	
  2229  01F7  3000               	movlw	0
  2230  01F8  00B0               	movwf	___ftadd@f1
  2231  01F9  3080               	movlw	128
  2232  01FA  00B1               	movwf	___ftadd@f1+1
  2233  01FB  30BF               	movlw	191
  2234  01FC  00B2               	movwf	___ftadd@f1+2
  2235  01FD  3000               	movlw	0
  2236  01FE  00A0               	movwf	___ftmul@f1
  2237  01FF  3000               	movlw	0
  2238  0200  00A1               	movwf	___ftmul@f1+1
  2239  0201  3040               	movlw	64
  2240  0202  00A2               	movwf	___ftmul@f1+2
  2241  0203  304B               	movlw	(low (log@exponent| 0))& (0+255)
  2242  0204  00CA               	movwf	??_log
  2243  0205  084A               	movf	??_log,w
  2244  0206  00F3               	movwf	frexp@eptr
  2245  0207  0847               	movf	log@x,w
  2246  0208  00F0               	movwf	frexp@value
  2247  0209  0848               	movf	log@x+1,w
  2248  020A  00F1               	movwf	frexp@value+1
  2249  020B  0849               	movf	log@x+2,w
  2250  020C  00F2               	movwf	frexp@value+2
  2251  020D  120A  158A  228D  120A  118A  	fcall	_frexp
  2252  0212  0870               	movf	?_frexp,w
  2253  0213  1283               	bcf	3,5	;RP0=0, select bank0
  2254  0214  1303               	bcf	3,6	;RP1=0, select bank0
  2255  0215  00A3               	movwf	___ftmul@f2
  2256  0216  0871               	movf	?_frexp+1,w
  2257  0217  00A4               	movwf	___ftmul@f2+1
  2258  0218  0872               	movf	?_frexp+2,w
  2259  0219  00A5               	movwf	___ftmul@f2+2
  2260  021A  120A  118A  228B  120A  118A  	fcall	___ftmul
  2261  021F  1283               	bcf	3,5	;RP0=0, select bank0
  2262  0220  1303               	bcf	3,6	;RP1=0, select bank0
  2263  0221  0820               	movf	?___ftmul,w
  2264  0222  00B3               	movwf	___ftadd@f2
  2265  0223  0821               	movf	?___ftmul+1,w
  2266  0224  00B4               	movwf	___ftadd@f2+1
  2267  0225  0822               	movf	?___ftmul+2,w
  2268  0226  00B5               	movwf	___ftadd@f2+2
  2269  0227  120A  118A  2456  120A  118A  	fcall	___ftadd
  2270  022C  1283               	bcf	3,5	;RP0=0, select bank0
  2271  022D  1303               	bcf	3,6	;RP1=0, select bank0
  2272  022E  0830               	movf	?___ftadd,w
  2273  022F  00C7               	movwf	log@x
  2274  0230  0831               	movf	?___ftadd+1,w
  2275  0231  00C8               	movwf	log@x+1
  2276  0232  0832               	movf	?___ftadd+2,w
  2277  0233  00C9               	movwf	log@x+2
  2278  0234  30FF               	movlw	255
  2279  0235  07CB               	addwf	log@exponent,f
  2280  0236  1803               	skipnc
  2281  0237  0ACC               	incf	log@exponent+1,f
  2282  0238  30FF               	movlw	255
  2283  0239  07CC               	addwf	log@exponent+1,f
  2284  023A  0847               	movf	log@x,w
  2285  023B  00BD               	movwf	eval_poly@x
  2286  023C  0848               	movf	log@x+1,w
  2287  023D  00BE               	movwf	eval_poly@x+1
  2288  023E  0849               	movf	log@x+2,w
  2289  023F  00BF               	movwf	eval_poly@x+2
  2290  0240  301F               	movlw	(low ((log@coeff-__stringbase)| (0+32768)))& (0+255)
  2291  0241  00CA               	movwf	??_log
  2292  0242  084A               	movf	??_log,w
  2293  0243  00C0               	movwf	eval_poly@d
  2294  0244  3008               	movlw	8
  2295  0245  00C1               	movwf	eval_poly@n
  2296  0246  3000               	movlw	0
  2297  0247  00C2               	movwf	eval_poly@n+1
  2298  0248  120A  158A  2523  120A  118A  	fcall	_eval_poly
  2299  024D  1283               	bcf	3,5	;RP0=0, select bank0
  2300  024E  1303               	bcf	3,6	;RP1=0, select bank0
  2301  024F  083D               	movf	?_eval_poly,w
  2302  0250  00C7               	movwf	log@x
  2303  0251  083E               	movf	?_eval_poly+1,w
  2304  0252  00C8               	movwf	log@x+1
  2305  0253  083F               	movf	?_eval_poly+2,w
  2306  0254  00C9               	movwf	log@x+2
  2307  0255  0847               	movf	log@x,w
  2308  0256  00B0               	movwf	___ftadd@f1
  2309  0257  0848               	movf	log@x+1,w
  2310  0258  00B1               	movwf	___ftadd@f1+1
  2311  0259  0849               	movf	log@x+2,w
  2312  025A  00B2               	movwf	___ftadd@f1+2
  2313  025B  3072               	movlw	114
  2314  025C  00A0               	movwf	___ftmul@f1
  2315  025D  3031               	movlw	49
  2316  025E  00A1               	movwf	___ftmul@f1+1
  2317  025F  303F               	movlw	63
  2318  0260  00A2               	movwf	___ftmul@f1+2
  2319  0261  084C               	movf	log@exponent+1,w
  2320  0262  00F9               	movwf	___awtoft@c+1
  2321  0263  084B               	movf	log@exponent,w
  2322  0264  00F8               	movwf	___awtoft@c
  2323  0265  120A  158A  21FE  120A  118A  	fcall	___awtoft
  2324  026A  0878               	movf	?___awtoft,w
  2325  026B  1283               	bcf	3,5	;RP0=0, select bank0
  2326  026C  1303               	bcf	3,6	;RP1=0, select bank0
  2327  026D  00A3               	movwf	___ftmul@f2
  2328  026E  0879               	movf	?___awtoft+1,w
  2329  026F  00A4               	movwf	___ftmul@f2+1
  2330  0270  087A               	movf	?___awtoft+2,w
  2331  0271  00A5               	movwf	___ftmul@f2+2
  2332  0272  120A  118A  228B  120A  118A  	fcall	___ftmul
  2333  0277  1283               	bcf	3,5	;RP0=0, select bank0
  2334  0278  1303               	bcf	3,6	;RP1=0, select bank0
  2335  0279  0820               	movf	?___ftmul,w
  2336  027A  00B3               	movwf	___ftadd@f2
  2337  027B  0821               	movf	?___ftmul+1,w
  2338  027C  00B4               	movwf	___ftadd@f2+1
  2339  027D  0822               	movf	?___ftmul+2,w
  2340  027E  00B5               	movwf	___ftadd@f2+2
  2341  027F  120A  118A  2456   	fcall	___ftadd
  2342  0282  1283               	bcf	3,5	;RP0=0, select bank0
  2343  0283  1303               	bcf	3,6	;RP1=0, select bank0
  2344  0284  0830               	movf	?___ftadd,w
  2345  0285  00C7               	movwf	?_log
  2346  0286  0831               	movf	?___ftadd+1,w
  2347  0287  00C8               	movwf	?_log+1
  2348  0288  0832               	movf	?___ftadd+2,w
  2349  0289  00C9               	movwf	?_log+2
  2350  028A  0008               	return
  2351  028B                     __end_of_log:	
  2352                           
  2353                           	psect	text7
  2354  0693                     __ptext7:	
  2355 ;; *************** function _exp *****************
  2356 ;; Defined at:
  2357 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\exp.c"
  2358 ;; Parameters:    Size  Location     Type
  2359 ;;  x               3   49[BANK0 ] int 
  2360 ;; Auto vars:     Size  Location     Type
  2361 ;;  exponent        2   59[BANK0 ] int 
  2362 ;;  sign            1   61[BANK0 ] unsigned char 
  2363 ;; Return value:  Size  Location     Type
  2364 ;;                  3   49[BANK0 ] unsigned char 
  2365 ;; Registers used:
  2366 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2367 ;; Tracked objects:
  2368 ;;		On entry : 0/0
  2369 ;;		On exit  : 0/0
  2370 ;;		Unchanged: 0/0
  2371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2372 ;;      Params:         0       3       0       0       0
  2373 ;;      Locals:         0       9       0       0       0
  2374 ;;      Temps:          0       1       0       0       0
  2375 ;;      Totals:         0      13       0       0       0
  2376 ;;Total ram usage:       13 bytes
  2377 ;; Hardware stack levels used:    1
  2378 ;; Hardware stack levels required when called:    3
  2379 ;; This function calls:
  2380 ;;		___awtoft
  2381 ;;		___ftdiv
  2382 ;;		___ftge
  2383 ;;		___ftmul
  2384 ;;		___ftneg
  2385 ;;		___ftsub
  2386 ;;		___fttol
  2387 ;;		_eval_poly
  2388 ;;		_floor
  2389 ;;		_ldexp
  2390 ;; This function is called by:
  2391 ;;		_pow
  2392 ;; This function uses a non-reentrant model
  2393 ;;
  2394                           
  2395                           
  2396                           ;psect for function _exp
  2397  0693                     _exp:	
  2398                           
  2399                           ;incstack = 0
  2400                           ; Regs used in _exp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2401  0693  1283               	bcf	3,5	;RP0=0, select bank0
  2402  0694  1303               	bcf	3,6	;RP1=0, select bank0
  2403  0695  0853               	movf	exp@x+2,w
  2404  0696  0452               	iorwf	exp@x+1,w
  2405  0697  0451               	iorwf	exp@x,w
  2406  0698  1D03               	skipz
  2407  0699  2EA1               	goto	l1958
  2408  069A  3000               	movlw	0
  2409  069B  00D1               	movwf	?_exp
  2410  069C  3080               	movlw	128
  2411  069D  00D2               	movwf	?_exp+1
  2412  069E  303F               	movlw	63
  2413  069F  00D3               	movwf	?_exp+2
  2414  06A0  0008               	return
  2415  06A1                     l1958:	
  2416  06A1  3072               	movlw	114
  2417  06A2  00B0               	movwf	___ftge@ff1
  2418  06A3  3031               	movlw	49
  2419  06A4  00B1               	movwf	___ftge@ff1+1
  2420  06A5  3044               	movlw	68
  2421  06A6  00B2               	movwf	___ftge@ff1+2
  2422  06A7  0851               	movf	exp@x,w
  2423  06A8  00B3               	movwf	___ftge@ff2
  2424  06A9  0852               	movf	exp@x+1,w
  2425  06AA  00B4               	movwf	___ftge@ff2+1
  2426  06AB  0853               	movf	exp@x+2,w
  2427  06AC  00B5               	movwf	___ftge@ff2+2
  2428  06AD  120A  158A  2458  120A  118A  	fcall	___ftge
  2429  06B2  1803               	btfsc	3,0
  2430  06B3  2EC2               	goto	l1968
  2431  06B4  3022               	movlw	34
  2432  06B5  1683               	bsf	3,5	;RP0=1, select bank1
  2433  06B6  1303               	bcf	3,6	;RP1=0, select bank1
  2434  06B7  00C4               	movwf	_errno^(0+128)
  2435  06B8  3000               	movlw	0
  2436  06B9  00C5               	movwf	(_errno^(0+128)+1)
  2437  06BA  30FF               	movlw	255
  2438  06BB  1283               	bcf	3,5	;RP0=0, select bank0
  2439  06BC  00D1               	movwf	?_exp
  2440  06BD  307F               	movlw	127
  2441  06BE  00D2               	movwf	?_exp+1
  2442  06BF  307F               	movlw	127
  2443  06C0  00D3               	movwf	?_exp+2
  2444  06C1  0008               	return
  2445  06C2                     l1968:	
  2446  06C2  1283               	bcf	3,5	;RP0=0, select bank0
  2447  06C3  1303               	bcf	3,6	;RP1=0, select bank0
  2448  06C4  0851               	movf	exp@x,w
  2449  06C5  00B0               	movwf	___ftge@ff1
  2450  06C6  0852               	movf	exp@x+1,w
  2451  06C7  00B1               	movwf	___ftge@ff1+1
  2452  06C8  0853               	movf	exp@x+2,w
  2453  06C9  00B2               	movwf	___ftge@ff1+2
  2454  06CA  3049               	movlw	73
  2455  06CB  00B3               	movwf	___ftge@ff2
  2456  06CC  303A               	movlw	58
  2457  06CD  00B4               	movwf	___ftge@ff2+1
  2458  06CE  30C4               	movlw	196
  2459  06CF  00B5               	movwf	___ftge@ff2+2
  2460  06D0  120A  158A  2458  120A  118A  	fcall	___ftge
  2461  06D5  1803               	btfsc	3,0
  2462  06D6  2EE6               	goto	l1974
  2463  06D7  3022               	movlw	34
  2464  06D8  1683               	bsf	3,5	;RP0=1, select bank1
  2465  06D9  1303               	bcf	3,6	;RP1=0, select bank1
  2466  06DA  00C4               	movwf	_errno^(0+128)
  2467  06DB  3000               	movlw	0
  2468  06DC  00C5               	movwf	(_errno^(0+128)+1)
  2469  06DD  3000               	movlw	0
  2470  06DE  1283               	bcf	3,5	;RP0=0, select bank0
  2471  06DF  1303               	bcf	3,6	;RP1=0, select bank0
  2472  06E0  00D1               	movwf	?_exp
  2473  06E1  3000               	movlw	0
  2474  06E2  00D2               	movwf	?_exp+1
  2475  06E3  3000               	movlw	0
  2476  06E4  00D3               	movwf	?_exp+2
  2477  06E5  0008               	return
  2478  06E6                     l1974:	
  2479  06E6  1283               	bcf	3,5	;RP0=0, select bank0
  2480  06E7  1303               	bcf	3,6	;RP1=0, select bank0
  2481  06E8  0851               	movf	exp@x,w
  2482  06E9  00B0               	movwf	___ftge@ff1
  2483  06EA  0852               	movf	exp@x+1,w
  2484  06EB  00B1               	movwf	___ftge@ff1+1
  2485  06EC  0853               	movf	exp@x+2,w
  2486  06ED  00B2               	movwf	___ftge@ff1+2
  2487  06EE  3000               	movlw	0
  2488  06EF  00B3               	movwf	___ftge@ff2
  2489  06F0  3000               	movlw	0
  2490  06F1  00B4               	movwf	___ftge@ff2+1
  2491  06F2  3000               	movlw	0
  2492  06F3  00B5               	movwf	___ftge@ff2+2
  2493  06F4  120A  158A  2458  120A  118A  	fcall	___ftge
  2494  06F9  1803               	btfsc	3,0
  2495  06FA  2EFD               	goto	u2400
  2496  06FB  3001               	movlw	1
  2497  06FC  2EFE               	goto	u2410
  2498  06FD                     u2400:	
  2499  06FD  3000               	movlw	0
  2500  06FE                     u2410:	
  2501  06FE  1283               	bcf	3,5	;RP0=0, select bank0
  2502  06FF  1303               	bcf	3,6	;RP1=0, select bank0
  2503  0700  00D4               	movwf	??_exp
  2504  0701  0854               	movf	??_exp,w
  2505  0702  00DD               	movwf	exp@sign
  2506  0703  085D               	movf	exp@sign,w
  2507  0704  1903               	btfsc	3,2
  2508  0705  2F19               	goto	l1980
  2509  0706  0851               	movf	exp@x,w
  2510  0707  00F0               	movwf	___ftneg@f1
  2511  0708  0852               	movf	exp@x+1,w
  2512  0709  00F1               	movwf	___ftneg@f1+1
  2513  070A  0853               	movf	exp@x+2,w
  2514  070B  00F2               	movwf	___ftneg@f1+2
  2515  070C  120A  158A  218A  120A  118A  	fcall	___ftneg
  2516  0711  0870               	movf	?___ftneg,w
  2517  0712  1283               	bcf	3,5	;RP0=0, select bank0
  2518  0713  1303               	bcf	3,6	;RP1=0, select bank0
  2519  0714  00D1               	movwf	exp@x
  2520  0715  0871               	movf	?___ftneg+1,w
  2521  0716  00D2               	movwf	exp@x+1
  2522  0717  0872               	movf	?___ftneg+2,w
  2523  0718  00D3               	movwf	exp@x+2
  2524  0719                     l1980:	
  2525  0719  30AA               	movlw	170
  2526  071A  00A0               	movwf	___ftmul@f1
  2527  071B  30B8               	movlw	184
  2528  071C  00A1               	movwf	___ftmul@f1+1
  2529  071D  303F               	movlw	63
  2530  071E  00A2               	movwf	___ftmul@f1+2
  2531  071F  0851               	movf	exp@x,w
  2532  0720  00A3               	movwf	___ftmul@f2
  2533  0721  0852               	movf	exp@x+1,w
  2534  0722  00A4               	movwf	___ftmul@f2+1
  2535  0723  0853               	movf	exp@x+2,w
  2536  0724  00A5               	movwf	___ftmul@f2+2
  2537  0725  120A  118A  228B  120A  118A  	fcall	___ftmul
  2538  072A  1283               	bcf	3,5	;RP0=0, select bank0
  2539  072B  1303               	bcf	3,6	;RP1=0, select bank0
  2540  072C  0820               	movf	?___ftmul,w
  2541  072D  00D1               	movwf	exp@x
  2542  072E  0821               	movf	?___ftmul+1,w
  2543  072F  00D2               	movwf	exp@x+1
  2544  0730  0822               	movf	?___ftmul+2,w
  2545  0731  00D3               	movwf	exp@x+2
  2546  0732  0851               	movf	exp@x,w
  2547  0733  00C6               	movwf	floor@x
  2548  0734  0852               	movf	exp@x+1,w
  2549  0735  00C7               	movwf	floor@x+1
  2550  0736  0853               	movf	exp@x+2,w
  2551  0737  00C8               	movwf	floor@x+2
  2552  0738  120A  158A  262A  120A  118A  	fcall	_floor
  2553  073D  1283               	bcf	3,5	;RP0=0, select bank0
  2554  073E  1303               	bcf	3,6	;RP1=0, select bank0
  2555  073F  0846               	movf	?_floor,w
  2556  0740  00D5               	movwf	_exp$735
  2557  0741  0847               	movf	?_floor+1,w
  2558  0742  00D6               	movwf	_exp$735+1
  2559  0743  0848               	movf	?_floor+2,w
  2560  0744  00D7               	movwf	_exp$735+2
  2561  0745  0855               	movf	_exp$735,w
  2562  0746  00B0               	movwf	___fttol@f1
  2563  0747  0856               	movf	_exp$735+1,w
  2564  0748  00B1               	movwf	___fttol@f1+1
  2565  0749  0857               	movf	_exp$735+2,w
  2566  074A  00B2               	movwf	___fttol@f1+2
  2567  074B  120A  158A  259C  120A  118A  	fcall	___fttol
  2568  0750  1283               	bcf	3,5	;RP0=0, select bank0
  2569  0751  1303               	bcf	3,6	;RP1=0, select bank0
  2570  0752  0831               	movf	?___fttol+1,w
  2571  0753  00DC               	movwf	exp@exponent+1
  2572  0754  0830               	movf	?___fttol,w
  2573  0755  00DB               	movwf	exp@exponent
  2574  0756  085C               	movf	exp@exponent+1,w
  2575  0757  00F9               	movwf	___awtoft@c+1
  2576  0758  085B               	movf	exp@exponent,w
  2577  0759  00F8               	movwf	___awtoft@c
  2578  075A  120A  158A  21FE  120A  118A  	fcall	___awtoft
  2579  075F  0878               	movf	?___awtoft,w
  2580  0760  1283               	bcf	3,5	;RP0=0, select bank0
  2581  0761  1303               	bcf	3,6	;RP1=0, select bank0
  2582  0762  00BD               	movwf	___ftsub@f2
  2583  0763  0879               	movf	?___awtoft+1,w
  2584  0764  00BE               	movwf	___ftsub@f2+1
  2585  0765  087A               	movf	?___awtoft+2,w
  2586  0766  00BF               	movwf	___ftsub@f2+2
  2587  0767  0851               	movf	exp@x,w
  2588  0768  00C0               	movwf	___ftsub@f1
  2589  0769  0852               	movf	exp@x+1,w
  2590  076A  00C1               	movwf	___ftsub@f1+1
  2591  076B  0853               	movf	exp@x+2,w
  2592  076C  00C2               	movwf	___ftsub@f1+2
  2593  076D  120A  158A  221F  120A  118A  	fcall	___ftsub
  2594  0772  1283               	bcf	3,5	;RP0=0, select bank0
  2595  0773  1303               	bcf	3,6	;RP1=0, select bank0
  2596  0774  083D               	movf	?___ftsub,w
  2597  0775  00D1               	movwf	exp@x
  2598  0776  083E               	movf	?___ftsub+1,w
  2599  0777  00D2               	movwf	exp@x+1
  2600  0778  083F               	movf	?___ftsub+2,w
  2601  0779  00D3               	movwf	exp@x+2
  2602  077A  0851               	movf	exp@x,w
  2603  077B  00BD               	movwf	eval_poly@x
  2604  077C  0852               	movf	exp@x+1,w
  2605  077D  00BE               	movwf	eval_poly@x+1
  2606  077E  0853               	movf	exp@x+2,w
  2607  077F  00BF               	movwf	eval_poly@x+2
  2608  0780  3001               	movlw	(low ((exp@coeff-__stringbase)| (0+32768)))& (0+255)
  2609  0781  00D4               	movwf	??_exp
  2610  0782  0854               	movf	??_exp,w
  2611  0783  00C0               	movwf	eval_poly@d
  2612  0784  3009               	movlw	9
  2613  0785  00C1               	movwf	eval_poly@n
  2614  0786  3000               	movlw	0
  2615  0787  00C2               	movwf	eval_poly@n+1
  2616  0788  120A  158A  2523  120A  118A  	fcall	_eval_poly
  2617  078D  1283               	bcf	3,5	;RP0=0, select bank0
  2618  078E  1303               	bcf	3,6	;RP1=0, select bank0
  2619  078F  083D               	movf	?_eval_poly,w
  2620  0790  00C7               	movwf	ldexp@value
  2621  0791  083E               	movf	?_eval_poly+1,w
  2622  0792  00C8               	movwf	ldexp@value+1
  2623  0793  083F               	movf	?_eval_poly+2,w
  2624  0794  00C9               	movwf	ldexp@value+2
  2625  0795  085C               	movf	exp@exponent+1,w
  2626  0796  00CB               	movwf	ldexp@newexp+1
  2627  0797  085B               	movf	exp@exponent,w
  2628  0798  00CA               	movwf	ldexp@newexp
  2629  0799  120A  158A  26C3  120A  118A  	fcall	_ldexp
  2630  079E  1283               	bcf	3,5	;RP0=0, select bank0
  2631  079F  1303               	bcf	3,6	;RP1=0, select bank0
  2632  07A0  0847               	movf	?_ldexp,w
  2633  07A1  00D1               	movwf	exp@x
  2634  07A2  0848               	movf	?_ldexp+1,w
  2635  07A3  00D2               	movwf	exp@x+1
  2636  07A4  0849               	movf	?_ldexp+2,w
  2637  07A5  00D3               	movwf	exp@x+2
  2638  07A6  085D               	movf	exp@sign,w
  2639  07A7  1903               	btfsc	3,2
  2640  07A8  0008               	return
  2641  07A9  30FF               	movlw	255
  2642  07AA  00D8               	movwf	_exp$504
  2643  07AB  307F               	movlw	127
  2644  07AC  00D9               	movwf	_exp$504+1
  2645  07AD  307F               	movlw	127
  2646  07AE  00DA               	movwf	_exp$504+2
  2647  07AF  0853               	movf	exp@x+2,w
  2648  07B0  065A               	xorwf	_exp$504+2,w
  2649  07B1  1D03               	skipz
  2650  07B2  2FB9               	goto	u2445
  2651  07B3  0852               	movf	exp@x+1,w
  2652  07B4  0659               	xorwf	_exp$504+1,w
  2653  07B5  1D03               	skipz
  2654  07B6  2FB9               	goto	u2445
  2655  07B7  0851               	movf	exp@x,w
  2656  07B8  0658               	xorwf	_exp$504,w
  2657  07B9                     u2445:	
  2658  07B9  1D03               	skipz
  2659  07BA  2FC2               	goto	l2002
  2660  07BB  3000               	movlw	0
  2661  07BC  00D1               	movwf	?_exp
  2662  07BD  3000               	movlw	0
  2663  07BE  00D2               	movwf	?_exp+1
  2664  07BF  3000               	movlw	0
  2665  07C0  00D3               	movwf	?_exp+2
  2666  07C1  0008               	return
  2667  07C2                     l2002:	
  2668  07C2  0851               	movf	exp@x,w
  2669  07C3  00B0               	movwf	___ftdiv@f2
  2670  07C4  0852               	movf	exp@x+1,w
  2671  07C5  00B1               	movwf	___ftdiv@f2+1
  2672  07C6  0853               	movf	exp@x+2,w
  2673  07C7  00B2               	movwf	___ftdiv@f2+2
  2674  07C8  3000               	movlw	0
  2675  07C9  00B3               	movwf	___ftdiv@f1
  2676  07CA  3080               	movlw	128
  2677  07CB  00B4               	movwf	___ftdiv@f1+1
  2678  07CC  303F               	movlw	63
  2679  07CD  00B5               	movwf	___ftdiv@f1+2
  2680  07CE  120A  118A  2042   	fcall	___ftdiv
  2681  07D1  1283               	bcf	3,5	;RP0=0, select bank0
  2682  07D2  1303               	bcf	3,6	;RP1=0, select bank0
  2683  07D3  0830               	movf	?___ftdiv,w
  2684  07D4  00D1               	movwf	?_exp
  2685  07D5  0831               	movf	?___ftdiv+1,w
  2686  07D6  00D2               	movwf	?_exp+1
  2687  07D7  0832               	movf	?___ftdiv+2,w
  2688  07D8  00D3               	movwf	?_exp+2
  2689  07D9  0008               	return
  2690  07DA                     __end_of_exp:	
  2691                           
  2692                           	psect	text8
  2693  0EC3                     __ptext8:	
  2694 ;; *************** function _ldexp *****************
  2695 ;; Defined at:
  2696 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\frexp.c"
  2697 ;; Parameters:    Size  Location     Type
  2698 ;;  value           3   39[BANK0 ] unsigned char 
  2699 ;;  newexp          2   42[BANK0 ] int 
  2700 ;; Auto vars:     Size  Location     Type
  2701 ;;		None
  2702 ;; Return value:  Size  Location     Type
  2703 ;;                  3   39[BANK0 ] int 
  2704 ;; Registers used:
  2705 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2706 ;; Tracked objects:
  2707 ;;		On entry : 0/0
  2708 ;;		On exit  : 0/0
  2709 ;;		Unchanged: 0/0
  2710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2711 ;;      Params:         0       5       0       0       0
  2712 ;;      Locals:         0       3       0       0       0
  2713 ;;      Temps:          0       2       0       0       0
  2714 ;;      Totals:         0      10       0       0       0
  2715 ;;Total ram usage:       10 bytes
  2716 ;; Hardware stack levels used:    1
  2717 ;; Hardware stack levels required when called:    1
  2718 ;; This function calls:
  2719 ;;		___ftge
  2720 ;;		___ftneg
  2721 ;; This function is called by:
  2722 ;;		_exp
  2723 ;; This function uses a non-reentrant model
  2724 ;;
  2725                           
  2726                           
  2727                           ;psect for function _ldexp
  2728  0EC3                     _ldexp:	
  2729                           
  2730                           ;incstack = 0
  2731                           ; Regs used in _ldexp: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2732  0EC3  1283               	bcf	3,5	;RP0=0, select bank0
  2733  0EC4  1303               	bcf	3,6	;RP1=0, select bank0
  2734  0EC5  0849               	movf	ldexp@value+2,w
  2735  0EC6  0448               	iorwf	ldexp@value+1,w
  2736  0EC7  0447               	iorwf	ldexp@value,w
  2737  0EC8  1D03               	skipz
  2738  0EC9  2ED1               	goto	l1880
  2739  0ECA  3000               	movlw	0
  2740  0ECB  00C7               	movwf	?_ldexp
  2741  0ECC  3000               	movlw	0
  2742  0ECD  00C8               	movwf	?_ldexp+1
  2743  0ECE  3000               	movlw	0
  2744  0ECF  00C9               	movwf	?_ldexp+2
  2745  0ED0  0008               	return
  2746  0ED1                     l1880:	
  2747  0ED1  0849               	movf	ldexp@value+2,w
  2748  0ED2  397F               	andlw	127
  2749  0ED3  00CC               	movwf	??_ldexp
  2750  0ED4  01CD               	clrf	??_ldexp+1
  2751  0ED5  1003               	clrc
  2752  0ED6  0DCC               	rlf	??_ldexp,f
  2753  0ED7  0DCD               	rlf	??_ldexp+1,f
  2754  0ED8  084C               	movf	??_ldexp,w
  2755  0ED9  07CA               	addwf	ldexp@newexp,f
  2756  0EDA  1803               	skipnc
  2757  0EDB  0ACB               	incf	ldexp@newexp+1,f
  2758  0EDC  084D               	movf	??_ldexp+1,w
  2759  0EDD  07CB               	addwf	ldexp@newexp+1,f
  2760  0EDE  0D48               	rlf	ldexp@value+1,w
  2761  0EDF  0D48               	rlf	ldexp@value+1,w
  2762  0EE0  3901               	andlw	1
  2763  0EE1  00CC               	movwf	??_ldexp
  2764  0EE2  01CD               	clrf	??_ldexp+1
  2765  0EE3  084C               	movf	??_ldexp,w
  2766  0EE4  07CA               	addwf	ldexp@newexp,f
  2767  0EE5  1803               	skipnc
  2768  0EE6  0ACB               	incf	ldexp@newexp+1,f
  2769  0EE7  084D               	movf	??_ldexp+1,w
  2770  0EE8  07CB               	addwf	ldexp@newexp+1,f
  2771  0EE9  1FCB               	btfss	ldexp@newexp+1,7
  2772  0EEA  2EFA               	goto	l1890
  2773  0EEB  3022               	movlw	34
  2774  0EEC  1683               	bsf	3,5	;RP0=1, select bank1
  2775  0EED  1303               	bcf	3,6	;RP1=0, select bank1
  2776  0EEE  00C4               	movwf	_errno^(0+128)
  2777  0EEF  3000               	movlw	0
  2778  0EF0  00C5               	movwf	(_errno^(0+128)+1)
  2779  0EF1  3000               	movlw	0
  2780  0EF2  1283               	bcf	3,5	;RP0=0, select bank0
  2781  0EF3  1303               	bcf	3,6	;RP1=0, select bank0
  2782  0EF4  00C7               	movwf	?_ldexp
  2783  0EF5  3000               	movlw	0
  2784  0EF6  00C8               	movwf	?_ldexp+1
  2785  0EF7  3000               	movlw	0
  2786  0EF8  00C9               	movwf	?_ldexp+2
  2787  0EF9  0008               	return
  2788  0EFA                     l1890:	
  2789  0EFA  084B               	movf	ldexp@newexp+1,w
  2790  0EFB  3A80               	xorlw	128
  2791  0EFC  00FF               	movwf	127
  2792  0EFD  3081               	movlw	129
  2793  0EFE  027F               	subwf	127,w
  2794  0EFF  1D03               	skipz
  2795  0F00  2F03               	goto	u2315
  2796  0F01  3000               	movlw	0
  2797  0F02  024A               	subwf	ldexp@newexp,w
  2798  0F03                     u2315:	
  2799  0F03  1C03               	skipc
  2800  0F04  2F43               	goto	l1914
  2801  0F05  3022               	movlw	34
  2802  0F06  1683               	bsf	3,5	;RP0=1, select bank1
  2803  0F07  1303               	bcf	3,6	;RP1=0, select bank1
  2804  0F08  00C4               	movwf	_errno^(0+128)
  2805  0F09  3000               	movlw	0
  2806  0F0A  00C5               	movwf	(_errno^(0+128)+1)
  2807  0F0B  1283               	bcf	3,5	;RP0=0, select bank0
  2808  0F0C  1303               	bcf	3,6	;RP1=0, select bank0
  2809  0F0D  0847               	movf	ldexp@value,w
  2810  0F0E  00B0               	movwf	___ftge@ff1
  2811  0F0F  0848               	movf	ldexp@value+1,w
  2812  0F10  00B1               	movwf	___ftge@ff1+1
  2813  0F11  0849               	movf	ldexp@value+2,w
  2814  0F12  00B2               	movwf	___ftge@ff1+2
  2815  0F13  3000               	movlw	0
  2816  0F14  00B3               	movwf	___ftge@ff2
  2817  0F15  3000               	movlw	0
  2818  0F16  00B4               	movwf	___ftge@ff2+1
  2819  0F17  3000               	movlw	0
  2820  0F18  00B5               	movwf	___ftge@ff2+2
  2821  0F19  120A  158A  2458  120A  158A  	fcall	___ftge
  2822  0F1E  1803               	btfsc	3,0
  2823  0F1F  2F3A               	goto	l1910
  2824  0F20  30FF               	movlw	255
  2825  0F21  1283               	bcf	3,5	;RP0=0, select bank0
  2826  0F22  1303               	bcf	3,6	;RP1=0, select bank0
  2827  0F23  00CE               	movwf	_ldexp$541
  2828  0F24  307F               	movlw	127
  2829  0F25  00CF               	movwf	_ldexp$541+1
  2830  0F26  307F               	movlw	127
  2831  0F27  00D0               	movwf	_ldexp$541+2
  2832  0F28  084E               	movf	_ldexp$541,w
  2833  0F29  00F0               	movwf	___ftneg@f1
  2834  0F2A  084F               	movf	_ldexp$541+1,w
  2835  0F2B  00F1               	movwf	___ftneg@f1+1
  2836  0F2C  0850               	movf	_ldexp$541+2,w
  2837  0F2D  00F2               	movwf	___ftneg@f1+2
  2838  0F2E  120A  158A  218A   	fcall	___ftneg
  2839  0F31  0870               	movf	?___ftneg,w
  2840  0F32  1283               	bcf	3,5	;RP0=0, select bank0
  2841  0F33  1303               	bcf	3,6	;RP1=0, select bank0
  2842  0F34  00C7               	movwf	?_ldexp
  2843  0F35  0871               	movf	?___ftneg+1,w
  2844  0F36  00C8               	movwf	?_ldexp+1
  2845  0F37  0872               	movf	?___ftneg+2,w
  2846  0F38  00C9               	movwf	?_ldexp+2
  2847  0F39  0008               	return
  2848  0F3A                     l1910:	
  2849  0F3A  30FF               	movlw	255
  2850  0F3B  1283               	bcf	3,5	;RP0=0, select bank0
  2851  0F3C  1303               	bcf	3,6	;RP1=0, select bank0
  2852  0F3D  00C7               	movwf	?_ldexp
  2853  0F3E  307F               	movlw	127
  2854  0F3F  00C8               	movwf	?_ldexp+1
  2855  0F40  307F               	movlw	127
  2856  0F41  00C9               	movwf	?_ldexp+2
  2857  0F42  0008               	return
  2858  0F43                     l1914:	
  2859  0F43  1283               	bcf	3,5	;RP0=0, select bank0
  2860  0F44  1303               	bcf	3,6	;RP1=0, select bank0
  2861  0F45  084B               	movf	ldexp@newexp+1,w
  2862  0F46  00CD               	movwf	??_ldexp+1
  2863  0F47  084A               	movf	ldexp@newexp,w
  2864  0F48  00CC               	movwf	??_ldexp
  2865  0F49  0D4D               	rlf	??_ldexp+1,w
  2866  0F4A  0CCD               	rrf	??_ldexp+1,f
  2867  0F4B  0CCC               	rrf	??_ldexp,f
  2868  0F4C  0849               	movf	ldexp@value+2,w
  2869  0F4D  064C               	xorwf	??_ldexp,w
  2870  0F4E  3980               	andlw	-128
  2871  0F4F  064C               	xorwf	??_ldexp,w
  2872  0F50  00C9               	movwf	ldexp@value+2
  2873  0F51  084A               	movf	ldexp@newexp,w
  2874  0F52  3901               	andlw	1
  2875  0F53  00CC               	movwf	??_ldexp
  2876  0F54  0CCC               	rrf	??_ldexp,f
  2877  0F55  0CCC               	rrf	??_ldexp,f
  2878  0F56  0848               	movf	ldexp@value+1,w
  2879  0F57  064C               	xorwf	??_ldexp,w
  2880  0F58  397F               	andlw	-129
  2881  0F59  064C               	xorwf	??_ldexp,w
  2882  0F5A  00C8               	movwf	ldexp@value+1
  2883  0F5B  0008               	return
  2884  0F5C                     __end_of_ldexp:	
  2885                           
  2886                           	psect	text9
  2887  098A                     __ptext9:	
  2888 ;; *************** function ___ftneg *****************
  2889 ;; Defined at:
  2890 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftneg.c"
  2891 ;; Parameters:    Size  Location     Type
  2892 ;;  f1              3    0[COMMON] float 
  2893 ;; Auto vars:     Size  Location     Type
  2894 ;;		None
  2895 ;; Return value:  Size  Location     Type
  2896 ;;                  3    0[COMMON] float 
  2897 ;; Registers used:
  2898 ;;		wreg
  2899 ;; Tracked objects:
  2900 ;;		On entry : 0/0
  2901 ;;		On exit  : 0/0
  2902 ;;		Unchanged: 0/0
  2903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2904 ;;      Params:         3       0       0       0       0
  2905 ;;      Locals:         0       0       0       0       0
  2906 ;;      Temps:          0       0       0       0       0
  2907 ;;      Totals:         3       0       0       0       0
  2908 ;;Total ram usage:        3 bytes
  2909 ;; Hardware stack levels used:    1
  2910 ;; This function calls:
  2911 ;;		Nothing
  2912 ;; This function is called by:
  2913 ;;		_pow
  2914 ;;		_exp
  2915 ;;		_ldexp
  2916 ;; This function uses a non-reentrant model
  2917 ;;
  2918                           
  2919                           
  2920                           ;psect for function ___ftneg
  2921  098A                     ___ftneg:	
  2922                           
  2923                           ;incstack = 0
  2924                           ; Regs used in ___ftneg: [wreg]
  2925  098A  0872               	movf	___ftneg@f1+2,w
  2926  098B  0471               	iorwf	___ftneg@f1+1,w
  2927  098C  0470               	iorwf	___ftneg@f1,w
  2928  098D  1903               	skipnz
  2929  098E  0008               	return
  2930  098F  3080               	movlw	128
  2931  0990  06F2               	xorwf	___ftneg@f1+2,f
  2932  0991  0008               	return
  2933  0992                     __end_of___ftneg:	
  2934                           
  2935                           	psect	text10
  2936  0E2A                     __ptext10:	
  2937 ;; *************** function _floor *****************
  2938 ;; Defined at:
  2939 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\floor.c"
  2940 ;; Parameters:    Size  Location     Type
  2941 ;;  x               3   38[BANK0 ] float 
  2942 ;; Auto vars:     Size  Location     Type
  2943 ;;  i               3   42[BANK0 ] float 
  2944 ;;  expon           2   45[BANK0 ] int 
  2945 ;; Return value:  Size  Location     Type
  2946 ;;                  3   38[BANK0 ] int 
  2947 ;; Registers used:
  2948 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2949 ;; Tracked objects:
  2950 ;;		On entry : 0/0
  2951 ;;		On exit  : 0/0
  2952 ;;		Unchanged: 0/0
  2953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2954 ;;      Params:         0       3       0       0       0
  2955 ;;      Locals:         0       5       0       0       0
  2956 ;;      Temps:          0       1       0       0       0
  2957 ;;      Totals:         0       9       0       0       0
  2958 ;;Total ram usage:        9 bytes
  2959 ;; Hardware stack levels used:    1
  2960 ;; Hardware stack levels required when called:    2
  2961 ;; This function calls:
  2962 ;;		___altoft
  2963 ;;		___ftadd
  2964 ;;		___ftge
  2965 ;;		___fttol
  2966 ;;		_frexp
  2967 ;; This function is called by:
  2968 ;;		_exp
  2969 ;; This function uses a non-reentrant model
  2970 ;;
  2971                           
  2972                           
  2973                           ;psect for function _floor
  2974  0E2A                     _floor:	
  2975                           
  2976                           ;incstack = 0
  2977                           ; Regs used in _floor: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2978  0E2A  1283               	bcf	3,5	;RP0=0, select bank0
  2979  0E2B  1303               	bcf	3,6	;RP1=0, select bank0
  2980  0E2C  0846               	movf	floor@x,w
  2981  0E2D  00F0               	movwf	frexp@value
  2982  0E2E  0847               	movf	floor@x+1,w
  2983  0E2F  00F1               	movwf	frexp@value+1
  2984  0E30  0848               	movf	floor@x+2,w
  2985  0E31  00F2               	movwf	frexp@value+2
  2986  0E32  304D               	movlw	(low (floor@expon| 0))& (0+255)
  2987  0E33  00C9               	movwf	??_floor
  2988  0E34  0849               	movf	??_floor,w
  2989  0E35  00F3               	movwf	frexp@eptr
  2990  0E36  120A  158A  228D  120A  158A  	fcall	_frexp
  2991  0E3B  1283               	bcf	3,5	;RP0=0, select bank0
  2992  0E3C  1303               	bcf	3,6	;RP1=0, select bank0
  2993  0E3D  1FCE               	btfss	floor@expon+1,7
  2994  0E3E  2E64               	goto	l1850
  2995  0E3F  0846               	movf	floor@x,w
  2996  0E40  00B0               	movwf	___ftge@ff1
  2997  0E41  0847               	movf	floor@x+1,w
  2998  0E42  00B1               	movwf	___ftge@ff1+1
  2999  0E43  0848               	movf	floor@x+2,w
  3000  0E44  00B2               	movwf	___ftge@ff1+2
  3001  0E45  3000               	movlw	0
  3002  0E46  00B3               	movwf	___ftge@ff2
  3003  0E47  3000               	movlw	0
  3004  0E48  00B4               	movwf	___ftge@ff2+1
  3005  0E49  3000               	movlw	0
  3006  0E4A  00B5               	movwf	___ftge@ff2+2
  3007  0E4B  120A  158A  2458  120A  158A  	fcall	___ftge
  3008  0E50  1803               	btfsc	3,0
  3009  0E51  2E5B               	goto	l1846
  3010  0E52  3000               	movlw	0
  3011  0E53  1283               	bcf	3,5	;RP0=0, select bank0
  3012  0E54  1303               	bcf	3,6	;RP1=0, select bank0
  3013  0E55  00C6               	movwf	?_floor
  3014  0E56  3080               	movlw	128
  3015  0E57  00C7               	movwf	?_floor+1
  3016  0E58  30BF               	movlw	191
  3017  0E59  00C8               	movwf	?_floor+2
  3018  0E5A  0008               	return
  3019  0E5B                     l1846:	
  3020  0E5B  3000               	movlw	0
  3021  0E5C  1283               	bcf	3,5	;RP0=0, select bank0
  3022  0E5D  1303               	bcf	3,6	;RP1=0, select bank0
  3023  0E5E  00C6               	movwf	?_floor
  3024  0E5F  3000               	movlw	0
  3025  0E60  00C7               	movwf	?_floor+1
  3026  0E61  3000               	movlw	0
  3027  0E62  00C8               	movwf	?_floor+2
  3028  0E63  0008               	return
  3029  0E64                     l1850:	
  3030  0E64  3000               	movlw	0
  3031  0E65  024E               	subwf	floor@expon+1,w
  3032  0E66  3015               	movlw	21
  3033  0E67  1903               	skipnz
  3034  0E68  024D               	subwf	floor@expon,w
  3035  0E69  1803               	btfsc	3,0
  3036  0E6A  0008               	return
  3037  0E6B  0846               	movf	floor@x,w
  3038  0E6C  00B0               	movwf	___fttol@f1
  3039  0E6D  0847               	movf	floor@x+1,w
  3040  0E6E  00B1               	movwf	___fttol@f1+1
  3041  0E6F  0848               	movf	floor@x+2,w
  3042  0E70  00B2               	movwf	___fttol@f1+2
  3043  0E71  120A  158A  259C  120A  158A  	fcall	___fttol
  3044  0E76  1283               	bcf	3,5	;RP0=0, select bank0
  3045  0E77  1303               	bcf	3,6	;RP1=0, select bank0
  3046  0E78  0833               	movf	?___fttol+3,w
  3047  0E79  00C1               	movwf	___altoft@c+3
  3048  0E7A  0832               	movf	?___fttol+2,w
  3049  0E7B  00C0               	movwf	___altoft@c+2
  3050  0E7C  0831               	movf	?___fttol+1,w
  3051  0E7D  00BF               	movwf	___altoft@c+1
  3052  0E7E  0830               	movf	?___fttol,w
  3053  0E7F  00BE               	movwf	___altoft@c
  3054  0E80  120A  158A  22CD  120A  158A  	fcall	___altoft
  3055  0E85  1283               	bcf	3,5	;RP0=0, select bank0
  3056  0E86  1303               	bcf	3,6	;RP1=0, select bank0
  3057  0E87  083E               	movf	?___altoft,w
  3058  0E88  00CA               	movwf	floor@i
  3059  0E89  083F               	movf	?___altoft+1,w
  3060  0E8A  00CB               	movwf	floor@i+1
  3061  0E8B  0840               	movf	?___altoft+2,w
  3062  0E8C  00CC               	movwf	floor@i+2
  3063  0E8D  0846               	movf	floor@x,w
  3064  0E8E  00B0               	movwf	___ftge@ff1
  3065  0E8F  0847               	movf	floor@x+1,w
  3066  0E90  00B1               	movwf	___ftge@ff1+1
  3067  0E91  0848               	movf	floor@x+2,w
  3068  0E92  00B2               	movwf	___ftge@ff1+2
  3069  0E93  084A               	movf	floor@i,w
  3070  0E94  00B3               	movwf	___ftge@ff2
  3071  0E95  084B               	movf	floor@i+1,w
  3072  0E96  00B4               	movwf	___ftge@ff2+1
  3073  0E97  084C               	movf	floor@i+2,w
  3074  0E98  00B5               	movwf	___ftge@ff2+2
  3075  0E99  120A  158A  2458  120A  158A  	fcall	___ftge
  3076  0E9E  1803               	btfsc	3,0
  3077  0E9F  2EBA               	goto	l1860
  3078  0EA0  3000               	movlw	0
  3079  0EA1  1283               	bcf	3,5	;RP0=0, select bank0
  3080  0EA2  1303               	bcf	3,6	;RP1=0, select bank0
  3081  0EA3  00B0               	movwf	___ftadd@f1
  3082  0EA4  3080               	movlw	128
  3083  0EA5  00B1               	movwf	___ftadd@f1+1
  3084  0EA6  30BF               	movlw	191
  3085  0EA7  00B2               	movwf	___ftadd@f1+2
  3086  0EA8  084A               	movf	floor@i,w
  3087  0EA9  00B3               	movwf	___ftadd@f2
  3088  0EAA  084B               	movf	floor@i+1,w
  3089  0EAB  00B4               	movwf	___ftadd@f2+1
  3090  0EAC  084C               	movf	floor@i+2,w
  3091  0EAD  00B5               	movwf	___ftadd@f2+2
  3092  0EAE  120A  118A  2456   	fcall	___ftadd
  3093  0EB1  1283               	bcf	3,5	;RP0=0, select bank0
  3094  0EB2  1303               	bcf	3,6	;RP1=0, select bank0
  3095  0EB3  0830               	movf	?___ftadd,w
  3096  0EB4  00C6               	movwf	?_floor
  3097  0EB5  0831               	movf	?___ftadd+1,w
  3098  0EB6  00C7               	movwf	?_floor+1
  3099  0EB7  0832               	movf	?___ftadd+2,w
  3100  0EB8  00C8               	movwf	?_floor+2
  3101  0EB9  0008               	return
  3102  0EBA                     l1860:	
  3103  0EBA  1283               	bcf	3,5	;RP0=0, select bank0
  3104  0EBB  1303               	bcf	3,6	;RP1=0, select bank0
  3105  0EBC  084A               	movf	floor@i,w
  3106  0EBD  00C6               	movwf	?_floor
  3107  0EBE  084B               	movf	floor@i+1,w
  3108  0EBF  00C7               	movwf	?_floor+1
  3109  0EC0  084C               	movf	floor@i+2,w
  3110  0EC1  00C8               	movwf	?_floor+2
  3111  0EC2  0008               	return
  3112  0EC3                     __end_of_floor:	
  3113                           
  3114                           	psect	text11
  3115  0A8D                     __ptext11:	
  3116 ;; *************** function _frexp *****************
  3117 ;; Defined at:
  3118 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\frexp.c"
  3119 ;; Parameters:    Size  Location     Type
  3120 ;;  value           3    0[COMMON] int 
  3121 ;;  eptr            1    3[COMMON] PTR int 
  3122 ;;		 -> log@exponent(2), floor@expon(2), 
  3123 ;; Auto vars:     Size  Location     Type
  3124 ;;		None
  3125 ;; Return value:  Size  Location     Type
  3126 ;;                  3    0[COMMON] PTR int 
  3127 ;; Registers used:
  3128 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  3129 ;; Tracked objects:
  3130 ;;		On entry : 0/0
  3131 ;;		On exit  : 0/0
  3132 ;;		Unchanged: 0/0
  3133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3134 ;;      Params:         4       0       0       0       0
  3135 ;;      Locals:         0       0       0       0       0
  3136 ;;      Temps:          2       0       0       0       0
  3137 ;;      Totals:         6       0       0       0       0
  3138 ;;Total ram usage:        6 bytes
  3139 ;; Hardware stack levels used:    1
  3140 ;; This function calls:
  3141 ;;		Nothing
  3142 ;; This function is called by:
  3143 ;;		_floor
  3144 ;;		_log
  3145 ;; This function uses a non-reentrant model
  3146 ;;
  3147                           
  3148                           
  3149                           ;psect for function _frexp
  3150  0A8D                     _frexp:	
  3151                           
  3152                           ;incstack = 0
  3153                           ; Regs used in _frexp: [wreg-fsr0h+status,2+status,0+btemp+1]
  3154  0A8D  0872               	movf	frexp@value+2,w
  3155  0A8E  0471               	iorwf	frexp@value+1,w
  3156  0A8F  0470               	iorwf	frexp@value,w
  3157  0A90  1D03               	skipz
  3158  0A91  2A9F               	goto	l1762
  3159  0A92  0873               	movf	frexp@eptr,w
  3160  0A93  0084               	movwf	4
  3161  0A94  1383               	bcf	3,7	;select IRP bank0
  3162  0A95  0180               	clrf	0
  3163  0A96  0A84               	incf	4,f
  3164  0A97  0180               	clrf	0
  3165  0A98  3000               	movlw	0
  3166  0A99  00F0               	movwf	?_frexp
  3167  0A9A  3000               	movlw	0
  3168  0A9B  00F1               	movwf	?_frexp+1
  3169  0A9C  3000               	movlw	0
  3170  0A9D  00F2               	movwf	?_frexp+2
  3171  0A9E  0008               	return
  3172  0A9F                     l1762:	
  3173  0A9F  0872               	movf	frexp@value+2,w
  3174  0AA0  397F               	andlw	127
  3175  0AA1  00F4               	movwf	??_frexp
  3176  0AA2  01F5               	clrf	??_frexp+1
  3177  0AA3  1003               	clrc
  3178  0AA4  0DF4               	rlf	??_frexp,f
  3179  0AA5  0DF5               	rlf	??_frexp+1,f
  3180  0AA6  0873               	movf	frexp@eptr,w
  3181  0AA7  0084               	movwf	4
  3182  0AA8  0874               	movf	??_frexp,w
  3183  0AA9  1383               	bcf	3,7	;select IRP bank0
  3184  0AAA  0080               	movwf	0
  3185  0AAB  0A84               	incf	4,f
  3186  0AAC  0875               	movf	??_frexp+1,w
  3187  0AAD  0080               	movwf	0
  3188  0AAE  0D71               	rlf	frexp@value+1,w
  3189  0AAF  0D71               	rlf	frexp@value+1,w
  3190  0AB0  3901               	andlw	1
  3191  0AB1  00F4               	movwf	??_frexp
  3192  0AB2  01F5               	clrf	??_frexp+1
  3193  0AB3  0873               	movf	frexp@eptr,w
  3194  0AB4  0084               	movwf	4
  3195  0AB5  0874               	movf	??_frexp,w
  3196  0AB6  0480               	iorwf	0,f
  3197  0AB7  0A84               	incf	4,f
  3198  0AB8  0875               	movf	??_frexp+1,w
  3199  0AB9  0480               	iorwf	0,f
  3200  0ABA  0873               	movf	frexp@eptr,w
  3201  0ABB  0084               	movwf	4
  3202  0ABC  3082               	movlw	130
  3203  0ABD  0780               	addwf	0,f
  3204  0ABE  0F84               	incfsz	4,f
  3205  0ABF  0800               	movf	0,w
  3206  0AC0  1803               	skipnc
  3207  0AC1  0A00               	incf	0,w
  3208  0AC2  00FF               	movwf	127
  3209  0AC3  30FF               	movlw	255
  3210  0AC4  077F               	addwf	127,w
  3211  0AC5  0080               	movwf	0
  3212  0AC6  0384               	decf	4,f
  3213  0AC7  0872               	movf	frexp@value+2,w
  3214  0AC8  3980               	andlw	-128
  3215  0AC9  383F               	iorlw	63
  3216  0ACA  00F2               	movwf	frexp@value+2
  3217  0ACB  13F1               	bcf	frexp@value+1,7
  3218  0ACC  0008               	return
  3219  0ACD                     __end_of_frexp:	
  3220                           
  3221                           	psect	text12
  3222  0D9C                     __ptext12:	
  3223 ;; *************** function ___fttol *****************
  3224 ;; Defined at:
  3225 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fttol.c"
  3226 ;; Parameters:    Size  Location     Type
  3227 ;;  f1              3   16[BANK0 ] float 
  3228 ;; Auto vars:     Size  Location     Type
  3229 ;;  lval            4   25[BANK0 ] unsigned long 
  3230 ;;  exp1            1   29[BANK0 ] unsigned char 
  3231 ;;  sign1           1   24[BANK0 ] unsigned char 
  3232 ;; Return value:  Size  Location     Type
  3233 ;;                  4   16[BANK0 ] long 
  3234 ;; Registers used:
  3235 ;;		wreg, status,2, status,0
  3236 ;; Tracked objects:
  3237 ;;		On entry : 0/0
  3238 ;;		On exit  : 0/0
  3239 ;;		Unchanged: 0/0
  3240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3241 ;;      Params:         0       4       0       0       0
  3242 ;;      Locals:         0       6       0       0       0
  3243 ;;      Temps:          0       4       0       0       0
  3244 ;;      Totals:         0      14       0       0       0
  3245 ;;Total ram usage:       14 bytes
  3246 ;; Hardware stack levels used:    1
  3247 ;; This function calls:
  3248 ;;		Nothing
  3249 ;; This function is called by:
  3250 ;;		_analogRead
  3251 ;;		_pow
  3252 ;;		_exp
  3253 ;;		_floor
  3254 ;; This function uses a non-reentrant model
  3255 ;;
  3256                           
  3257                           
  3258                           ;psect for function ___fttol
  3259  0D9C                     ___fttol:	
  3260                           
  3261                           ;incstack = 0
  3262                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  3263  0D9C  1283               	bcf	3,5	;RP0=0, select bank0
  3264  0D9D  1303               	bcf	3,6	;RP1=0, select bank0
  3265  0D9E  0830               	movf	___fttol@f1,w
  3266  0D9F  00B4               	movwf	??___fttol
  3267  0DA0  0831               	movf	___fttol@f1+1,w
  3268  0DA1  00B5               	movwf	??___fttol+1
  3269  0DA2  0832               	movf	___fttol@f1+2,w
  3270  0DA3  00B6               	movwf	??___fttol+2
  3271  0DA4  1003               	clrc
  3272  0DA5  0D35               	rlf	??___fttol+1,w
  3273  0DA6  0D36               	rlf	??___fttol+2,w
  3274  0DA7  00B7               	movwf	??___fttol+3
  3275  0DA8  0837               	movf	??___fttol+3,w
  3276  0DA9  00BD               	movwf	___fttol@exp1
  3277  0DAA  083D               	movf	___fttol@exp1,w
  3278  0DAB  1D03               	btfss	3,2
  3279  0DAC  2DB6               	goto	l1718
  3280  0DAD  3000               	movlw	0
  3281  0DAE  00B3               	movwf	?___fttol+3
  3282  0DAF  3000               	movlw	0
  3283  0DB0  00B2               	movwf	?___fttol+2
  3284  0DB1  3000               	movlw	0
  3285  0DB2  00B1               	movwf	?___fttol+1
  3286  0DB3  3000               	movlw	0
  3287  0DB4  00B0               	movwf	?___fttol
  3288  0DB5  0008               	return
  3289  0DB6                     l1718:	
  3290  0DB6  0830               	movf	___fttol@f1,w
  3291  0DB7  00B4               	movwf	??___fttol
  3292  0DB8  0831               	movf	___fttol@f1+1,w
  3293  0DB9  00B5               	movwf	??___fttol+1
  3294  0DBA  0832               	movf	___fttol@f1+2,w
  3295  0DBB  00B6               	movwf	??___fttol+2
  3296  0DBC  3017               	movlw	23
  3297  0DBD                     u2045:	
  3298  0DBD  1003               	clrc
  3299  0DBE  0CB6               	rrf	??___fttol+2,f
  3300  0DBF  0CB5               	rrf	??___fttol+1,f
  3301  0DC0  0CB4               	rrf	??___fttol,f
  3302  0DC1  3EFF               	addlw	-1
  3303  0DC2  1D03               	skipz
  3304  0DC3  2DBD               	goto	u2045
  3305  0DC4  0834               	movf	??___fttol,w
  3306  0DC5  00B7               	movwf	??___fttol+3
  3307  0DC6  0837               	movf	??___fttol+3,w
  3308  0DC7  00B8               	movwf	___fttol@sign1
  3309  0DC8  17B1               	bsf	___fttol@f1+1,7
  3310  0DC9  30FF               	movlw	255
  3311  0DCA  05B0               	andwf	___fttol@f1,f
  3312  0DCB  30FF               	movlw	255
  3313  0DCC  05B1               	andwf	___fttol@f1+1,f
  3314  0DCD  3000               	movlw	0
  3315  0DCE  05B2               	andwf	___fttol@f1+2,f
  3316  0DCF  0830               	movf	___fttol@f1,w
  3317  0DD0  00B9               	movwf	___fttol@lval
  3318  0DD1  0831               	movf	___fttol@f1+1,w
  3319  0DD2  00BA               	movwf	___fttol@lval+1
  3320  0DD3  0832               	movf	___fttol@f1+2,w
  3321  0DD4  00BB               	movwf	___fttol@lval+2
  3322  0DD5  01BC               	clrf	___fttol@lval+3
  3323  0DD6  308E               	movlw	142
  3324  0DD7  02BD               	subwf	___fttol@exp1,f
  3325  0DD8  1FBD               	btfss	___fttol@exp1,7
  3326  0DD9  2DF8               	goto	l1738
  3327  0DDA  083D               	movf	___fttol@exp1,w
  3328  0DDB  3A80               	xorlw	128
  3329  0DDC  3E8F               	addlw	143
  3330  0DDD  1803               	skipnc
  3331  0DDE  2DE8               	goto	l1736
  3332  0DDF  3000               	movlw	0
  3333  0DE0  00B3               	movwf	?___fttol+3
  3334  0DE1  3000               	movlw	0
  3335  0DE2  00B2               	movwf	?___fttol+2
  3336  0DE3  3000               	movlw	0
  3337  0DE4  00B1               	movwf	?___fttol+1
  3338  0DE5  3000               	movlw	0
  3339  0DE6  00B0               	movwf	?___fttol
  3340  0DE7  0008               	return
  3341  0DE8                     l1736:	
  3342  0DE8  3001               	movlw	1
  3343  0DE9                     u2075:	
  3344  0DE9  1003               	clrc
  3345  0DEA  0CBC               	rrf	___fttol@lval+3,f
  3346  0DEB  0CBB               	rrf	___fttol@lval+2,f
  3347  0DEC  0CBA               	rrf	___fttol@lval+1,f
  3348  0DED  0CB9               	rrf	___fttol@lval,f
  3349  0DEE  3EFF               	addlw	-1
  3350  0DEF  1D03               	skipz
  3351  0DF0  2DE9               	goto	u2075
  3352  0DF1  3001               	movlw	1
  3353  0DF2  00B4               	movwf	??___fttol
  3354  0DF3  0834               	movf	??___fttol,w
  3355  0DF4  07BD               	addwf	___fttol@exp1,f
  3356  0DF5  1903               	btfsc	3,2
  3357  0DF6  2E13               	goto	l1746
  3358  0DF7  2DE8               	goto	l1736
  3359  0DF8                     l1738:	
  3360  0DF8  3018               	movlw	24
  3361  0DF9  023D               	subwf	___fttol@exp1,w
  3362  0DFA  1C03               	skipc
  3363  0DFB  2E10               	goto	l441
  3364  0DFC  3000               	movlw	0
  3365  0DFD  00B3               	movwf	?___fttol+3
  3366  0DFE  3000               	movlw	0
  3367  0DFF  00B2               	movwf	?___fttol+2
  3368  0E00  3000               	movlw	0
  3369  0E01  00B1               	movwf	?___fttol+1
  3370  0E02  3000               	movlw	0
  3371  0E03  00B0               	movwf	?___fttol
  3372  0E04  0008               	return
  3373  0E05                     l1744:	
  3374  0E05  3001               	movlw	1
  3375  0E06  00B4               	movwf	??___fttol
  3376  0E07                     u2105:	
  3377  0E07  1003               	clrc
  3378  0E08  0DB9               	rlf	___fttol@lval,f
  3379  0E09  0DBA               	rlf	___fttol@lval+1,f
  3380  0E0A  0DBB               	rlf	___fttol@lval+2,f
  3381  0E0B  0DBC               	rlf	___fttol@lval+3,f
  3382  0E0C  0BB4               	decfsz	??___fttol,f
  3383  0E0D  2E07               	goto	u2105
  3384  0E0E  3001               	movlw	1
  3385  0E0F  02BD               	subwf	___fttol@exp1,f
  3386  0E10                     l441:	
  3387  0E10  083D               	movf	___fttol@exp1,w
  3388  0E11  1D03               	btfss	3,2
  3389  0E12  2E05               	goto	l1744
  3390  0E13                     l1746:	
  3391  0E13  0838               	movf	___fttol@sign1,w
  3392  0E14  1903               	btfsc	3,2
  3393  0E15  2E21               	goto	l1750
  3394  0E16  09B9               	comf	___fttol@lval,f
  3395  0E17  09BA               	comf	___fttol@lval+1,f
  3396  0E18  09BB               	comf	___fttol@lval+2,f
  3397  0E19  09BC               	comf	___fttol@lval+3,f
  3398  0E1A  0AB9               	incf	___fttol@lval,f
  3399  0E1B  1903               	skipnz
  3400  0E1C  0ABA               	incf	___fttol@lval+1,f
  3401  0E1D  1903               	skipnz
  3402  0E1E  0ABB               	incf	___fttol@lval+2,f
  3403  0E1F  1903               	skipnz
  3404  0E20  0ABC               	incf	___fttol@lval+3,f
  3405  0E21                     l1750:	
  3406  0E21  083C               	movf	___fttol@lval+3,w
  3407  0E22  00B3               	movwf	?___fttol+3
  3408  0E23  083B               	movf	___fttol@lval+2,w
  3409  0E24  00B2               	movwf	?___fttol+2
  3410  0E25  083A               	movf	___fttol@lval+1,w
  3411  0E26  00B1               	movwf	?___fttol+1
  3412  0E27  0839               	movf	___fttol@lval,w
  3413  0E28  00B0               	movwf	?___fttol
  3414  0E29  0008               	return
  3415  0E2A                     __end_of___fttol:	
  3416                           
  3417                           	psect	text13
  3418  0C58                     __ptext13:	
  3419 ;; *************** function ___ftge *****************
  3420 ;; Defined at:
  3421 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftge.c"
  3422 ;; Parameters:    Size  Location     Type
  3423 ;;  ff1             3   16[BANK0 ] float 
  3424 ;;  ff2             3   19[BANK0 ] float 
  3425 ;; Auto vars:     Size  Location     Type
  3426 ;;		None
  3427 ;; Return value:  Size  Location     Type
  3428 ;;		None               void
  3429 ;; Registers used:
  3430 ;;		wreg, status,2, status,0
  3431 ;; Tracked objects:
  3432 ;;		On entry : 0/0
  3433 ;;		On exit  : 0/0
  3434 ;;		Unchanged: 0/0
  3435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3436 ;;      Params:         0       6       0       0       0
  3437 ;;      Locals:         0       0       0       0       0
  3438 ;;      Temps:          0       6       0       0       0
  3439 ;;      Totals:         0      12       0       0       0
  3440 ;;Total ram usage:       12 bytes
  3441 ;; Hardware stack levels used:    1
  3442 ;; This function calls:
  3443 ;;		Nothing
  3444 ;; This function is called by:
  3445 ;;		_Process
  3446 ;;		_pow
  3447 ;;		_exp
  3448 ;;		_floor
  3449 ;;		_ldexp
  3450 ;;		_log
  3451 ;; This function uses a non-reentrant model
  3452 ;;
  3453                           
  3454                           
  3455                           ;psect for function ___ftge
  3456  0C58                     ___ftge:	
  3457                           
  3458                           ;incstack = 0
  3459                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  3460  0C58  1283               	bcf	3,5	;RP0=0, select bank0
  3461  0C59  1303               	bcf	3,6	;RP1=0, select bank0
  3462  0C5A  1FB2               	btfss	___ftge@ff1+2,7
  3463  0C5B  2C81               	goto	l1638
  3464  0C5C  3000               	movlw	0
  3465  0C5D  00B6               	movwf	??___ftge
  3466  0C5E  3000               	movlw	0
  3467  0C5F  00B7               	movwf	??___ftge+1
  3468  0C60  3080               	movlw	128
  3469  0C61  00B8               	movwf	??___ftge+2
  3470  0C62  0930               	comf	___ftge@ff1,w
  3471  0C63  00B9               	movwf	??___ftge+3
  3472  0C64  0931               	comf	___ftge@ff1+1,w
  3473  0C65  00BA               	movwf	??___ftge+4
  3474  0C66  0932               	comf	___ftge@ff1+2,w
  3475  0C67  00BB               	movwf	??___ftge+5
  3476  0C68  0AB9               	incf	??___ftge+3,f
  3477  0C69  1903               	skipnz
  3478  0C6A  0ABA               	incf	??___ftge+4,f
  3479  0C6B  1903               	skipnz
  3480  0C6C  0ABB               	incf	??___ftge+5,f
  3481  0C6D  0839               	movf	??___ftge+3,w
  3482  0C6E  07B6               	addwf	??___ftge,f
  3483  0C6F  083A               	movf	??___ftge+4,w
  3484  0C70  1803               	skipnc
  3485  0C71  0F3A               	incfsz	??___ftge+4,w
  3486  0C72  2C74               	goto	u1841
  3487  0C73  2C75               	goto	u1842
  3488  0C74                     u1841:	
  3489  0C74  07B7               	addwf	??___ftge+1,f
  3490  0C75                     u1842:	
  3491  0C75  083B               	movf	??___ftge+5,w
  3492  0C76  1803               	skipnc
  3493  0C77  0F3B               	incfsz	??___ftge+5,w
  3494  0C78  2C7A               	goto	u1843
  3495  0C79  2C7B               	goto	u1844
  3496  0C7A                     u1843:	
  3497  0C7A  07B8               	addwf	??___ftge+2,f
  3498  0C7B                     u1844:	
  3499  0C7B  0836               	movf	??___ftge,w
  3500  0C7C  00B0               	movwf	___ftge@ff1
  3501  0C7D  0837               	movf	??___ftge+1,w
  3502  0C7E  00B1               	movwf	___ftge@ff1+1
  3503  0C7F  0838               	movf	??___ftge+2,w
  3504  0C80  00B2               	movwf	___ftge@ff1+2
  3505  0C81                     l1638:	
  3506  0C81  1FB5               	btfss	___ftge@ff2+2,7
  3507  0C82  2CA8               	goto	l1642
  3508  0C83  3000               	movlw	0
  3509  0C84  00B6               	movwf	??___ftge
  3510  0C85  3000               	movlw	0
  3511  0C86  00B7               	movwf	??___ftge+1
  3512  0C87  3080               	movlw	128
  3513  0C88  00B8               	movwf	??___ftge+2
  3514  0C89  0933               	comf	___ftge@ff2,w
  3515  0C8A  00B9               	movwf	??___ftge+3
  3516  0C8B  0934               	comf	___ftge@ff2+1,w
  3517  0C8C  00BA               	movwf	??___ftge+4
  3518  0C8D  0935               	comf	___ftge@ff2+2,w
  3519  0C8E  00BB               	movwf	??___ftge+5
  3520  0C8F  0AB9               	incf	??___ftge+3,f
  3521  0C90  1903               	skipnz
  3522  0C91  0ABA               	incf	??___ftge+4,f
  3523  0C92  1903               	skipnz
  3524  0C93  0ABB               	incf	??___ftge+5,f
  3525  0C94  0839               	movf	??___ftge+3,w
  3526  0C95  07B6               	addwf	??___ftge,f
  3527  0C96  083A               	movf	??___ftge+4,w
  3528  0C97  1803               	skipnc
  3529  0C98  0F3A               	incfsz	??___ftge+4,w
  3530  0C99  2C9B               	goto	u1861
  3531  0C9A  2C9C               	goto	u1862
  3532  0C9B                     u1861:	
  3533  0C9B  07B7               	addwf	??___ftge+1,f
  3534  0C9C                     u1862:	
  3535  0C9C  083B               	movf	??___ftge+5,w
  3536  0C9D  1803               	skipnc
  3537  0C9E  0F3B               	incfsz	??___ftge+5,w
  3538  0C9F  2CA1               	goto	u1863
  3539  0CA0  2CA2               	goto	u1864
  3540  0CA1                     u1863:	
  3541  0CA1  07B8               	addwf	??___ftge+2,f
  3542  0CA2                     u1864:	
  3543  0CA2  0836               	movf	??___ftge,w
  3544  0CA3  00B3               	movwf	___ftge@ff2
  3545  0CA4  0837               	movf	??___ftge+1,w
  3546  0CA5  00B4               	movwf	___ftge@ff2+1
  3547  0CA6  0838               	movf	??___ftge+2,w
  3548  0CA7  00B5               	movwf	___ftge@ff2+2
  3549  0CA8                     l1642:	
  3550  0CA8  3080               	movlw	128
  3551  0CA9  06B2               	xorwf	___ftge@ff1+2,f
  3552  0CAA  3080               	movlw	128
  3553  0CAB  06B5               	xorwf	___ftge@ff2+2,f
  3554  0CAC  0835               	movf	___ftge@ff2+2,w
  3555  0CAD  0232               	subwf	___ftge@ff1+2,w
  3556  0CAE  1D03               	skipz
  3557  0CAF  0008               	return
  3558  0CB0  0834               	movf	___ftge@ff2+1,w
  3559  0CB1  0231               	subwf	___ftge@ff1+1,w
  3560  0CB2  1D03               	skipz
  3561  0CB3  0008               	return
  3562  0CB4  0833               	movf	___ftge@ff2,w
  3563  0CB5  0230               	subwf	___ftge@ff1,w
  3564  0CB6  0008               	return
  3565  0CB7                     __end_of___ftge:	
  3566                           
  3567                           	psect	text14
  3568  0ACD                     __ptext14:	
  3569 ;; *************** function ___altoft *****************
  3570 ;; Defined at:
  3571 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\altoft.c"
  3572 ;; Parameters:    Size  Location     Type
  3573 ;;  c               4   30[BANK0 ] long 
  3574 ;; Auto vars:     Size  Location     Type
  3575 ;;  sign            1   37[BANK0 ] unsigned char 
  3576 ;;  exp             1   36[BANK0 ] unsigned char 
  3577 ;; Return value:  Size  Location     Type
  3578 ;;                  3   30[BANK0 ] float 
  3579 ;; Registers used:
  3580 ;;		wreg, status,2, status,0, pclath, cstack
  3581 ;; Tracked objects:
  3582 ;;		On entry : 0/0
  3583 ;;		On exit  : 0/0
  3584 ;;		Unchanged: 0/0
  3585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3586 ;;      Params:         0       4       0       0       0
  3587 ;;      Locals:         0       2       0       0       0
  3588 ;;      Temps:          0       2       0       0       0
  3589 ;;      Totals:         0       8       0       0       0
  3590 ;;Total ram usage:        8 bytes
  3591 ;; Hardware stack levels used:    1
  3592 ;; Hardware stack levels required when called:    1
  3593 ;; This function calls:
  3594 ;;		___ftpack
  3595 ;; This function is called by:
  3596 ;;		_floor
  3597 ;; This function uses a non-reentrant model
  3598 ;;
  3599                           
  3600                           
  3601                           ;psect for function ___altoft
  3602  0ACD                     ___altoft:	
  3603                           
  3604                           ;incstack = 0
  3605                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
  3606  0ACD  1283               	bcf	3,5	;RP0=0, select bank0
  3607  0ACE  1303               	bcf	3,6	;RP1=0, select bank0
  3608  0ACF  01C5               	clrf	___altoft@sign
  3609  0AD0  308E               	movlw	142
  3610  0AD1  00C2               	movwf	??___altoft
  3611  0AD2  0842               	movf	??___altoft,w
  3612  0AD3  00C4               	movwf	___altoft@exp
  3613  0AD4  1FC1               	btfss	___altoft@c+3,7
  3614  0AD5  2AE3               	goto	l1558
  3615  0AD6  09BE               	comf	___altoft@c,f
  3616  0AD7  09BF               	comf	___altoft@c+1,f
  3617  0AD8  09C0               	comf	___altoft@c+2,f
  3618  0AD9  09C1               	comf	___altoft@c+3,f
  3619  0ADA  0ABE               	incf	___altoft@c,f
  3620  0ADB  1903               	skipnz
  3621  0ADC  0ABF               	incf	___altoft@c+1,f
  3622  0ADD  1903               	skipnz
  3623  0ADE  0AC0               	incf	___altoft@c+2,f
  3624  0ADF  1903               	skipnz
  3625  0AE0  0AC1               	incf	___altoft@c+3,f
  3626  0AE1  01C5               	clrf	___altoft@sign
  3627  0AE2  0AC5               	incf	___altoft@sign,f
  3628  0AE3                     l1558:	
  3629  0AE3  30FF               	movlw	255
  3630  0AE4  0541               	andwf	___altoft@c+3,w
  3631  0AE5  1903               	btfsc	3,2
  3632  0AE6  2AF5               	goto	l1560
  3633  0AE7  3001               	movlw	1
  3634  0AE8                     u1575:	
  3635  0AE8  1003               	clrc
  3636  0AE9  0CC1               	rrf	___altoft@c+3,f
  3637  0AEA  0CC0               	rrf	___altoft@c+2,f
  3638  0AEB  0CBF               	rrf	___altoft@c+1,f
  3639  0AEC  0CBE               	rrf	___altoft@c,f
  3640  0AED  3EFF               	addlw	-1
  3641  0AEE  1D03               	skipz
  3642  0AEF  2AE8               	goto	u1575
  3643  0AF0  3001               	movlw	1
  3644  0AF1  00C2               	movwf	??___altoft
  3645  0AF2  0842               	movf	??___altoft,w
  3646  0AF3  07C4               	addwf	___altoft@exp,f
  3647  0AF4  2AE3               	goto	l1558
  3648  0AF5                     l1560:	
  3649  0AF5  083E               	movf	___altoft@c,w
  3650  0AF6  00F0               	movwf	___ftpack@arg
  3651  0AF7  083F               	movf	___altoft@c+1,w
  3652  0AF8  00F1               	movwf	___ftpack@arg+1
  3653  0AF9  0840               	movf	___altoft@c+2,w
  3654  0AFA  00F2               	movwf	___ftpack@arg+2
  3655  0AFB  0844               	movf	___altoft@exp,w
  3656  0AFC  00C2               	movwf	??___altoft
  3657  0AFD  0842               	movf	??___altoft,w
  3658  0AFE  00F3               	movwf	___ftpack@exp
  3659  0AFF  0845               	movf	___altoft@sign,w
  3660  0B00  00C3               	movwf	??___altoft+1
  3661  0B01  0843               	movf	??___altoft+1,w
  3662  0B02  00F4               	movwf	___ftpack@sign
  3663  0B03  120A  158A  24B7   	fcall	___ftpack
  3664  0B06  0870               	movf	?___ftpack,w
  3665  0B07  1283               	bcf	3,5	;RP0=0, select bank0
  3666  0B08  1303               	bcf	3,6	;RP1=0, select bank0
  3667  0B09  00BE               	movwf	?___altoft
  3668  0B0A  0871               	movf	?___ftpack+1,w
  3669  0B0B  00BF               	movwf	?___altoft+1
  3670  0B0C  0872               	movf	?___ftpack+2,w
  3671  0B0D  00C0               	movwf	?___altoft+2
  3672  0B0E  0008               	return
  3673  0B0F                     __end_of___altoft:	
  3674                           
  3675                           	psect	text15
  3676  0D23                     __ptext15:	
  3677 ;; *************** function _eval_poly *****************
  3678 ;; Defined at:
  3679 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\evalpoly.c"
  3680 ;; Parameters:    Size  Location     Type
  3681 ;;  x               3   29[BANK0 ] float 
  3682 ;;  d               1   32[BANK0 ] PTR const 
  3683 ;;		 -> log@coeff(27), exp@coeff(30), 
  3684 ;;  n               2   33[BANK0 ] int 
  3685 ;; Auto vars:     Size  Location     Type
  3686 ;;  res             3   36[BANK0 ] int 
  3687 ;; Return value:  Size  Location     Type
  3688 ;;                  3   29[BANK0 ] int 
  3689 ;; Registers used:
  3690 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3691 ;; Tracked objects:
  3692 ;;		On entry : 0/0
  3693 ;;		On exit  : 0/0
  3694 ;;		Unchanged: 0/0
  3695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3696 ;;      Params:         0       6       0       0       0
  3697 ;;      Locals:         0       3       0       0       0
  3698 ;;      Temps:          0       1       0       0       0
  3699 ;;      Totals:         0      10       0       0       0
  3700 ;;Total ram usage:       10 bytes
  3701 ;; Hardware stack levels used:    1
  3702 ;; Hardware stack levels required when called:    2
  3703 ;; This function calls:
  3704 ;;		___bmul
  3705 ;;		___ftadd
  3706 ;;		___ftmul
  3707 ;; This function is called by:
  3708 ;;		_exp
  3709 ;;		_log
  3710 ;; This function uses a non-reentrant model
  3711 ;;
  3712                           
  3713                           
  3714                           ;psect for function _eval_poly
  3715  0D23                     _eval_poly:	
  3716                           
  3717                           ;incstack = 0
  3718                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3719  0D23  3003               	movlw	3
  3720  0D24  1283               	bcf	3,5	;RP0=0, select bank0
  3721  0D25  1303               	bcf	3,6	;RP1=0, select bank0
  3722  0D26  00C3               	movwf	??_eval_poly
  3723  0D27  0843               	movf	??_eval_poly,w
  3724  0D28  00F0               	movwf	___bmul@multiplicand
  3725  0D29  0841               	movf	eval_poly@n,w
  3726  0D2A  120A  158A  219D  120A  158A  	fcall	___bmul
  3727  0D2F  1283               	bcf	3,5	;RP0=0, select bank0
  3728  0D30  1303               	bcf	3,6	;RP1=0, select bank0
  3729  0D31  0740               	addwf	eval_poly@d,w
  3730  0D32  0084               	movwf	4
  3731  0D33  120A  158A  2000  120A  158A  	fcall	stringdir
  3732  0D38  00C4               	movwf	eval_poly@res
  3733  0D39  120A  158A  2000  120A  158A  	fcall	stringdir
  3734  0D3E  00C5               	movwf	eval_poly@res+1
  3735  0D3F  120A  158A  2000  120A  158A  	fcall	stringdir
  3736  0D44                     L4:	
  3737  0D44  00C6               	movwf	eval_poly@res+2
  3738  0D45  0841               	movf	eval_poly@n,w
  3739  0D46  0442               	iorwf	eval_poly@n+1,w
  3740  0D47  1903               	btfsc	3,2
  3741  0D48  2D95               	goto	l1870
  3742  0D49  3003               	movlw	3
  3743  0D4A  00C3               	movwf	??_eval_poly
  3744  0D4B  0843               	movf	??_eval_poly,w
  3745  0D4C  00F0               	movwf	___bmul@multiplicand
  3746  0D4D  30FF               	movlw	255
  3747  0D4E  07C1               	addwf	eval_poly@n,f
  3748  0D4F  1803               	skipnc
  3749  0D50  0AC2               	incf	eval_poly@n+1,f
  3750  0D51  30FF               	movlw	255
  3751  0D52  07C2               	addwf	eval_poly@n+1,f
  3752  0D53  0841               	movf	eval_poly@n,w
  3753  0D54  120A  158A  219D  120A  158A  	fcall	___bmul
  3754  0D59  1283               	bcf	3,5	;RP0=0, select bank0
  3755  0D5A  1303               	bcf	3,6	;RP1=0, select bank0
  3756  0D5B  0740               	addwf	eval_poly@d,w
  3757  0D5C  0084               	movwf	4
  3758  0D5D  120A  158A  2000  120A  158A  	fcall	stringdir
  3759  0D62  00B0               	movwf	___ftadd@f1
  3760  0D63  120A  158A  2000  120A  158A  	fcall	stringdir
  3761  0D68  00B1               	movwf	___ftadd@f1+1
  3762  0D69  120A  158A  2000  120A  158A  	fcall	stringdir
  3763  0D6E  00B2               	movwf	___ftadd@f1+2
  3764  0D6F  0844               	movf	eval_poly@res,w
  3765  0D70  00A0               	movwf	___ftmul@f1
  3766  0D71  0845               	movf	eval_poly@res+1,w
  3767  0D72  00A1               	movwf	___ftmul@f1+1
  3768  0D73  0846               	movf	eval_poly@res+2,w
  3769  0D74  00A2               	movwf	___ftmul@f1+2
  3770  0D75  083D               	movf	eval_poly@x,w
  3771  0D76  00A3               	movwf	___ftmul@f2
  3772  0D77  083E               	movf	eval_poly@x+1,w
  3773  0D78  00A4               	movwf	___ftmul@f2+1
  3774  0D79  083F               	movf	eval_poly@x+2,w
  3775  0D7A  00A5               	movwf	___ftmul@f2+2
  3776  0D7B  120A  118A  228B  120A  158A  	fcall	___ftmul
  3777  0D80  1283               	bcf	3,5	;RP0=0, select bank0
  3778  0D81  1303               	bcf	3,6	;RP1=0, select bank0
  3779  0D82  0820               	movf	?___ftmul,w
  3780  0D83  00B3               	movwf	___ftadd@f2
  3781  0D84  0821               	movf	?___ftmul+1,w
  3782  0D85  00B4               	movwf	___ftadd@f2+1
  3783  0D86  0822               	movf	?___ftmul+2,w
  3784  0D87  00B5               	movwf	___ftadd@f2+2
  3785  0D88  120A  118A  2456  120A  158A  	fcall	___ftadd
  3786  0D8D  1283               	bcf	3,5	;RP0=0, select bank0
  3787  0D8E  1303               	bcf	3,6	;RP1=0, select bank0
  3788  0D8F  0830               	movf	?___ftadd,w
  3789  0D90  00C4               	movwf	eval_poly@res
  3790  0D91  0831               	movf	?___ftadd+1,w
  3791  0D92  00C5               	movwf	eval_poly@res+1
  3792  0D93  0832               	movf	?___ftadd+2,w
  3793  0D94  2D44               	goto	L4
  3794  0D95                     l1870:	
  3795  0D95  0844               	movf	eval_poly@res,w
  3796  0D96  00BD               	movwf	?_eval_poly
  3797  0D97  0845               	movf	eval_poly@res+1,w
  3798  0D98  00BE               	movwf	?_eval_poly+1
  3799  0D99  0846               	movf	eval_poly@res+2,w
  3800  0D9A  00BF               	movwf	?_eval_poly+2
  3801  0D9B  0008               	return
  3802  0D9C                     __end_of_eval_poly:	
  3803                           
  3804                           	psect	text16
  3805  028B                     __ptext16:	
  3806 ;; *************** function ___ftmul *****************
  3807 ;; Defined at:
  3808 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftmul.c"
  3809 ;; Parameters:    Size  Location     Type
  3810 ;;  f1              3    0[BANK0 ] float 
  3811 ;;  f2              3    3[BANK0 ] float 
  3812 ;; Auto vars:     Size  Location     Type
  3813 ;;  f3_as_produc    3   11[BANK0 ] unsigned um
  3814 ;;  sign            1   15[BANK0 ] unsigned char 
  3815 ;;  cntr            1   14[BANK0 ] unsigned char 
  3816 ;;  exp             1   10[BANK0 ] unsigned char 
  3817 ;; Return value:  Size  Location     Type
  3818 ;;                  3    0[BANK0 ] float 
  3819 ;; Registers used:
  3820 ;;		wreg, status,2, status,0, pclath, cstack
  3821 ;; Tracked objects:
  3822 ;;		On entry : 0/0
  3823 ;;		On exit  : 0/0
  3824 ;;		Unchanged: 0/0
  3825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3826 ;;      Params:         0       6       0       0       0
  3827 ;;      Locals:         0       6       0       0       0
  3828 ;;      Temps:          0       4       0       0       0
  3829 ;;      Totals:         0      16       0       0       0
  3830 ;;Total ram usage:       16 bytes
  3831 ;; Hardware stack levels used:    1
  3832 ;; Hardware stack levels required when called:    1
  3833 ;; This function calls:
  3834 ;;		___ftpack
  3835 ;; This function is called by:
  3836 ;;		_analogRead
  3837 ;;		_Process
  3838 ;;		_pow
  3839 ;;		_exp
  3840 ;;		_log
  3841 ;;		_eval_poly
  3842 ;; This function uses a non-reentrant model
  3843 ;;
  3844                           
  3845                           
  3846                           ;psect for function ___ftmul
  3847  028B                     ___ftmul:	
  3848                           
  3849                           ;incstack = 0
  3850                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  3851  028B  1283               	bcf	3,5	;RP0=0, select bank0
  3852  028C  1303               	bcf	3,6	;RP1=0, select bank0
  3853  028D  0820               	movf	___ftmul@f1,w
  3854  028E  00A6               	movwf	??___ftmul
  3855  028F  0821               	movf	___ftmul@f1+1,w
  3856  0290  00A7               	movwf	??___ftmul+1
  3857  0291  0822               	movf	___ftmul@f1+2,w
  3858  0292  00A8               	movwf	??___ftmul+2
  3859  0293  1003               	clrc
  3860  0294  0D27               	rlf	??___ftmul+1,w
  3861  0295  0D28               	rlf	??___ftmul+2,w
  3862  0296  00A9               	movwf	??___ftmul+3
  3863  0297  0829               	movf	??___ftmul+3,w
  3864  0298  00AA               	movwf	___ftmul@exp
  3865  0299  082A               	movf	___ftmul@exp,w
  3866  029A  1D03               	btfss	3,2
  3867  029B  2AA3               	goto	l1660
  3868  029C  3000               	movlw	0
  3869  029D  00A0               	movwf	?___ftmul
  3870  029E  3000               	movlw	0
  3871  029F  00A1               	movwf	?___ftmul+1
  3872  02A0  3000               	movlw	0
  3873  02A1  00A2               	movwf	?___ftmul+2
  3874  02A2  0008               	return
  3875  02A3                     l1660:	
  3876  02A3  0823               	movf	___ftmul@f2,w
  3877  02A4  00A6               	movwf	??___ftmul
  3878  02A5  0824               	movf	___ftmul@f2+1,w
  3879  02A6  00A7               	movwf	??___ftmul+1
  3880  02A7  0825               	movf	___ftmul@f2+2,w
  3881  02A8  00A8               	movwf	??___ftmul+2
  3882  02A9  1003               	clrc
  3883  02AA  0D27               	rlf	??___ftmul+1,w
  3884  02AB  0D28               	rlf	??___ftmul+2,w
  3885  02AC  00A9               	movwf	??___ftmul+3
  3886  02AD  0829               	movf	??___ftmul+3,w
  3887  02AE  00AF               	movwf	___ftmul@sign
  3888  02AF  082F               	movf	___ftmul@sign,w
  3889  02B0  1D03               	btfss	3,2
  3890  02B1  2AB9               	goto	l1666
  3891  02B2  3000               	movlw	0
  3892  02B3  00A0               	movwf	?___ftmul
  3893  02B4  3000               	movlw	0
  3894  02B5  00A1               	movwf	?___ftmul+1
  3895  02B6  3000               	movlw	0
  3896  02B7  00A2               	movwf	?___ftmul+2
  3897  02B8  0008               	return
  3898  02B9                     l1666:	
  3899  02B9  082F               	movf	___ftmul@sign,w
  3900  02BA  3E7B               	addlw	123
  3901  02BB  00A6               	movwf	??___ftmul
  3902  02BC  0826               	movf	??___ftmul,w
  3903  02BD  07AA               	addwf	___ftmul@exp,f
  3904  02BE  0820               	movf	___ftmul@f1,w
  3905  02BF  00A6               	movwf	??___ftmul
  3906  02C0  0821               	movf	___ftmul@f1+1,w
  3907  02C1  00A7               	movwf	??___ftmul+1
  3908  02C2  0822               	movf	___ftmul@f1+2,w
  3909  02C3  00A8               	movwf	??___ftmul+2
  3910  02C4  3010               	movlw	16
  3911  02C5                     u1905:	
  3912  02C5  1003               	clrc
  3913  02C6  0CA8               	rrf	??___ftmul+2,f
  3914  02C7  0CA7               	rrf	??___ftmul+1,f
  3915  02C8  0CA6               	rrf	??___ftmul,f
  3916  02C9  3EFF               	addlw	-1
  3917  02CA  1D03               	skipz
  3918  02CB  2AC5               	goto	u1905
  3919  02CC  0826               	movf	??___ftmul,w
  3920  02CD  00A9               	movwf	??___ftmul+3
  3921  02CE  0829               	movf	??___ftmul+3,w
  3922  02CF  00AF               	movwf	___ftmul@sign
  3923  02D0  0823               	movf	___ftmul@f2,w
  3924  02D1  00A6               	movwf	??___ftmul
  3925  02D2  0824               	movf	___ftmul@f2+1,w
  3926  02D3  00A7               	movwf	??___ftmul+1
  3927  02D4  0825               	movf	___ftmul@f2+2,w
  3928  02D5  00A8               	movwf	??___ftmul+2
  3929  02D6  3010               	movlw	16
  3930  02D7                     u1915:	
  3931  02D7  1003               	clrc
  3932  02D8  0CA8               	rrf	??___ftmul+2,f
  3933  02D9  0CA7               	rrf	??___ftmul+1,f
  3934  02DA  0CA6               	rrf	??___ftmul,f
  3935  02DB  3EFF               	addlw	-1
  3936  02DC  1D03               	skipz
  3937  02DD  2AD7               	goto	u1915
  3938  02DE  0826               	movf	??___ftmul,w
  3939  02DF  00A9               	movwf	??___ftmul+3
  3940  02E0  0829               	movf	??___ftmul+3,w
  3941  02E1  06AF               	xorwf	___ftmul@sign,f
  3942  02E2  3080               	movlw	128
  3943  02E3  00A6               	movwf	??___ftmul
  3944  02E4  0826               	movf	??___ftmul,w
  3945  02E5  05AF               	andwf	___ftmul@sign,f
  3946  02E6  17A1               	bsf	___ftmul@f1+1,7
  3947  02E7  17A4               	bsf	___ftmul@f2+1,7
  3948  02E8  30FF               	movlw	255
  3949  02E9  05A3               	andwf	___ftmul@f2,f
  3950  02EA  30FF               	movlw	255
  3951  02EB  05A4               	andwf	___ftmul@f2+1,f
  3952  02EC  3000               	movlw	0
  3953  02ED  05A5               	andwf	___ftmul@f2+2,f
  3954  02EE  3000               	movlw	0
  3955  02EF  00AB               	movwf	___ftmul@f3_as_product
  3956  02F0  3000               	movlw	0
  3957  02F1  00AC               	movwf	___ftmul@f3_as_product+1
  3958  02F2  3000               	movlw	0
  3959  02F3  00AD               	movwf	___ftmul@f3_as_product+2
  3960  02F4  3007               	movlw	7
  3961  02F5  00A6               	movwf	??___ftmul
  3962  02F6  0826               	movf	??___ftmul,w
  3963  02F7  00AE               	movwf	___ftmul@cntr
  3964  02F8                     l1678:	
  3965  02F8  1C20               	btfss	___ftmul@f1,0
  3966  02F9  2B08               	goto	l1682
  3967  02FA  0823               	movf	___ftmul@f2,w
  3968  02FB  07AB               	addwf	___ftmul@f3_as_product,f
  3969  02FC  0824               	movf	___ftmul@f2+1,w
  3970  02FD  1103               	clrz
  3971  02FE  1803               	skipnc
  3972  02FF  0A24               	incf	___ftmul@f2+1,w
  3973  0300  1D03               	btfss	3,2
  3974  0301  07AC               	addwf	___ftmul@f3_as_product+1,f
  3975  0302  0825               	movf	___ftmul@f2+2,w
  3976  0303  1103               	clrz
  3977  0304  1803               	skipnc
  3978  0305  0A25               	incf	___ftmul@f2+2,w
  3979  0306  1D03               	btfss	3,2
  3980  0307  07AD               	addwf	___ftmul@f3_as_product+2,f
  3981  0308                     l1682:	
  3982  0308  3001               	movlw	1
  3983  0309                     u1945:	
  3984  0309  1003               	clrc
  3985  030A  0CA2               	rrf	___ftmul@f1+2,f
  3986  030B  0CA1               	rrf	___ftmul@f1+1,f
  3987  030C  0CA0               	rrf	___ftmul@f1,f
  3988  030D  3EFF               	addlw	-1
  3989  030E  1D03               	skipz
  3990  030F  2B09               	goto	u1945
  3991  0310  3001               	movlw	1
  3992  0311                     u1955:	
  3993  0311  1003               	clrc
  3994  0312  0DA3               	rlf	___ftmul@f2,f
  3995  0313  0DA4               	rlf	___ftmul@f2+1,f
  3996  0314  0DA5               	rlf	___ftmul@f2+2,f
  3997  0315  3EFF               	addlw	-1
  3998  0316  1D03               	skipz
  3999  0317  2B11               	goto	u1955
  4000  0318  3001               	movlw	1
  4001  0319  02AE               	subwf	___ftmul@cntr,f
  4002  031A  1D03               	btfss	3,2
  4003  031B  2AF8               	goto	l1678
  4004  031C  3009               	movlw	9
  4005  031D  00A6               	movwf	??___ftmul
  4006  031E  0826               	movf	??___ftmul,w
  4007  031F  00AE               	movwf	___ftmul@cntr
  4008  0320                     l1690:	
  4009  0320  1C20               	btfss	___ftmul@f1,0
  4010  0321  2B30               	goto	l1694
  4011  0322  0823               	movf	___ftmul@f2,w
  4012  0323  07AB               	addwf	___ftmul@f3_as_product,f
  4013  0324  0824               	movf	___ftmul@f2+1,w
  4014  0325  1103               	clrz
  4015  0326  1803               	skipnc
  4016  0327  0A24               	incf	___ftmul@f2+1,w
  4017  0328  1D03               	btfss	3,2
  4018  0329  07AC               	addwf	___ftmul@f3_as_product+1,f
  4019  032A  0825               	movf	___ftmul@f2+2,w
  4020  032B  1103               	clrz
  4021  032C  1803               	skipnc
  4022  032D  0A25               	incf	___ftmul@f2+2,w
  4023  032E  1D03               	btfss	3,2
  4024  032F  07AD               	addwf	___ftmul@f3_as_product+2,f
  4025  0330                     l1694:	
  4026  0330  3001               	movlw	1
  4027  0331                     u1995:	
  4028  0331  1003               	clrc
  4029  0332  0CA2               	rrf	___ftmul@f1+2,f
  4030  0333  0CA1               	rrf	___ftmul@f1+1,f
  4031  0334  0CA0               	rrf	___ftmul@f1,f
  4032  0335  3EFF               	addlw	-1
  4033  0336  1D03               	skipz
  4034  0337  2B31               	goto	u1995
  4035  0338  3001               	movlw	1
  4036  0339                     u2005:	
  4037  0339  1003               	clrc
  4038  033A  0CAD               	rrf	___ftmul@f3_as_product+2,f
  4039  033B  0CAC               	rrf	___ftmul@f3_as_product+1,f
  4040  033C  0CAB               	rrf	___ftmul@f3_as_product,f
  4041  033D  3EFF               	addlw	-1
  4042  033E  1D03               	skipz
  4043  033F  2B39               	goto	u2005
  4044  0340  3001               	movlw	1
  4045  0341  02AE               	subwf	___ftmul@cntr,f
  4046  0342  1D03               	btfss	3,2
  4047  0343  2B20               	goto	l1690
  4048  0344  082B               	movf	___ftmul@f3_as_product,w
  4049  0345  00F0               	movwf	___ftpack@arg
  4050  0346  082C               	movf	___ftmul@f3_as_product+1,w
  4051  0347  00F1               	movwf	___ftpack@arg+1
  4052  0348  082D               	movf	___ftmul@f3_as_product+2,w
  4053  0349  00F2               	movwf	___ftpack@arg+2
  4054  034A  082A               	movf	___ftmul@exp,w
  4055  034B  00A6               	movwf	??___ftmul
  4056  034C  0826               	movf	??___ftmul,w
  4057  034D  00F3               	movwf	___ftpack@exp
  4058  034E  082F               	movf	___ftmul@sign,w
  4059  034F  00A7               	movwf	??___ftmul+1
  4060  0350  0827               	movf	??___ftmul+1,w
  4061  0351  00F4               	movwf	___ftpack@sign
  4062  0352  120A  158A  24B7   	fcall	___ftpack
  4063  0355  0870               	movf	?___ftpack,w
  4064  0356  1283               	bcf	3,5	;RP0=0, select bank0
  4065  0357  1303               	bcf	3,6	;RP1=0, select bank0
  4066  0358  00A0               	movwf	?___ftmul
  4067  0359  0871               	movf	?___ftpack+1,w
  4068  035A  00A1               	movwf	?___ftmul+1
  4069  035B  0872               	movf	?___ftpack+2,w
  4070  035C  00A2               	movwf	?___ftmul+2
  4071  035D  0008               	return
  4072  035E                     __end_of___ftmul:	
  4073                           
  4074                           	psect	text17
  4075  099D                     __ptext17:	
  4076 ;; *************** function ___bmul *****************
  4077 ;; Defined at:
  4078 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul8.c"
  4079 ;; Parameters:    Size  Location     Type
  4080 ;;  multiplier      1    wreg     unsigned char 
  4081 ;;  multiplicand    1    0[COMMON] unsigned char 
  4082 ;; Auto vars:     Size  Location     Type
  4083 ;;  multiplier      1    3[COMMON] unsigned char 
  4084 ;;  product         1    2[COMMON] unsigned char 
  4085 ;; Return value:  Size  Location     Type
  4086 ;;                  1    wreg      unsigned char 
  4087 ;; Registers used:
  4088 ;;		wreg, status,2, status,0
  4089 ;; Tracked objects:
  4090 ;;		On entry : 0/0
  4091 ;;		On exit  : 0/0
  4092 ;;		Unchanged: 0/0
  4093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4094 ;;      Params:         1       0       0       0       0
  4095 ;;      Locals:         2       0       0       0       0
  4096 ;;      Temps:          1       0       0       0       0
  4097 ;;      Totals:         4       0       0       0       0
  4098 ;;Total ram usage:        4 bytes
  4099 ;; Hardware stack levels used:    1
  4100 ;; This function calls:
  4101 ;;		Nothing
  4102 ;; This function is called by:
  4103 ;;		_eval_poly
  4104 ;; This function uses a non-reentrant model
  4105 ;;
  4106                           
  4107                           
  4108                           ;psect for function ___bmul
  4109  099D                     ___bmul:	
  4110                           
  4111                           ;incstack = 0
  4112                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4113                           ;___bmul@multiplier stored from wreg
  4114  099D  00F3               	movwf	___bmul@multiplier
  4115  099E  01F2               	clrf	___bmul@product
  4116  099F                     l1536:	
  4117  099F  1C73               	btfss	___bmul@multiplier,0
  4118  09A0  29A5               	goto	l1540
  4119  09A1  0870               	movf	___bmul@multiplicand,w
  4120  09A2  00F1               	movwf	??___bmul
  4121  09A3  0871               	movf	??___bmul,w
  4122  09A4  07F2               	addwf	___bmul@product,f
  4123  09A5                     l1540:	
  4124  09A5  1003               	clrc
  4125  09A6  0DF0               	rlf	___bmul@multiplicand,f
  4126  09A7  1003               	clrc
  4127  09A8  0CF3               	rrf	___bmul@multiplier,f
  4128  09A9  0873               	movf	___bmul@multiplier,w
  4129  09AA  1D03               	btfss	3,2
  4130  09AB  299F               	goto	l1536
  4131  09AC  0872               	movf	___bmul@product,w
  4132  09AD  0008               	return
  4133  09AE                     __end_of___bmul:	
  4134                           
  4135                           	psect	text18
  4136  0A1F                     __ptext18:	
  4137 ;; *************** function ___ftsub *****************
  4138 ;; Defined at:
  4139 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftsub.c"
  4140 ;; Parameters:    Size  Location     Type
  4141 ;;  f2              3   29[BANK0 ] float 
  4142 ;;  f1              3   32[BANK0 ] float 
  4143 ;; Auto vars:     Size  Location     Type
  4144 ;;		None
  4145 ;; Return value:  Size  Location     Type
  4146 ;;                  3   29[BANK0 ] float 
  4147 ;; Registers used:
  4148 ;;		wreg, status,2, status,0, pclath, cstack
  4149 ;; Tracked objects:
  4150 ;;		On entry : 0/0
  4151 ;;		On exit  : 0/0
  4152 ;;		Unchanged: 0/0
  4153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4154 ;;      Params:         0       6       0       0       0
  4155 ;;      Locals:         0       0       0       0       0
  4156 ;;      Temps:          0       0       0       0       0
  4157 ;;      Totals:         0       6       0       0       0
  4158 ;;Total ram usage:        6 bytes
  4159 ;; Hardware stack levels used:    1
  4160 ;; Hardware stack levels required when called:    2
  4161 ;; This function calls:
  4162 ;;		___ftadd
  4163 ;; This function is called by:
  4164 ;;		_exp
  4165 ;; This function uses a non-reentrant model
  4166 ;;
  4167                           
  4168                           
  4169                           ;psect for function ___ftsub
  4170  0A1F                     ___ftsub:	
  4171                           
  4172                           ;incstack = 0
  4173                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  4174  0A1F  1283               	bcf	3,5	;RP0=0, select bank0
  4175  0A20  1303               	bcf	3,6	;RP1=0, select bank0
  4176  0A21  083F               	movf	___ftsub@f2+2,w
  4177  0A22  043E               	iorwf	___ftsub@f2+1,w
  4178  0A23  043D               	iorwf	___ftsub@f2,w
  4179  0A24  1903               	skipnz
  4180  0A25  2A28               	goto	l1832
  4181  0A26  3080               	movlw	128
  4182  0A27  06BF               	xorwf	___ftsub@f2+2,f
  4183  0A28                     l1832:	
  4184  0A28  0840               	movf	___ftsub@f1,w
  4185  0A29  00B0               	movwf	___ftadd@f1
  4186  0A2A  0841               	movf	___ftsub@f1+1,w
  4187  0A2B  00B1               	movwf	___ftadd@f1+1
  4188  0A2C  0842               	movf	___ftsub@f1+2,w
  4189  0A2D  00B2               	movwf	___ftadd@f1+2
  4190  0A2E  083D               	movf	___ftsub@f2,w
  4191  0A2F  00B3               	movwf	___ftadd@f2
  4192  0A30  083E               	movf	___ftsub@f2+1,w
  4193  0A31  00B4               	movwf	___ftadd@f2+1
  4194  0A32  083F               	movf	___ftsub@f2+2,w
  4195  0A33  00B5               	movwf	___ftadd@f2+2
  4196  0A34  120A  118A  2456   	fcall	___ftadd
  4197  0A37  1283               	bcf	3,5	;RP0=0, select bank0
  4198  0A38  1303               	bcf	3,6	;RP1=0, select bank0
  4199  0A39  0830               	movf	?___ftadd,w
  4200  0A3A  00BD               	movwf	?___ftsub
  4201  0A3B  0831               	movf	?___ftadd+1,w
  4202  0A3C  00BE               	movwf	?___ftsub+1
  4203  0A3D  0832               	movf	?___ftadd+2,w
  4204  0A3E  00BF               	movwf	?___ftsub+2
  4205  0A3F  0008               	return
  4206  0A40                     __end_of___ftsub:	
  4207                           
  4208                           	psect	text19
  4209  0456                     __ptext19:	
  4210 ;; *************** function ___ftadd *****************
  4211 ;; Defined at:
  4212 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftadd.c"
  4213 ;; Parameters:    Size  Location     Type
  4214 ;;  f1              3   16[BANK0 ] float 
  4215 ;;  f2              3   19[BANK0 ] float 
  4216 ;; Auto vars:     Size  Location     Type
  4217 ;;  exp1            1   28[BANK0 ] unsigned char 
  4218 ;;  exp2            1   27[BANK0 ] unsigned char 
  4219 ;;  sign            1   26[BANK0 ] unsigned char 
  4220 ;; Return value:  Size  Location     Type
  4221 ;;                  3   16[BANK0 ] float 
  4222 ;; Registers used:
  4223 ;;		wreg, status,2, status,0, pclath, cstack
  4224 ;; Tracked objects:
  4225 ;;		On entry : 0/0
  4226 ;;		On exit  : 0/0
  4227 ;;		Unchanged: 0/0
  4228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4229 ;;      Params:         0       6       0       0       0
  4230 ;;      Locals:         0       3       0       0       0
  4231 ;;      Temps:          0       4       0       0       0
  4232 ;;      Totals:         0      13       0       0       0
  4233 ;;Total ram usage:       13 bytes
  4234 ;; Hardware stack levels used:    1
  4235 ;; Hardware stack levels required when called:    1
  4236 ;; This function calls:
  4237 ;;		___ftpack
  4238 ;; This function is called by:
  4239 ;;		___ftsub
  4240 ;;		_floor
  4241 ;;		_log
  4242 ;;		_eval_poly
  4243 ;; This function uses a non-reentrant model
  4244 ;;
  4245                           
  4246                           
  4247                           ;psect for function ___ftadd
  4248  0456                     ___ftadd:	
  4249                           
  4250                           ;incstack = 0
  4251                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  4252  0456  1283               	bcf	3,5	;RP0=0, select bank0
  4253  0457  1303               	bcf	3,6	;RP1=0, select bank0
  4254  0458  0830               	movf	___ftadd@f1,w
  4255  0459  00B6               	movwf	??___ftadd
  4256  045A  0831               	movf	___ftadd@f1+1,w
  4257  045B  00B7               	movwf	??___ftadd+1
  4258  045C  0832               	movf	___ftadd@f1+2,w
  4259  045D  00B8               	movwf	??___ftadd+2
  4260  045E  1003               	clrc
  4261  045F  0D37               	rlf	??___ftadd+1,w
  4262  0460  0D38               	rlf	??___ftadd+2,w
  4263  0461  00B9               	movwf	??___ftadd+3
  4264  0462  0839               	movf	??___ftadd+3,w
  4265  0463  00BC               	movwf	___ftadd@exp1
  4266  0464  0833               	movf	___ftadd@f2,w
  4267  0465  00B6               	movwf	??___ftadd
  4268  0466  0834               	movf	___ftadd@f2+1,w
  4269  0467  00B7               	movwf	??___ftadd+1
  4270  0468  0835               	movf	___ftadd@f2+2,w
  4271  0469  00B8               	movwf	??___ftadd+2
  4272  046A  1003               	clrc
  4273  046B  0D37               	rlf	??___ftadd+1,w
  4274  046C  0D38               	rlf	??___ftadd+2,w
  4275  046D  00B9               	movwf	??___ftadd+3
  4276  046E  0839               	movf	??___ftadd+3,w
  4277  046F  00BB               	movwf	___ftadd@exp2
  4278  0470  083C               	movf	___ftadd@exp1,w
  4279  0471  1903               	btfsc	3,2
  4280  0472  2C7F               	goto	l1570
  4281  0473  083B               	movf	___ftadd@exp2,w
  4282  0474  023C               	subwf	___ftadd@exp1,w
  4283  0475  1803               	skipnc
  4284  0476  2C86               	goto	l1574
  4285  0477  033C               	decf	___ftadd@exp1,w
  4286  0478  3AFF               	xorlw	255
  4287  0479  073B               	addwf	___ftadd@exp2,w
  4288  047A  00B6               	movwf	??___ftadd
  4289  047B  3019               	movlw	25
  4290  047C  0236               	subwf	??___ftadd,w
  4291  047D  1C03               	skipc
  4292  047E  2C86               	goto	l1574
  4293  047F                     l1570:	
  4294  047F  0833               	movf	___ftadd@f2,w
  4295  0480  00B0               	movwf	?___ftadd
  4296  0481  0834               	movf	___ftadd@f2+1,w
  4297  0482  00B1               	movwf	?___ftadd+1
  4298  0483  0835               	movf	___ftadd@f2+2,w
  4299  0484  00B2               	movwf	?___ftadd+2
  4300  0485  0008               	return
  4301  0486                     l1574:	
  4302  0486  083B               	movf	___ftadd@exp2,w
  4303  0487  1903               	btfsc	3,2
  4304  0488  0008               	return
  4305  0489  083C               	movf	___ftadd@exp1,w
  4306  048A  023B               	subwf	___ftadd@exp2,w
  4307  048B  1803               	skipnc
  4308  048C  2C95               	goto	l1580
  4309  048D  033B               	decf	___ftadd@exp2,w
  4310  048E  3AFF               	xorlw	255
  4311  048F  073C               	addwf	___ftadd@exp1,w
  4312  0490  00B6               	movwf	??___ftadd
  4313  0491  3019               	movlw	25
  4314  0492  0236               	subwf	??___ftadd,w
  4315  0493  1803               	btfsc	3,0
  4316  0494  0008               	return
  4317  0495                     l1580:	
  4318  0495  3006               	movlw	6
  4319  0496  00B6               	movwf	??___ftadd
  4320  0497  0836               	movf	??___ftadd,w
  4321  0498  00BA               	movwf	___ftadd@sign
  4322  0499  1BB2               	btfsc	___ftadd@f1+2,7
  4323  049A  17BA               	bsf	___ftadd@sign,7
  4324  049B  1BB5               	btfsc	___ftadd@f2+2,7
  4325  049C  173A               	bsf	___ftadd@sign,6
  4326  049D  17B1               	bsf	___ftadd@f1+1,7
  4327  049E  30FF               	movlw	255
  4328  049F  05B0               	andwf	___ftadd@f1,f
  4329  04A0  30FF               	movlw	255
  4330  04A1  05B1               	andwf	___ftadd@f1+1,f
  4331  04A2  3000               	movlw	0
  4332  04A3  05B2               	andwf	___ftadd@f1+2,f
  4333  04A4  17B4               	bsf	___ftadd@f2+1,7
  4334  04A5  30FF               	movlw	255
  4335  04A6  05B3               	andwf	___ftadd@f2,f
  4336  04A7  30FF               	movlw	255
  4337  04A8  05B4               	andwf	___ftadd@f2+1,f
  4338  04A9  3000               	movlw	0
  4339  04AA  05B5               	andwf	___ftadd@f2+2,f
  4340  04AB  083B               	movf	___ftadd@exp2,w
  4341  04AC  023C               	subwf	___ftadd@exp1,w
  4342  04AD  1803               	skipnc
  4343  04AE  2CD5               	goto	l1602
  4344  04AF                     l1592:	
  4345  04AF  3001               	movlw	1
  4346  04B0                     u1685:	
  4347  04B0  1003               	clrc
  4348  04B1  0DB3               	rlf	___ftadd@f2,f
  4349  04B2  0DB4               	rlf	___ftadd@f2+1,f
  4350  04B3  0DB5               	rlf	___ftadd@f2+2,f
  4351  04B4  3EFF               	addlw	-1
  4352  04B5  1D03               	skipz
  4353  04B6  2CB0               	goto	u1685
  4354  04B7  3001               	movlw	1
  4355  04B8  02BB               	subwf	___ftadd@exp2,f
  4356  04B9  083B               	movf	___ftadd@exp2,w
  4357  04BA  063C               	xorwf	___ftadd@exp1,w
  4358  04BB  1903               	skipnz
  4359  04BC  2CD0               	goto	l1600
  4360  04BD  3001               	movlw	1
  4361  04BE  02BA               	subwf	___ftadd@sign,f
  4362  04BF  083A               	movf	___ftadd@sign,w
  4363  04C0  3907               	andlw	7
  4364  04C1  1903               	btfsc	3,2
  4365  04C2  2CD0               	goto	l1600
  4366  04C3  2CAF               	goto	l1592
  4367  04C4                     l1598:	
  4368  04C4  3001               	movlw	1
  4369  04C5                     u1715:	
  4370  04C5  1003               	clrc
  4371  04C6  0CB2               	rrf	___ftadd@f1+2,f
  4372  04C7  0CB1               	rrf	___ftadd@f1+1,f
  4373  04C8  0CB0               	rrf	___ftadd@f1,f
  4374  04C9  3EFF               	addlw	-1
  4375  04CA  1D03               	skipz
  4376  04CB  2CC5               	goto	u1715
  4377  04CC  3001               	movlw	1
  4378  04CD  00B6               	movwf	??___ftadd
  4379  04CE  0836               	movf	??___ftadd,w
  4380  04CF  07BC               	addwf	___ftadd@exp1,f
  4381  04D0                     l1600:	
  4382  04D0  083C               	movf	___ftadd@exp1,w
  4383  04D1  063B               	xorwf	___ftadd@exp2,w
  4384  04D2  1903               	btfsc	3,2
  4385  04D3  2CFE               	goto	l381
  4386  04D4  2CC4               	goto	l1598
  4387  04D5                     l1602:	
  4388  04D5  083C               	movf	___ftadd@exp1,w
  4389  04D6  023B               	subwf	___ftadd@exp2,w
  4390  04D7  1803               	skipnc
  4391  04D8  2CFE               	goto	l381
  4392  04D9                     l1604:	
  4393  04D9  3001               	movlw	1
  4394  04DA                     u1745:	
  4395  04DA  1003               	clrc
  4396  04DB  0DB0               	rlf	___ftadd@f1,f
  4397  04DC  0DB1               	rlf	___ftadd@f1+1,f
  4398  04DD  0DB2               	rlf	___ftadd@f1+2,f
  4399  04DE  3EFF               	addlw	-1
  4400  04DF  1D03               	skipz
  4401  04E0  2CDA               	goto	u1745
  4402  04E1  3001               	movlw	1
  4403  04E2  02BC               	subwf	___ftadd@exp1,f
  4404  04E3  083B               	movf	___ftadd@exp2,w
  4405  04E4  063C               	xorwf	___ftadd@exp1,w
  4406  04E5  1903               	skipnz
  4407  04E6  2CFA               	goto	l1612
  4408  04E7  3001               	movlw	1
  4409  04E8  02BA               	subwf	___ftadd@sign,f
  4410  04E9  083A               	movf	___ftadd@sign,w
  4411  04EA  3907               	andlw	7
  4412  04EB  1903               	btfsc	3,2
  4413  04EC  2CFA               	goto	l1612
  4414  04ED  2CD9               	goto	l1604
  4415  04EE                     l1610:	
  4416  04EE  3001               	movlw	1
  4417  04EF                     u1775:	
  4418  04EF  1003               	clrc
  4419  04F0  0CB5               	rrf	___ftadd@f2+2,f
  4420  04F1  0CB4               	rrf	___ftadd@f2+1,f
  4421  04F2  0CB3               	rrf	___ftadd@f2,f
  4422  04F3  3EFF               	addlw	-1
  4423  04F4  1D03               	skipz
  4424  04F5  2CEF               	goto	u1775
  4425  04F6  3001               	movlw	1
  4426  04F7  00B6               	movwf	??___ftadd
  4427  04F8  0836               	movf	??___ftadd,w
  4428  04F9  07BB               	addwf	___ftadd@exp2,f
  4429  04FA                     l1612:	
  4430  04FA  083C               	movf	___ftadd@exp1,w
  4431  04FB  063B               	xorwf	___ftadd@exp2,w
  4432  04FC  1D03               	skipz
  4433  04FD  2CEE               	goto	l1610
  4434  04FE                     l381:	
  4435  04FE  1FBA               	btfss	___ftadd@sign,7
  4436  04FF  2D10               	goto	l1616
  4437  0500  30FF               	movlw	255
  4438  0501  06B0               	xorwf	___ftadd@f1,f
  4439  0502  30FF               	movlw	255
  4440  0503  06B1               	xorwf	___ftadd@f1+1,f
  4441  0504  30FF               	movlw	255
  4442  0505  06B2               	xorwf	___ftadd@f1+2,f
  4443  0506  3001               	movlw	1
  4444  0507  07B0               	addwf	___ftadd@f1,f
  4445  0508  3000               	movlw	0
  4446  0509  1803               	skipnc
  4447  050A  3001               	movlw	1
  4448  050B  07B1               	addwf	___ftadd@f1+1,f
  4449  050C  3000               	movlw	0
  4450  050D  1803               	skipnc
  4451  050E  3001               	movlw	1
  4452  050F  07B2               	addwf	___ftadd@f1+2,f
  4453  0510                     l1616:	
  4454  0510  1F3A               	btfss	___ftadd@sign,6
  4455  0511  2D22               	goto	l1620
  4456  0512  30FF               	movlw	255
  4457  0513  06B3               	xorwf	___ftadd@f2,f
  4458  0514  30FF               	movlw	255
  4459  0515  06B4               	xorwf	___ftadd@f2+1,f
  4460  0516  30FF               	movlw	255
  4461  0517  06B5               	xorwf	___ftadd@f2+2,f
  4462  0518  3001               	movlw	1
  4463  0519  07B3               	addwf	___ftadd@f2,f
  4464  051A  3000               	movlw	0
  4465  051B  1803               	skipnc
  4466  051C  3001               	movlw	1
  4467  051D  07B4               	addwf	___ftadd@f2+1,f
  4468  051E  3000               	movlw	0
  4469  051F  1803               	skipnc
  4470  0520  3001               	movlw	1
  4471  0521  07B5               	addwf	___ftadd@f2+2,f
  4472  0522                     l1620:	
  4473  0522  01BA               	clrf	___ftadd@sign
  4474  0523  0830               	movf	___ftadd@f1,w
  4475  0524  07B3               	addwf	___ftadd@f2,f
  4476  0525  0831               	movf	___ftadd@f1+1,w
  4477  0526  1103               	clrz
  4478  0527  1803               	skipnc
  4479  0528  0A31               	incf	___ftadd@f1+1,w
  4480  0529  1D03               	btfss	3,2
  4481  052A  07B4               	addwf	___ftadd@f2+1,f
  4482  052B  0832               	movf	___ftadd@f1+2,w
  4483  052C  1103               	clrz
  4484  052D  1803               	skipnc
  4485  052E  0A32               	incf	___ftadd@f1+2,w
  4486  052F  1D03               	btfss	3,2
  4487  0530  07B5               	addwf	___ftadd@f2+2,f
  4488  0531  1FB5               	btfss	___ftadd@f2+2,7
  4489  0532  2D45               	goto	l1630
  4490  0533  30FF               	movlw	255
  4491  0534  06B3               	xorwf	___ftadd@f2,f
  4492  0535  30FF               	movlw	255
  4493  0536  06B4               	xorwf	___ftadd@f2+1,f
  4494  0537  30FF               	movlw	255
  4495  0538  06B5               	xorwf	___ftadd@f2+2,f
  4496  0539  3001               	movlw	1
  4497  053A  07B3               	addwf	___ftadd@f2,f
  4498  053B  3000               	movlw	0
  4499  053C  1803               	skipnc
  4500  053D  3001               	movlw	1
  4501  053E  07B4               	addwf	___ftadd@f2+1,f
  4502  053F  3000               	movlw	0
  4503  0540  1803               	skipnc
  4504  0541  3001               	movlw	1
  4505  0542  07B5               	addwf	___ftadd@f2+2,f
  4506  0543  01BA               	clrf	___ftadd@sign
  4507  0544  0ABA               	incf	___ftadd@sign,f
  4508  0545                     l1630:	
  4509  0545  0833               	movf	___ftadd@f2,w
  4510  0546  00F0               	movwf	___ftpack@arg
  4511  0547  0834               	movf	___ftadd@f2+1,w
  4512  0548  00F1               	movwf	___ftpack@arg+1
  4513  0549  0835               	movf	___ftadd@f2+2,w
  4514  054A  00F2               	movwf	___ftpack@arg+2
  4515  054B  083C               	movf	___ftadd@exp1,w
  4516  054C  00B6               	movwf	??___ftadd
  4517  054D  0836               	movf	??___ftadd,w
  4518  054E  00F3               	movwf	___ftpack@exp
  4519  054F  083A               	movf	___ftadd@sign,w
  4520  0550  00B7               	movwf	??___ftadd+1
  4521  0551  0837               	movf	??___ftadd+1,w
  4522  0552  00F4               	movwf	___ftpack@sign
  4523  0553  120A  158A  24B7   	fcall	___ftpack
  4524  0556  0870               	movf	?___ftpack,w
  4525  0557  1283               	bcf	3,5	;RP0=0, select bank0
  4526  0558  1303               	bcf	3,6	;RP1=0, select bank0
  4527  0559  00B0               	movwf	?___ftadd
  4528  055A  0871               	movf	?___ftpack+1,w
  4529  055B  00B1               	movwf	?___ftadd+1
  4530  055C  0872               	movf	?___ftpack+2,w
  4531  055D  00B2               	movwf	?___ftadd+2
  4532  055E  0008               	return
  4533  055F                     __end_of___ftadd:	
  4534                           
  4535                           	psect	text20
  4536  0042                     __ptext20:	
  4537 ;; *************** function ___ftdiv *****************
  4538 ;; Defined at:
  4539 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdiv.c"
  4540 ;; Parameters:    Size  Location     Type
  4541 ;;  f2              3   16[BANK0 ] float 
  4542 ;;  f1              3   19[BANK0 ] float 
  4543 ;; Auto vars:     Size  Location     Type
  4544 ;;  f3              3   27[BANK0 ] float 
  4545 ;;  sign            1   31[BANK0 ] unsigned char 
  4546 ;;  exp             1   30[BANK0 ] unsigned char 
  4547 ;;  cntr            1   26[BANK0 ] unsigned char 
  4548 ;; Return value:  Size  Location     Type
  4549 ;;                  3   16[BANK0 ] float 
  4550 ;; Registers used:
  4551 ;;		wreg, status,2, status,0, pclath, cstack
  4552 ;; Tracked objects:
  4553 ;;		On entry : 0/0
  4554 ;;		On exit  : 0/0
  4555 ;;		Unchanged: 0/0
  4556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4557 ;;      Params:         0       6       0       0       0
  4558 ;;      Locals:         0       6       0       0       0
  4559 ;;      Temps:          0       4       0       0       0
  4560 ;;      Totals:         0      16       0       0       0
  4561 ;;Total ram usage:       16 bytes
  4562 ;; Hardware stack levels used:    1
  4563 ;; Hardware stack levels required when called:    1
  4564 ;; This function calls:
  4565 ;;		___ftpack
  4566 ;; This function is called by:
  4567 ;;		_analogRead
  4568 ;;		_exp
  4569 ;; This function uses a non-reentrant model
  4570 ;;
  4571                           
  4572                           
  4573                           ;psect for function ___ftdiv
  4574  0042                     ___ftdiv:	
  4575                           
  4576                           ;incstack = 0
  4577                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  4578  0042  1283               	bcf	3,5	;RP0=0, select bank0
  4579  0043  1303               	bcf	3,6	;RP1=0, select bank0
  4580  0044  0833               	movf	___ftdiv@f1,w
  4581  0045  00B6               	movwf	??___ftdiv
  4582  0046  0834               	movf	___ftdiv@f1+1,w
  4583  0047  00B7               	movwf	??___ftdiv+1
  4584  0048  0835               	movf	___ftdiv@f1+2,w
  4585  0049  00B8               	movwf	??___ftdiv+2
  4586  004A  1003               	clrc
  4587  004B  0D37               	rlf	??___ftdiv+1,w
  4588  004C  0D38               	rlf	??___ftdiv+2,w
  4589  004D  00B9               	movwf	??___ftdiv+3
  4590  004E  0839               	movf	??___ftdiv+3,w
  4591  004F  00BE               	movwf	___ftdiv@exp
  4592  0050  083E               	movf	___ftdiv@exp,w
  4593  0051  1D03               	btfss	3,2
  4594  0052  285A               	goto	l1792
  4595  0053  3000               	movlw	0
  4596  0054  00B0               	movwf	?___ftdiv
  4597  0055  3000               	movlw	0
  4598  0056  00B1               	movwf	?___ftdiv+1
  4599  0057  3000               	movlw	0
  4600  0058  00B2               	movwf	?___ftdiv+2
  4601  0059  0008               	return
  4602  005A                     l1792:	
  4603  005A  0830               	movf	___ftdiv@f2,w
  4604  005B  00B6               	movwf	??___ftdiv
  4605  005C  0831               	movf	___ftdiv@f2+1,w
  4606  005D  00B7               	movwf	??___ftdiv+1
  4607  005E  0832               	movf	___ftdiv@f2+2,w
  4608  005F  00B8               	movwf	??___ftdiv+2
  4609  0060  1003               	clrc
  4610  0061  0D37               	rlf	??___ftdiv+1,w
  4611  0062  0D38               	rlf	??___ftdiv+2,w
  4612  0063  00B9               	movwf	??___ftdiv+3
  4613  0064  0839               	movf	??___ftdiv+3,w
  4614  0065  00BF               	movwf	___ftdiv@sign
  4615  0066  083F               	movf	___ftdiv@sign,w
  4616  0067  1D03               	btfss	3,2
  4617  0068  2870               	goto	l1798
  4618  0069  3000               	movlw	0
  4619  006A  00B0               	movwf	?___ftdiv
  4620  006B  3000               	movlw	0
  4621  006C  00B1               	movwf	?___ftdiv+1
  4622  006D  3000               	movlw	0
  4623  006E  00B2               	movwf	?___ftdiv+2
  4624  006F  0008               	return
  4625  0070                     l1798:	
  4626  0070  3000               	movlw	0
  4627  0071  00BB               	movwf	___ftdiv@f3
  4628  0072  3000               	movlw	0
  4629  0073  00BC               	movwf	___ftdiv@f3+1
  4630  0074  3000               	movlw	0
  4631  0075  00BD               	movwf	___ftdiv@f3+2
  4632  0076  3089               	movlw	137
  4633  0077  073F               	addwf	___ftdiv@sign,w
  4634  0078  00B6               	movwf	??___ftdiv
  4635  0079  0836               	movf	??___ftdiv,w
  4636  007A  02BE               	subwf	___ftdiv@exp,f
  4637  007B  0833               	movf	___ftdiv@f1,w
  4638  007C  00B6               	movwf	??___ftdiv
  4639  007D  0834               	movf	___ftdiv@f1+1,w
  4640  007E  00B7               	movwf	??___ftdiv+1
  4641  007F  0835               	movf	___ftdiv@f1+2,w
  4642  0080  00B8               	movwf	??___ftdiv+2
  4643  0081  3010               	movlw	16
  4644  0082                     u2175:	
  4645  0082  1003               	clrc
  4646  0083  0CB8               	rrf	??___ftdiv+2,f
  4647  0084  0CB7               	rrf	??___ftdiv+1,f
  4648  0085  0CB6               	rrf	??___ftdiv,f
  4649  0086  3EFF               	addlw	-1
  4650  0087  1D03               	skipz
  4651  0088  2882               	goto	u2175
  4652  0089  0836               	movf	??___ftdiv,w
  4653  008A  00B9               	movwf	??___ftdiv+3
  4654  008B  0839               	movf	??___ftdiv+3,w
  4655  008C  00BF               	movwf	___ftdiv@sign
  4656  008D  0830               	movf	___ftdiv@f2,w
  4657  008E  00B6               	movwf	??___ftdiv
  4658  008F  0831               	movf	___ftdiv@f2+1,w
  4659  0090  00B7               	movwf	??___ftdiv+1
  4660  0091  0832               	movf	___ftdiv@f2+2,w
  4661  0092  00B8               	movwf	??___ftdiv+2
  4662  0093  3010               	movlw	16
  4663  0094                     u2185:	
  4664  0094  1003               	clrc
  4665  0095  0CB8               	rrf	??___ftdiv+2,f
  4666  0096  0CB7               	rrf	??___ftdiv+1,f
  4667  0097  0CB6               	rrf	??___ftdiv,f
  4668  0098  3EFF               	addlw	-1
  4669  0099  1D03               	skipz
  4670  009A  2894               	goto	u2185
  4671  009B  0836               	movf	??___ftdiv,w
  4672  009C  00B9               	movwf	??___ftdiv+3
  4673  009D  0839               	movf	??___ftdiv+3,w
  4674  009E  06BF               	xorwf	___ftdiv@sign,f
  4675  009F  3080               	movlw	128
  4676  00A0  00B6               	movwf	??___ftdiv
  4677  00A1  0836               	movf	??___ftdiv,w
  4678  00A2  05BF               	andwf	___ftdiv@sign,f
  4679  00A3  17B4               	bsf	___ftdiv@f1+1,7
  4680  00A4  30FF               	movlw	255
  4681  00A5  05B3               	andwf	___ftdiv@f1,f
  4682  00A6  30FF               	movlw	255
  4683  00A7  05B4               	andwf	___ftdiv@f1+1,f
  4684  00A8  3000               	movlw	0
  4685  00A9  05B5               	andwf	___ftdiv@f1+2,f
  4686  00AA  17B1               	bsf	___ftdiv@f2+1,7
  4687  00AB  30FF               	movlw	255
  4688  00AC  05B0               	andwf	___ftdiv@f2,f
  4689  00AD  30FF               	movlw	255
  4690  00AE  05B1               	andwf	___ftdiv@f2+1,f
  4691  00AF  3000               	movlw	0
  4692  00B0  05B2               	andwf	___ftdiv@f2+2,f
  4693  00B1  3018               	movlw	24
  4694  00B2  00B6               	movwf	??___ftdiv
  4695  00B3  0836               	movf	??___ftdiv,w
  4696  00B4  00BA               	movwf	___ftdiv@cntr
  4697  00B5                     l1812:	
  4698  00B5  3001               	movlw	1
  4699  00B6                     u2195:	
  4700  00B6  1003               	clrc
  4701  00B7  0DBB               	rlf	___ftdiv@f3,f
  4702  00B8  0DBC               	rlf	___ftdiv@f3+1,f
  4703  00B9  0DBD               	rlf	___ftdiv@f3+2,f
  4704  00BA  3EFF               	addlw	-1
  4705  00BB  1D03               	skipz
  4706  00BC  28B6               	goto	u2195
  4707  00BD  0832               	movf	___ftdiv@f2+2,w
  4708  00BE  0235               	subwf	___ftdiv@f1+2,w
  4709  00BF  1D03               	skipz
  4710  00C0  28C7               	goto	u2205
  4711  00C1  0831               	movf	___ftdiv@f2+1,w
  4712  00C2  0234               	subwf	___ftdiv@f1+1,w
  4713  00C3  1D03               	skipz
  4714  00C4  28C7               	goto	u2205
  4715  00C5  0830               	movf	___ftdiv@f2,w
  4716  00C6  0233               	subwf	___ftdiv@f1,w
  4717  00C7                     u2205:	
  4718  00C7  1C03               	skipc
  4719  00C8  28D4               	goto	l1820
  4720  00C9  0830               	movf	___ftdiv@f2,w
  4721  00CA  02B3               	subwf	___ftdiv@f1,f
  4722  00CB  0831               	movf	___ftdiv@f2+1,w
  4723  00CC  1C03               	skipc
  4724  00CD  0F31               	incfsz	___ftdiv@f2+1,w
  4725  00CE  02B4               	subwf	___ftdiv@f1+1,f
  4726  00CF  0832               	movf	___ftdiv@f2+2,w
  4727  00D0  1C03               	skipc
  4728  00D1  0A32               	incf	___ftdiv@f2+2,w
  4729  00D2  02B5               	subwf	___ftdiv@f1+2,f
  4730  00D3  143B               	bsf	___ftdiv@f3,0
  4731  00D4                     l1820:	
  4732  00D4  3001               	movlw	1
  4733  00D5                     u2215:	
  4734  00D5  1003               	clrc
  4735  00D6  0DB3               	rlf	___ftdiv@f1,f
  4736  00D7  0DB4               	rlf	___ftdiv@f1+1,f
  4737  00D8  0DB5               	rlf	___ftdiv@f1+2,f
  4738  00D9  3EFF               	addlw	-1
  4739  00DA  1D03               	skipz
  4740  00DB  28D5               	goto	u2215
  4741  00DC  3001               	movlw	1
  4742  00DD  02BA               	subwf	___ftdiv@cntr,f
  4743  00DE  1D03               	btfss	3,2
  4744  00DF  28B5               	goto	l1812
  4745  00E0  083B               	movf	___ftdiv@f3,w
  4746  00E1  00F0               	movwf	___ftpack@arg
  4747  00E2  083C               	movf	___ftdiv@f3+1,w
  4748  00E3  00F1               	movwf	___ftpack@arg+1
  4749  00E4  083D               	movf	___ftdiv@f3+2,w
  4750  00E5  00F2               	movwf	___ftpack@arg+2
  4751  00E6  083E               	movf	___ftdiv@exp,w
  4752  00E7  00B6               	movwf	??___ftdiv
  4753  00E8  0836               	movf	??___ftdiv,w
  4754  00E9  00F3               	movwf	___ftpack@exp
  4755  00EA  083F               	movf	___ftdiv@sign,w
  4756  00EB  00B7               	movwf	??___ftdiv+1
  4757  00EC  0837               	movf	??___ftdiv+1,w
  4758  00ED  00F4               	movwf	___ftpack@sign
  4759  00EE  120A  158A  24B7   	fcall	___ftpack
  4760  00F1  0870               	movf	?___ftpack,w
  4761  00F2  1283               	bcf	3,5	;RP0=0, select bank0
  4762  00F3  1303               	bcf	3,6	;RP1=0, select bank0
  4763  00F4  00B0               	movwf	?___ftdiv
  4764  00F5  0871               	movf	?___ftpack+1,w
  4765  00F6  00B1               	movwf	?___ftdiv+1
  4766  00F7  0872               	movf	?___ftpack+2,w
  4767  00F8  00B2               	movwf	?___ftdiv+2
  4768  00F9  0008               	return
  4769  00FA                     __end_of___ftdiv:	
  4770                           
  4771                           	psect	text21
  4772  09FE                     __ptext21:	
  4773 ;; *************** function ___awtoft *****************
  4774 ;; Defined at:
  4775 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awtoft.c"
  4776 ;; Parameters:    Size  Location     Type
  4777 ;;  c               2    8[COMMON] int 
  4778 ;; Auto vars:     Size  Location     Type
  4779 ;;  sign            1   13[COMMON] unsigned char 
  4780 ;; Return value:  Size  Location     Type
  4781 ;;                  3    8[COMMON] float 
  4782 ;; Registers used:
  4783 ;;		wreg, status,2, status,0, pclath, cstack
  4784 ;; Tracked objects:
  4785 ;;		On entry : 0/0
  4786 ;;		On exit  : 0/0
  4787 ;;		Unchanged: 0/0
  4788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4789 ;;      Params:         3       0       0       0       0
  4790 ;;      Locals:         1       0       0       0       0
  4791 ;;      Temps:          2       0       0       0       0
  4792 ;;      Totals:         6       0       0       0       0
  4793 ;;Total ram usage:        6 bytes
  4794 ;; Hardware stack levels used:    1
  4795 ;; Hardware stack levels required when called:    1
  4796 ;; This function calls:
  4797 ;;		___ftpack
  4798 ;; This function is called by:
  4799 ;;		_analogRead
  4800 ;;		_Process
  4801 ;;		_exp
  4802 ;;		_log
  4803 ;; This function uses a non-reentrant model
  4804 ;;
  4805                           
  4806                           
  4807                           ;psect for function ___awtoft
  4808  09FE                     ___awtoft:	
  4809                           
  4810                           ;incstack = 0
  4811                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  4812  09FE  01FD               	clrf	___awtoft@sign
  4813  09FF  1FF9               	btfss	___awtoft@c+1,7
  4814  0A00  2A08               	goto	l1782
  4815  0A01  09F8               	comf	___awtoft@c,f
  4816  0A02  09F9               	comf	___awtoft@c+1,f
  4817  0A03  0AF8               	incf	___awtoft@c,f
  4818  0A04  1903               	skipnz
  4819  0A05  0AF9               	incf	___awtoft@c+1,f
  4820  0A06  01FD               	clrf	___awtoft@sign
  4821  0A07  0AFD               	incf	___awtoft@sign,f
  4822  0A08                     l1782:	
  4823  0A08  0878               	movf	___awtoft@c,w
  4824  0A09  00F0               	movwf	___ftpack@arg
  4825  0A0A  0879               	movf	___awtoft@c+1,w
  4826  0A0B  00F1               	movwf	___ftpack@arg+1
  4827  0A0C  01F2               	clrf	___ftpack@arg+2
  4828  0A0D  308E               	movlw	142
  4829  0A0E  00FB               	movwf	??___awtoft
  4830  0A0F  087B               	movf	??___awtoft,w
  4831  0A10  00F3               	movwf	___ftpack@exp
  4832  0A11  087D               	movf	___awtoft@sign,w
  4833  0A12  00FC               	movwf	??___awtoft+1
  4834  0A13  087C               	movf	??___awtoft+1,w
  4835  0A14  00F4               	movwf	___ftpack@sign
  4836  0A15  120A  158A  24B7   	fcall	___ftpack
  4837  0A18  0870               	movf	?___ftpack,w
  4838  0A19  00F8               	movwf	?___awtoft
  4839  0A1A  0871               	movf	?___ftpack+1,w
  4840  0A1B  00F9               	movwf	?___awtoft+1
  4841  0A1C  0872               	movf	?___ftpack+2,w
  4842  0A1D  00FA               	movwf	?___awtoft+2
  4843  0A1E  0008               	return
  4844  0A1F                     __end_of___awtoft:	
  4845                           
  4846                           	psect	text22
  4847  0A62                     __ptext22:	
  4848 ;; *************** function ___lltoft *****************
  4849 ;; Defined at:
  4850 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lltoft.c"
  4851 ;; Parameters:    Size  Location     Type
  4852 ;;  c               4    8[COMMON] unsigned long 
  4853 ;; Auto vars:     Size  Location     Type
  4854 ;;  exp             1   13[COMMON] unsigned char 
  4855 ;; Return value:  Size  Location     Type
  4856 ;;                  3    8[COMMON] float 
  4857 ;; Registers used:
  4858 ;;		wreg, status,2, status,0, pclath, cstack
  4859 ;; Tracked objects:
  4860 ;;		On entry : 0/0
  4861 ;;		On exit  : 0/0
  4862 ;;		Unchanged: 0/0
  4863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4864 ;;      Params:         4       0       0       0       0
  4865 ;;      Locals:         1       0       0       0       0
  4866 ;;      Temps:          1       0       0       0       0
  4867 ;;      Totals:         6       0       0       0       0
  4868 ;;Total ram usage:        6 bytes
  4869 ;; Hardware stack levels used:    1
  4870 ;; Hardware stack levels required when called:    1
  4871 ;; This function calls:
  4872 ;;		___ftpack
  4873 ;; This function is called by:
  4874 ;;		_pow
  4875 ;; This function uses a non-reentrant model
  4876 ;;
  4877                           
  4878                           
  4879                           ;psect for function ___lltoft
  4880  0A62                     ___lltoft:	
  4881                           
  4882                           ;incstack = 0
  4883                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  4884  0A62  308E               	movlw	142
  4885  0A63  00FC               	movwf	??___lltoft
  4886  0A64  087C               	movf	??___lltoft,w
  4887  0A65  00FD               	movwf	___lltoft@exp
  4888  0A66                     l1924:	
  4889  0A66  30FF               	movlw	255
  4890  0A67  057B               	andwf	___lltoft@c+3,w
  4891  0A68  1903               	btfsc	3,2
  4892  0A69  2A78               	goto	l1926
  4893  0A6A  3001               	movlw	1
  4894  0A6B                     u2335:	
  4895  0A6B  1003               	clrc
  4896  0A6C  0CFB               	rrf	___lltoft@c+3,f
  4897  0A6D  0CFA               	rrf	___lltoft@c+2,f
  4898  0A6E  0CF9               	rrf	___lltoft@c+1,f
  4899  0A6F  0CF8               	rrf	___lltoft@c,f
  4900  0A70  3EFF               	addlw	-1
  4901  0A71  1D03               	skipz
  4902  0A72  2A6B               	goto	u2335
  4903  0A73  3001               	movlw	1
  4904  0A74  00FC               	movwf	??___lltoft
  4905  0A75  087C               	movf	??___lltoft,w
  4906  0A76  07FD               	addwf	___lltoft@exp,f
  4907  0A77  2A66               	goto	l1924
  4908  0A78                     l1926:	
  4909  0A78  0878               	movf	___lltoft@c,w
  4910  0A79  00F0               	movwf	___ftpack@arg
  4911  0A7A  0879               	movf	___lltoft@c+1,w
  4912  0A7B  00F1               	movwf	___ftpack@arg+1
  4913  0A7C  087A               	movf	___lltoft@c+2,w
  4914  0A7D  00F2               	movwf	___ftpack@arg+2
  4915  0A7E  087D               	movf	___lltoft@exp,w
  4916  0A7F  00FC               	movwf	??___lltoft
  4917  0A80  087C               	movf	??___lltoft,w
  4918  0A81  00F3               	movwf	___ftpack@exp
  4919  0A82  01F4               	clrf	___ftpack@sign
  4920  0A83  120A  158A  24B7   	fcall	___ftpack
  4921  0A86  0870               	movf	?___ftpack,w
  4922  0A87  00F8               	movwf	?___lltoft
  4923  0A88  0871               	movf	?___ftpack+1,w
  4924  0A89  00F9               	movwf	?___lltoft+1
  4925  0A8A  0872               	movf	?___ftpack+2,w
  4926  0A8B  00FA               	movwf	?___lltoft+2
  4927  0A8C  0008               	return
  4928  0A8D                     __end_of___lltoft:	
  4929                           
  4930                           	psect	text23
  4931  0CB7                     __ptext23:	
  4932 ;; *************** function ___ftpack *****************
  4933 ;; Defined at:
  4934 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\float.c"
  4935 ;; Parameters:    Size  Location     Type
  4936 ;;  arg             3    0[COMMON] unsigned um
  4937 ;;  exp             1    3[COMMON] unsigned char 
  4938 ;;  sign            1    4[COMMON] unsigned char 
  4939 ;; Auto vars:     Size  Location     Type
  4940 ;;		None
  4941 ;; Return value:  Size  Location     Type
  4942 ;;                  3    0[COMMON] float 
  4943 ;; Registers used:
  4944 ;;		wreg, status,2, status,0
  4945 ;; Tracked objects:
  4946 ;;		On entry : 0/0
  4947 ;;		On exit  : 0/0
  4948 ;;		Unchanged: 0/0
  4949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4950 ;;      Params:         5       0       0       0       0
  4951 ;;      Locals:         0       0       0       0       0
  4952 ;;      Temps:          3       0       0       0       0
  4953 ;;      Totals:         8       0       0       0       0
  4954 ;;Total ram usage:        8 bytes
  4955 ;; Hardware stack levels used:    1
  4956 ;; This function calls:
  4957 ;;		Nothing
  4958 ;; This function is called by:
  4959 ;;		___altoft
  4960 ;;		___awtoft
  4961 ;;		___ftadd
  4962 ;;		___ftdiv
  4963 ;;		___ftmul
  4964 ;;		___lltoft
  4965 ;; This function uses a non-reentrant model
  4966 ;;
  4967                           
  4968                           
  4969                           ;psect for function ___ftpack
  4970  0CB7                     ___ftpack:	
  4971                           
  4972                           ;incstack = 0
  4973                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  4974  0CB7  0873               	movf	___ftpack@exp,w
  4975  0CB8  1903               	btfsc	3,2
  4976  0CB9  2CBF               	goto	l1506
  4977  0CBA  0872               	movf	___ftpack@arg+2,w
  4978  0CBB  0471               	iorwf	___ftpack@arg+1,w
  4979  0CBC  0470               	iorwf	___ftpack@arg,w
  4980  0CBD  1D03               	skipz
  4981  0CBE  2CD2               	goto	l1512
  4982  0CBF                     l1506:	
  4983  0CBF  3000               	movlw	0
  4984  0CC0  00F0               	movwf	?___ftpack
  4985  0CC1  3000               	movlw	0
  4986  0CC2  00F1               	movwf	?___ftpack+1
  4987  0CC3  3000               	movlw	0
  4988  0CC4  00F2               	movwf	?___ftpack+2
  4989  0CC5  0008               	return
  4990  0CC6                     l1510:	
  4991  0CC6  3001               	movlw	1
  4992  0CC7  00F5               	movwf	??___ftpack
  4993  0CC8  0875               	movf	??___ftpack,w
  4994  0CC9  07F3               	addwf	___ftpack@exp,f
  4995  0CCA  3001               	movlw	1
  4996  0CCB                     u1445:	
  4997  0CCB  1003               	clrc
  4998  0CCC  0CF2               	rrf	___ftpack@arg+2,f
  4999  0CCD  0CF1               	rrf	___ftpack@arg+1,f
  5000  0CCE  0CF0               	rrf	___ftpack@arg,f
  5001  0CCF  3EFF               	addlw	-1
  5002  0CD0  1D03               	skipz
  5003  0CD1  2CCB               	goto	u1445
  5004  0CD2                     l1512:	
  5005  0CD2  30FE               	movlw	254
  5006  0CD3  0572               	andwf	___ftpack@arg+2,w
  5007  0CD4  1903               	btfsc	3,2
  5008  0CD5  2CED               	goto	l350
  5009  0CD6  2CC6               	goto	l1510
  5010  0CD7                     l1514:	
  5011  0CD7  3001               	movlw	1
  5012  0CD8  00F5               	movwf	??___ftpack
  5013  0CD9  0875               	movf	??___ftpack,w
  5014  0CDA  07F3               	addwf	___ftpack@exp,f
  5015  0CDB  3001               	movlw	1
  5016  0CDC  07F0               	addwf	___ftpack@arg,f
  5017  0CDD  3000               	movlw	0
  5018  0CDE  1803               	skipnc
  5019  0CDF  3001               	movlw	1
  5020  0CE0  07F1               	addwf	___ftpack@arg+1,f
  5021  0CE1  3000               	movlw	0
  5022  0CE2  1803               	skipnc
  5023  0CE3  3001               	movlw	1
  5024  0CE4  07F2               	addwf	___ftpack@arg+2,f
  5025  0CE5  3001               	movlw	1
  5026  0CE6                     u1465:	
  5027  0CE6  1003               	clrc
  5028  0CE7  0CF2               	rrf	___ftpack@arg+2,f
  5029  0CE8  0CF1               	rrf	___ftpack@arg+1,f
  5030  0CE9  0CF0               	rrf	___ftpack@arg,f
  5031  0CEA  3EFF               	addlw	-1
  5032  0CEB  1D03               	skipz
  5033  0CEC  2CE6               	goto	u1465
  5034  0CED                     l350:	
  5035  0CED  30FF               	movlw	255
  5036  0CEE  0572               	andwf	___ftpack@arg+2,w
  5037  0CEF  1903               	btfsc	3,2
  5038  0CF0  2CFC               	goto	l1522
  5039  0CF1  2CD7               	goto	l1514
  5040  0CF2                     l1520:	
  5041  0CF2  3001               	movlw	1
  5042  0CF3  02F3               	subwf	___ftpack@exp,f
  5043  0CF4  3001               	movlw	1
  5044  0CF5                     u1485:	
  5045  0CF5  1003               	clrc
  5046  0CF6  0DF0               	rlf	___ftpack@arg,f
  5047  0CF7  0DF1               	rlf	___ftpack@arg+1,f
  5048  0CF8  0DF2               	rlf	___ftpack@arg+2,f
  5049  0CF9  3EFF               	addlw	-1
  5050  0CFA  1D03               	skipz
  5051  0CFB  2CF5               	goto	u1485
  5052  0CFC                     l1522:	
  5053  0CFC  1BF1               	btfsc	___ftpack@arg+1,7
  5054  0CFD  2D02               	goto	l357
  5055  0CFE  3002               	movlw	2
  5056  0CFF  0273               	subwf	___ftpack@exp,w
  5057  0D00  1803               	skipnc
  5058  0D01  2CF2               	goto	l1520
  5059  0D02                     l357:	
  5060  0D02  1873               	btfsc	___ftpack@exp,0
  5061  0D03  2D0A               	goto	l358
  5062  0D04  30FF               	movlw	255
  5063  0D05  05F0               	andwf	___ftpack@arg,f
  5064  0D06  307F               	movlw	127
  5065  0D07  05F1               	andwf	___ftpack@arg+1,f
  5066  0D08  30FF               	movlw	255
  5067  0D09  05F2               	andwf	___ftpack@arg+2,f
  5068  0D0A                     l358:	
  5069  0D0A  1003               	clrc
  5070  0D0B  0CF3               	rrf	___ftpack@exp,f
  5071  0D0C  0873               	movf	___ftpack@exp,w
  5072  0D0D  00F5               	movwf	??___ftpack
  5073  0D0E  01F6               	clrf	??___ftpack+1
  5074  0D0F  01F7               	clrf	??___ftpack+2
  5075  0D10  3010               	movlw	16
  5076  0D11                     u1525:	
  5077  0D11  1003               	clrc
  5078  0D12  0DF5               	rlf	??___ftpack,f
  5079  0D13  0DF6               	rlf	??___ftpack+1,f
  5080  0D14  0DF7               	rlf	??___ftpack+2,f
  5081  0D15  3EFF               	addlw	-1
  5082  0D16  1D03               	skipz
  5083  0D17  2D11               	goto	u1525
  5084  0D18  0875               	movf	??___ftpack,w
  5085  0D19  04F0               	iorwf	___ftpack@arg,f
  5086  0D1A  0876               	movf	??___ftpack+1,w
  5087  0D1B  04F1               	iorwf	___ftpack@arg+1,f
  5088  0D1C  0877               	movf	??___ftpack+2,w
  5089  0D1D  04F2               	iorwf	___ftpack@arg+2,f
  5090  0D1E  0874               	movf	___ftpack@sign,w
  5091  0D1F  1903               	btfsc	3,2
  5092  0D20  0008               	return
  5093  0D21  17F2               	bsf	___ftpack@arg+2,7
  5094  0D22  0008               	return
  5095  0D23                     __end_of___ftpack:	
  5096                           
  5097                           	psect	text24
  5098  0BA4                     __ptext24:	
  5099 ;; *************** function ___awdiv *****************
  5100 ;; Defined at:
  5101 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  5102 ;; Parameters:    Size  Location     Type
  5103 ;;  divisor         2    0[COMMON] int 
  5104 ;;  dividend        2    2[COMMON] int 
  5105 ;; Auto vars:     Size  Location     Type
  5106 ;;  quotient        2    7[COMMON] int 
  5107 ;;  sign            1    6[COMMON] unsigned char 
  5108 ;;  counter         1    5[COMMON] unsigned char 
  5109 ;; Return value:  Size  Location     Type
  5110 ;;                  2    0[COMMON] int 
  5111 ;; Registers used:
  5112 ;;		wreg, status,2, status,0
  5113 ;; Tracked objects:
  5114 ;;		On entry : 0/0
  5115 ;;		On exit  : 0/0
  5116 ;;		Unchanged: 0/0
  5117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5118 ;;      Params:         4       0       0       0       0
  5119 ;;      Locals:         4       0       0       0       0
  5120 ;;      Temps:          1       0       0       0       0
  5121 ;;      Totals:         9       0       0       0       0
  5122 ;;Total ram usage:        9 bytes
  5123 ;; Hardware stack levels used:    1
  5124 ;; This function calls:
  5125 ;;		Nothing
  5126 ;; This function is called by:
  5127 ;;		_Process
  5128 ;;		_main
  5129 ;; This function uses a non-reentrant model
  5130 ;;
  5131                           
  5132                           
  5133                           ;psect for function ___awdiv
  5134  0BA4                     ___awdiv:	
  5135                           
  5136                           ;incstack = 0
  5137                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5138  0BA4  01F6               	clrf	___awdiv@sign
  5139  0BA5  1FF1               	btfss	___awdiv@divisor+1,7
  5140  0BA6  2BAE               	goto	l2110
  5141  0BA7  09F0               	comf	___awdiv@divisor,f
  5142  0BA8  09F1               	comf	___awdiv@divisor+1,f
  5143  0BA9  0AF0               	incf	___awdiv@divisor,f
  5144  0BAA  1903               	skipnz
  5145  0BAB  0AF1               	incf	___awdiv@divisor+1,f
  5146  0BAC  01F6               	clrf	___awdiv@sign
  5147  0BAD  0AF6               	incf	___awdiv@sign,f
  5148  0BAE                     l2110:	
  5149  0BAE  1FF3               	btfss	___awdiv@dividend+1,7
  5150  0BAF  2BB9               	goto	l2116
  5151  0BB0  09F2               	comf	___awdiv@dividend,f
  5152  0BB1  09F3               	comf	___awdiv@dividend+1,f
  5153  0BB2  0AF2               	incf	___awdiv@dividend,f
  5154  0BB3  1903               	skipnz
  5155  0BB4  0AF3               	incf	___awdiv@dividend+1,f
  5156  0BB5  3001               	movlw	1
  5157  0BB6  00F4               	movwf	??___awdiv
  5158  0BB7  0874               	movf	??___awdiv,w
  5159  0BB8  06F6               	xorwf	___awdiv@sign,f
  5160  0BB9                     l2116:	
  5161  0BB9  01F7               	clrf	___awdiv@quotient
  5162  0BBA  01F8               	clrf	___awdiv@quotient+1
  5163  0BBB  0870               	movf	___awdiv@divisor,w
  5164  0BBC  0471               	iorwf	___awdiv@divisor+1,w
  5165  0BBD  1903               	btfsc	3,2
  5166  0BBE  2BF0               	goto	l2138
  5167  0BBF  01F5               	clrf	___awdiv@counter
  5168  0BC0  0AF5               	incf	___awdiv@counter,f
  5169  0BC1                     l2126:	
  5170  0BC1  1BF1               	btfsc	___awdiv@divisor+1,7
  5171  0BC2  2BCF               	goto	l2128
  5172  0BC3  3001               	movlw	1
  5173  0BC4                     u2605:	
  5174  0BC4  1003               	clrc
  5175  0BC5  0DF0               	rlf	___awdiv@divisor,f
  5176  0BC6  0DF1               	rlf	___awdiv@divisor+1,f
  5177  0BC7  3EFF               	addlw	-1
  5178  0BC8  1D03               	skipz
  5179  0BC9  2BC4               	goto	u2605
  5180  0BCA  3001               	movlw	1
  5181  0BCB  00F4               	movwf	??___awdiv
  5182  0BCC  0874               	movf	??___awdiv,w
  5183  0BCD  07F5               	addwf	___awdiv@counter,f
  5184  0BCE  2BC1               	goto	l2126
  5185  0BCF                     l2128:	
  5186  0BCF  3001               	movlw	1
  5187  0BD0                     u2625:	
  5188  0BD0  1003               	clrc
  5189  0BD1  0DF7               	rlf	___awdiv@quotient,f
  5190  0BD2  0DF8               	rlf	___awdiv@quotient+1,f
  5191  0BD3  3EFF               	addlw	-1
  5192  0BD4  1D03               	skipz
  5193  0BD5  2BD0               	goto	u2625
  5194  0BD6  0871               	movf	___awdiv@divisor+1,w
  5195  0BD7  0273               	subwf	___awdiv@dividend+1,w
  5196  0BD8  1D03               	skipz
  5197  0BD9  2BDC               	goto	u2635
  5198  0BDA  0870               	movf	___awdiv@divisor,w
  5199  0BDB  0272               	subwf	___awdiv@dividend,w
  5200  0BDC                     u2635:	
  5201  0BDC  1C03               	skipc
  5202  0BDD  2BE5               	goto	l2134
  5203  0BDE  0870               	movf	___awdiv@divisor,w
  5204  0BDF  02F2               	subwf	___awdiv@dividend,f
  5205  0BE0  0871               	movf	___awdiv@divisor+1,w
  5206  0BE1  1C03               	skipc
  5207  0BE2  03F3               	decf	___awdiv@dividend+1,f
  5208  0BE3  02F3               	subwf	___awdiv@dividend+1,f
  5209  0BE4  1477               	bsf	___awdiv@quotient,0
  5210  0BE5                     l2134:	
  5211  0BE5  3001               	movlw	1
  5212  0BE6                     u2645:	
  5213  0BE6  1003               	clrc
  5214  0BE7  0CF1               	rrf	___awdiv@divisor+1,f
  5215  0BE8  0CF0               	rrf	___awdiv@divisor,f
  5216  0BE9  3EFF               	addlw	-1
  5217  0BEA  1D03               	skipz
  5218  0BEB  2BE6               	goto	u2645
  5219  0BEC  3001               	movlw	1
  5220  0BED  02F5               	subwf	___awdiv@counter,f
  5221  0BEE  1D03               	btfss	3,2
  5222  0BEF  2BCF               	goto	l2128
  5223  0BF0                     l2138:	
  5224  0BF0  0876               	movf	___awdiv@sign,w
  5225  0BF1  1903               	btfsc	3,2
  5226  0BF2  2BF8               	goto	l2142
  5227  0BF3  09F7               	comf	___awdiv@quotient,f
  5228  0BF4  09F8               	comf	___awdiv@quotient+1,f
  5229  0BF5  0AF7               	incf	___awdiv@quotient,f
  5230  0BF6  1903               	skipnz
  5231  0BF7  0AF8               	incf	___awdiv@quotient+1,f
  5232  0BF8                     l2142:	
  5233  0BF8  0878               	movf	___awdiv@quotient+1,w
  5234  0BF9  00F1               	movwf	?___awdiv+1
  5235  0BFA  0877               	movf	___awdiv@quotient,w
  5236  0BFB  00F0               	movwf	?___awdiv
  5237  0BFC  0008               	return
  5238  0BFD                     __end_of___awdiv:	
  5239                           
  5240                           	psect	text25
  5241  0A40                     __ptext25:	
  5242 ;; *************** function _Lcd_Write_String *****************
  5243 ;; Defined at:
  5244 ;;		line 97 in file "lcd.h"
  5245 ;; Parameters:    Size  Location     Type
  5246 ;;  a               1    wreg     PTR unsigned char 
  5247 ;;		 -> STR_3(12), STR_2(13), STR_1(13), 
  5248 ;; Auto vars:     Size  Location     Type
  5249 ;;  a               1    7[COMMON] PTR unsigned char 
  5250 ;;		 -> STR_3(12), STR_2(13), STR_1(13), 
  5251 ;;  i               2    5[COMMON] int 
  5252 ;; Return value:  Size  Location     Type
  5253 ;;                  1    wreg      void 
  5254 ;; Registers used:
  5255 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5256 ;; Tracked objects:
  5257 ;;		On entry : 0/0
  5258 ;;		On exit  : 0/0
  5259 ;;		Unchanged: 0/0
  5260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5261 ;;      Params:         0       0       0       0       0
  5262 ;;      Locals:         3       0       0       0       0
  5263 ;;      Temps:          0       0       0       0       0
  5264 ;;      Totals:         3       0       0       0       0
  5265 ;;Total ram usage:        3 bytes
  5266 ;; Hardware stack levels used:    1
  5267 ;; Hardware stack levels required when called:    2
  5268 ;; This function calls:
  5269 ;;		_Lcd_Write_Char
  5270 ;; This function is called by:
  5271 ;;		_main
  5272 ;; This function uses a non-reentrant model
  5273 ;;
  5274                           
  5275                           
  5276                           ;psect for function _Lcd_Write_String
  5277  0A40                     _Lcd_Write_String:	
  5278                           
  5279                           ;incstack = 0
  5280                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5281                           ;Lcd_Write_String@a stored from wreg
  5282  0A40  00F7               	movwf	Lcd_Write_String@a
  5283                           
  5284                           ;lcd.h: 99: int i;
  5285                           ;lcd.h: 100: for(i=0;a[i]!='\0';i++)
  5286  0A41  01F5               	clrf	Lcd_Write_String@i
  5287  0A42  01F6               	clrf	Lcd_Write_String@i+1
  5288  0A43                     l2184:	
  5289  0A43  0875               	movf	Lcd_Write_String@i,w
  5290  0A44  0777               	addwf	Lcd_Write_String@a,w
  5291  0A45  0084               	movwf	4
  5292  0A46  120A  158A  2000  120A  158A  	fcall	stringdir
  5293  0A4B  3A00               	xorlw	0
  5294  0A4C  1903               	btfsc	3,2
  5295  0A4D  0008               	return
  5296                           
  5297                           ;lcd.h: 101: Lcd_Write_Char(a[i]);
  5298  0A4E  0875               	movf	Lcd_Write_String@i,w
  5299  0A4F  0777               	addwf	Lcd_Write_String@a,w
  5300  0A50  0084               	movwf	4
  5301  0A51  120A  158A  2000  120A  158A  	fcall	stringdir
  5302  0A56  120A  118A  2009  120A  158A  	fcall	_Lcd_Write_Char
  5303  0A5B  3001               	movlw	1
  5304  0A5C  07F5               	addwf	Lcd_Write_String@i,f
  5305  0A5D  1803               	skipnc
  5306  0A5E  0AF6               	incf	Lcd_Write_String@i+1,f
  5307  0A5F  3000               	movlw	0
  5308  0A60  07F6               	addwf	Lcd_Write_String@i+1,f
  5309  0A61  2A43               	goto	l2184
  5310  0A62                     __end_of_Lcd_Write_String:	
  5311                           
  5312                           	psect	text26
  5313  0009                     __ptext26:	
  5314 ;; *************** function _Lcd_Write_Char *****************
  5315 ;; Defined at:
  5316 ;;		line 81 in file "lcd.h"
  5317 ;; Parameters:    Size  Location     Type
  5318 ;;  a               1    wreg     unsigned char 
  5319 ;; Auto vars:     Size  Location     Type
  5320 ;;  a               1    4[COMMON] unsigned char 
  5321 ;;  y               1    3[COMMON] unsigned char 
  5322 ;;  temp            1    2[COMMON] unsigned char 
  5323 ;; Return value:  Size  Location     Type
  5324 ;;                  1    wreg      void 
  5325 ;; Registers used:
  5326 ;;		wreg, status,2, status,0, pclath, cstack
  5327 ;; Tracked objects:
  5328 ;;		On entry : 0/0
  5329 ;;		On exit  : 0/0
  5330 ;;		Unchanged: 0/0
  5331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5332 ;;      Params:         0       0       0       0       0
  5333 ;;      Locals:         3       0       0       0       0
  5334 ;;      Temps:          1       0       0       0       0
  5335 ;;      Totals:         4       0       0       0       0
  5336 ;;Total ram usage:        4 bytes
  5337 ;; Hardware stack levels used:    1
  5338 ;; Hardware stack levels required when called:    1
  5339 ;; This function calls:
  5340 ;;		_Lcd_Port
  5341 ;; This function is called by:
  5342 ;;		_Lcd_Write_String
  5343 ;;		_main
  5344 ;; This function uses a non-reentrant model
  5345 ;;
  5346                           
  5347                           
  5348                           ;psect for function _Lcd_Write_Char
  5349  0009                     _Lcd_Write_Char:	
  5350                           
  5351                           ;incstack = 0
  5352                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  5353                           ;Lcd_Write_Char@a stored from wreg
  5354  0009  00F4               	movwf	Lcd_Write_Char@a
  5355                           
  5356                           ;lcd.h: 83: char temp,y;
  5357                           ;lcd.h: 84: temp = a&0x0F;
  5358  000A  0874               	movf	Lcd_Write_Char@a,w
  5359  000B  390F               	andlw	15
  5360  000C  00F1               	movwf	??_Lcd_Write_Char
  5361  000D  0871               	movf	??_Lcd_Write_Char,w
  5362  000E  00F2               	movwf	Lcd_Write_Char@temp
  5363                           
  5364                           ;lcd.h: 85: y = a&0xF0;
  5365  000F  0874               	movf	Lcd_Write_Char@a,w
  5366  0010  39F0               	andlw	240
  5367  0011  00F1               	movwf	??_Lcd_Write_Char
  5368  0012  0871               	movf	??_Lcd_Write_Char,w
  5369  0013  00F3               	movwf	Lcd_Write_Char@y
  5370                           
  5371                           ;lcd.h: 86: RD2 = 1;
  5372  0014  1283               	bcf	3,5	;RP0=0, select bank0
  5373  0015  1303               	bcf	3,6	;RP1=0, select bank0
  5374  0016  1508               	bsf	8,2	;volatile
  5375                           
  5376                           ;lcd.h: 87: Lcd_Port(y>>4);
  5377  0017  0873               	movf	Lcd_Write_Char@y,w
  5378  0018  00F1               	movwf	??_Lcd_Write_Char
  5379  0019  3004               	movlw	4
  5380  001A                     u2555:	
  5381  001A  1003               	clrc
  5382  001B  0CF1               	rrf	??_Lcd_Write_Char,f
  5383  001C  3EFF               	addlw	-1
  5384  001D  1D03               	skipz
  5385  001E  281A               	goto	u2555
  5386  001F  0871               	movf	??_Lcd_Write_Char,w
  5387  0020  120A  158A  21AE  120A  118A  	fcall	_Lcd_Port
  5388                           
  5389                           ;lcd.h: 88: RD3 = 1;
  5390  0025  1283               	bcf	3,5	;RP0=0, select bank0
  5391  0026  1303               	bcf	3,6	;RP1=0, select bank0
  5392  0027  1588               	bsf	8,3	;volatile
  5393                           
  5394                           ;lcd.h: 89: _delay((unsigned long)((40)*(8000000/4000000.0)));
  5395  0028  301A               	movlw	26
  5396  0029  00F1               	movwf	??_Lcd_Write_Char
  5397  002A                     u2857:	
  5398  002A  0BF1               	decfsz	??_Lcd_Write_Char,f
  5399  002B  282A               	goto	u2857
  5400  002C  0000               	nop
  5401                           
  5402                           ;lcd.h: 90: RD3 = 0;
  5403  002D  1283               	bcf	3,5	;RP0=0, select bank0
  5404  002E  1303               	bcf	3,6	;RP1=0, select bank0
  5405  002F  1188               	bcf	8,3	;volatile
  5406                           
  5407                           ;lcd.h: 91: Lcd_Port(temp);
  5408  0030  0872               	movf	Lcd_Write_Char@temp,w
  5409  0031  120A  158A  21AE  120A  118A  	fcall	_Lcd_Port
  5410                           
  5411                           ;lcd.h: 92: RD3 = 1;
  5412  0036  1283               	bcf	3,5	;RP0=0, select bank0
  5413  0037  1303               	bcf	3,6	;RP1=0, select bank0
  5414  0038  1588               	bsf	8,3	;volatile
  5415                           
  5416                           ;lcd.h: 93: _delay((unsigned long)((40)*(8000000/4000000.0)));
  5417  0039  301A               	movlw	26
  5418  003A  00F1               	movwf	??_Lcd_Write_Char
  5419  003B                     u2867:	
  5420  003B  0BF1               	decfsz	??_Lcd_Write_Char,f
  5421  003C  283B               	goto	u2867
  5422  003D  0000               	nop
  5423                           
  5424                           ;lcd.h: 94: RD3 = 0;
  5425  003E  1283               	bcf	3,5	;RP0=0, select bank0
  5426  003F  1303               	bcf	3,6	;RP1=0, select bank0
  5427  0040  1188               	bcf	8,3	;volatile
  5428  0041  0008               	return
  5429  0042                     __end_of_Lcd_Write_Char:	
  5430                           
  5431                           	psect	text27
  5432  0B0F                     __ptext27:	
  5433 ;; *************** function _Lcd_Set_Cursor *****************
  5434 ;; Defined at:
  5435 ;;		line 41 in file "lcd.h"
  5436 ;; Parameters:    Size  Location     Type
  5437 ;;  a               1    wreg     unsigned char 
  5438 ;;  b               1    4[COMMON] unsigned char 
  5439 ;; Auto vars:     Size  Location     Type
  5440 ;;  a               1    7[COMMON] unsigned char 
  5441 ;;  temp            1   10[COMMON] unsigned char 
  5442 ;;  y               1    9[COMMON] unsigned char 
  5443 ;;  z               1    8[COMMON] unsigned char 
  5444 ;; Return value:  Size  Location     Type
  5445 ;;                  1    wreg      void 
  5446 ;; Registers used:
  5447 ;;		wreg, status,2, status,0, pclath, cstack
  5448 ;; Tracked objects:
  5449 ;;		On entry : 0/0
  5450 ;;		On exit  : 0/0
  5451 ;;		Unchanged: 0/0
  5452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5453 ;;      Params:         1       0       0       0       0
  5454 ;;      Locals:         4       0       0       0       0
  5455 ;;      Temps:          2       0       0       0       0
  5456 ;;      Totals:         7       0       0       0       0
  5457 ;;Total ram usage:        7 bytes
  5458 ;; Hardware stack levels used:    1
  5459 ;; Hardware stack levels required when called:    2
  5460 ;; This function calls:
  5461 ;;		_Lcd_Cmd
  5462 ;; This function is called by:
  5463 ;;		_main
  5464 ;; This function uses a non-reentrant model
  5465 ;;
  5466                           
  5467                           
  5468                           ;psect for function _Lcd_Set_Cursor
  5469  0B0F                     _Lcd_Set_Cursor:	
  5470                           
  5471                           ;incstack = 0
  5472                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  5473                           ;Lcd_Set_Cursor@a stored from wreg
  5474  0B0F  00F7               	movwf	Lcd_Set_Cursor@a
  5475                           
  5476                           ;lcd.h: 43: char temp,z,y;
  5477                           ;lcd.h: 44: if(a == 1)
  5478  0B10  0377               	decf	Lcd_Set_Cursor@a,w
  5479  0B11  1D03               	btfss	3,2
  5480  0B12  2B34               	goto	l2158
  5481                           
  5482                           ;lcd.h: 45: {
  5483                           ;lcd.h: 46: temp = 0x80 + b - 1;
  5484  0B13  0874               	movf	Lcd_Set_Cursor@b,w
  5485  0B14  3E7F               	addlw	127
  5486  0B15  00F5               	movwf	??_Lcd_Set_Cursor
  5487  0B16  0875               	movf	??_Lcd_Set_Cursor,w
  5488  0B17  00FA               	movwf	Lcd_Set_Cursor@temp
  5489                           
  5490                           ;lcd.h: 47: z = temp>>4;
  5491  0B18  087A               	movf	Lcd_Set_Cursor@temp,w
  5492  0B19  00F5               	movwf	??_Lcd_Set_Cursor
  5493  0B1A  3004               	movlw	4
  5494  0B1B                     u2685:	
  5495  0B1B  1003               	clrc
  5496  0B1C  0CF5               	rrf	??_Lcd_Set_Cursor,f
  5497  0B1D  3EFF               	addlw	-1
  5498  0B1E  1D03               	skipz
  5499  0B1F  2B1B               	goto	u2685
  5500  0B20  0875               	movf	??_Lcd_Set_Cursor,w
  5501  0B21  00F6               	movwf	??_Lcd_Set_Cursor+1
  5502  0B22  0876               	movf	??_Lcd_Set_Cursor+1,w
  5503  0B23  00F8               	movwf	Lcd_Set_Cursor@z
  5504                           
  5505                           ;lcd.h: 48: y = temp & 0x0F;
  5506  0B24  087A               	movf	Lcd_Set_Cursor@temp,w
  5507  0B25  390F               	andlw	15
  5508  0B26  00F5               	movwf	??_Lcd_Set_Cursor
  5509  0B27  0875               	movf	??_Lcd_Set_Cursor,w
  5510  0B28  00F9               	movwf	Lcd_Set_Cursor@y
  5511                           
  5512                           ;lcd.h: 49: Lcd_Cmd(z);
  5513  0B29  0878               	movf	Lcd_Set_Cursor@z,w
  5514  0B2A  120A  158A  21C8  120A  158A  	fcall	_Lcd_Cmd
  5515                           
  5516                           ;lcd.h: 50: Lcd_Cmd(y);
  5517  0B2F  0879               	movf	Lcd_Set_Cursor@y,w
  5518  0B30  120A  158A  21C8   	fcall	_Lcd_Cmd
  5519                           
  5520                           ;lcd.h: 51: }
  5521  0B33  0008               	return
  5522  0B34                     l2158:	
  5523                           
  5524                           ;lcd.h: 52: else if(a == 2)
  5525  0B34  3002               	movlw	2
  5526  0B35  0677               	xorwf	Lcd_Set_Cursor@a,w
  5527  0B36  1D03               	btfss	3,2
  5528  0B37  0008               	return
  5529                           
  5530                           ;lcd.h: 53: {
  5531                           ;lcd.h: 54: temp = 0xC0 + b - 1;
  5532  0B38  0874               	movf	Lcd_Set_Cursor@b,w
  5533  0B39  3EBF               	addlw	191
  5534  0B3A  00F5               	movwf	??_Lcd_Set_Cursor
  5535  0B3B  0875               	movf	??_Lcd_Set_Cursor,w
  5536  0B3C  00FA               	movwf	Lcd_Set_Cursor@temp
  5537                           
  5538                           ;lcd.h: 55: z = temp>>4;
  5539  0B3D  087A               	movf	Lcd_Set_Cursor@temp,w
  5540  0B3E  00F5               	movwf	??_Lcd_Set_Cursor
  5541  0B3F  3004               	movlw	4
  5542  0B40                     u2705:	
  5543  0B40  1003               	clrc
  5544  0B41  0CF5               	rrf	??_Lcd_Set_Cursor,f
  5545  0B42  3EFF               	addlw	-1
  5546  0B43  1D03               	skipz
  5547  0B44  2B40               	goto	u2705
  5548  0B45  0875               	movf	??_Lcd_Set_Cursor,w
  5549  0B46  00F6               	movwf	??_Lcd_Set_Cursor+1
  5550  0B47  0876               	movf	??_Lcd_Set_Cursor+1,w
  5551  0B48  00F8               	movwf	Lcd_Set_Cursor@z
  5552                           
  5553                           ;lcd.h: 56: y = temp & 0x0F;
  5554  0B49  087A               	movf	Lcd_Set_Cursor@temp,w
  5555  0B4A  390F               	andlw	15
  5556  0B4B  00F5               	movwf	??_Lcd_Set_Cursor
  5557  0B4C  0875               	movf	??_Lcd_Set_Cursor,w
  5558  0B4D  00F9               	movwf	Lcd_Set_Cursor@y
  5559                           
  5560                           ;lcd.h: 57: Lcd_Cmd(z);
  5561  0B4E  0878               	movf	Lcd_Set_Cursor@z,w
  5562  0B4F  120A  158A  21C8  120A  158A  	fcall	_Lcd_Cmd
  5563                           
  5564                           ;lcd.h: 58: Lcd_Cmd(y);
  5565  0B54  0879               	movf	Lcd_Set_Cursor@y,w
  5566  0B55  120A  158A  21C8   	fcall	_Lcd_Cmd
  5567  0B58  0008               	return
  5568  0B59                     __end_of_Lcd_Set_Cursor:	
  5569                           
  5570                           	psect	text28
  5571  0BFD                     __ptext28:	
  5572 ;; *************** function _Lcd_Init *****************
  5573 ;; Defined at:
  5574 ;;		line 62 in file "lcd.h"
  5575 ;; Parameters:    Size  Location     Type
  5576 ;;		None
  5577 ;; Auto vars:     Size  Location     Type
  5578 ;;		None
  5579 ;; Return value:  Size  Location     Type
  5580 ;;                  1    wreg      void 
  5581 ;; Registers used:
  5582 ;;		wreg, status,2, status,0, pclath, cstack
  5583 ;; Tracked objects:
  5584 ;;		On entry : 0/0
  5585 ;;		On exit  : 0/0
  5586 ;;		Unchanged: 0/0
  5587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5588 ;;      Params:         0       0       0       0       0
  5589 ;;      Locals:         0       0       0       0       0
  5590 ;;      Temps:          2       0       0       0       0
  5591 ;;      Totals:         2       0       0       0       0
  5592 ;;Total ram usage:        2 bytes
  5593 ;; Hardware stack levels used:    1
  5594 ;; Hardware stack levels required when called:    2
  5595 ;; This function calls:
  5596 ;;		_Lcd_Cmd
  5597 ;;		_Lcd_Port
  5598 ;; This function is called by:
  5599 ;;		_main
  5600 ;; This function uses a non-reentrant model
  5601 ;;
  5602                           
  5603                           
  5604                           ;psect for function _Lcd_Init
  5605  0BFD                     _Lcd_Init:	
  5606                           
  5607                           ;lcd.h: 64: Lcd_Port(0x00);
  5608                           
  5609                           ;incstack = 0
  5610                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  5611  0BFD  3000               	movlw	0
  5612  0BFE  120A  158A  21AE  120A  158A  	fcall	_Lcd_Port
  5613                           
  5614                           ;lcd.h: 65: _delay((unsigned long)((20)*(8000000/4000.0)));
  5615  0C03  3034               	movlw	52
  5616  0C04  00F5               	movwf	??_Lcd_Init+1
  5617  0C05  30F1               	movlw	241
  5618  0C06  00F4               	movwf	??_Lcd_Init
  5619  0C07                     u2877:	
  5620  0C07  0BF4               	decfsz	??_Lcd_Init,f
  5621  0C08  2C07               	goto	u2877
  5622  0C09  0BF5               	decfsz	??_Lcd_Init+1,f
  5623  0C0A  2C07               	goto	u2877
  5624  0C0B  2C0C               	nop2
  5625                           
  5626                           ;lcd.h: 66: Lcd_Cmd(0x03);
  5627  0C0C  3003               	movlw	3
  5628  0C0D  120A  158A  21C8  120A  158A  	fcall	_Lcd_Cmd
  5629                           
  5630                           ;lcd.h: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  5631  0C12  300D               	movlw	13
  5632  0C13  00F5               	movwf	??_Lcd_Init+1
  5633  0C14  30FB               	movlw	251
  5634  0C15  00F4               	movwf	??_Lcd_Init
  5635  0C16                     u2887:	
  5636  0C16  0BF4               	decfsz	??_Lcd_Init,f
  5637  0C17  2C16               	goto	u2887
  5638  0C18  0BF5               	decfsz	??_Lcd_Init+1,f
  5639  0C19  2C16               	goto	u2887
  5640  0C1A  2C1B               	nop2
  5641                           
  5642                           ;lcd.h: 68: Lcd_Cmd(0x03);
  5643  0C1B  3003               	movlw	3
  5644  0C1C  120A  158A  21C8  120A  158A  	fcall	_Lcd_Cmd
  5645                           
  5646                           ;lcd.h: 69: _delay((unsigned long)((11)*(8000000/4000.0)));
  5647  0C21  301D               	movlw	29
  5648  0C22  00F5               	movwf	??_Lcd_Init+1
  5649  0C23  3091               	movlw	145
  5650  0C24  00F4               	movwf	??_Lcd_Init
  5651  0C25                     u2897:	
  5652  0C25  0BF4               	decfsz	??_Lcd_Init,f
  5653  0C26  2C25               	goto	u2897
  5654  0C27  0BF5               	decfsz	??_Lcd_Init+1,f
  5655  0C28  2C25               	goto	u2897
  5656                           
  5657                           ;lcd.h: 70: Lcd_Cmd(0x03);
  5658  0C29  3003               	movlw	3
  5659  0C2A  120A  158A  21C8  120A  158A  	fcall	_Lcd_Cmd
  5660                           
  5661                           ;lcd.h: 72: Lcd_Cmd(0x02);
  5662  0C2F  3002               	movlw	2
  5663  0C30  120A  158A  21C8  120A  158A  	fcall	_Lcd_Cmd
  5664                           
  5665                           ;lcd.h: 73: Lcd_Cmd(0x02);
  5666  0C35  3002               	movlw	2
  5667  0C36  120A  158A  21C8  120A  158A  	fcall	_Lcd_Cmd
  5668                           
  5669                           ;lcd.h: 74: Lcd_Cmd(0x08);
  5670  0C3B  3008               	movlw	8
  5671  0C3C  120A  158A  21C8  120A  158A  	fcall	_Lcd_Cmd
  5672                           
  5673                           ;lcd.h: 75: Lcd_Cmd(0x00);
  5674  0C41  3000               	movlw	0
  5675  0C42  120A  158A  21C8  120A  158A  	fcall	_Lcd_Cmd
  5676                           
  5677                           ;lcd.h: 76: Lcd_Cmd(0x0C);
  5678  0C47  300C               	movlw	12
  5679  0C48  120A  158A  21C8  120A  158A  	fcall	_Lcd_Cmd
  5680                           
  5681                           ;lcd.h: 77: Lcd_Cmd(0x00);
  5682  0C4D  3000               	movlw	0
  5683  0C4E  120A  158A  21C8  120A  158A  	fcall	_Lcd_Cmd
  5684                           
  5685                           ;lcd.h: 78: Lcd_Cmd(0x06);
  5686  0C53  3006               	movlw	6
  5687  0C54  120A  158A  21C8   	fcall	_Lcd_Cmd
  5688  0C57  0008               	return
  5689  0C58                     __end_of_Lcd_Init:	
  5690                           
  5691                           	psect	text29
  5692  0992                     __ptext29:	
  5693 ;; *************** function _Lcd_Clear *****************
  5694 ;; Defined at:
  5695 ;;		line 35 in file "lcd.h"
  5696 ;; Parameters:    Size  Location     Type
  5697 ;;		None
  5698 ;; Auto vars:     Size  Location     Type
  5699 ;;		None
  5700 ;; Return value:  Size  Location     Type
  5701 ;;                  2   52[None  ] int 
  5702 ;; Registers used:
  5703 ;;		wreg, status,2, status,0, pclath, cstack
  5704 ;; Tracked objects:
  5705 ;;		On entry : 0/0
  5706 ;;		On exit  : 0/0
  5707 ;;		Unchanged: 0/0
  5708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5709 ;;      Params:         0       0       0       0       0
  5710 ;;      Locals:         0       0       0       0       0
  5711 ;;      Temps:          0       0       0       0       0
  5712 ;;      Totals:         0       0       0       0       0
  5713 ;;Total ram usage:        0 bytes
  5714 ;; Hardware stack levels used:    1
  5715 ;; Hardware stack levels required when called:    2
  5716 ;; This function calls:
  5717 ;;		_Lcd_Cmd
  5718 ;; This function is called by:
  5719 ;;		_main
  5720 ;; This function uses a non-reentrant model
  5721 ;;
  5722                           
  5723                           
  5724                           ;psect for function _Lcd_Clear
  5725  0992                     _Lcd_Clear:	
  5726                           
  5727                           ;lcd.h: 37: Lcd_Cmd(0);
  5728                           
  5729                           ;incstack = 0
  5730                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  5731  0992  3000               	movlw	0
  5732  0993  120A  158A  21C8  120A  158A  	fcall	_Lcd_Cmd
  5733                           
  5734                           ;lcd.h: 38: Lcd_Cmd(1);
  5735  0998  3001               	movlw	1
  5736  0999  120A  158A  21C8   	fcall	_Lcd_Cmd
  5737  099C  0008               	return
  5738  099D                     __end_of_Lcd_Clear:	
  5739                           
  5740                           	psect	text30
  5741  09C8                     __ptext30:	
  5742 ;; *************** function _Lcd_Cmd *****************
  5743 ;; Defined at:
  5744 ;;		line 26 in file "lcd.h"
  5745 ;; Parameters:    Size  Location     Type
  5746 ;;  a               1    wreg     unsigned char 
  5747 ;; Auto vars:     Size  Location     Type
  5748 ;;  a               1    3[COMMON] unsigned char 
  5749 ;; Return value:  Size  Location     Type
  5750 ;;                  1    wreg      void 
  5751 ;; Registers used:
  5752 ;;		wreg, status,2, status,0, pclath, cstack
  5753 ;; Tracked objects:
  5754 ;;		On entry : 0/0
  5755 ;;		On exit  : 0/0
  5756 ;;		Unchanged: 0/0
  5757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5758 ;;      Params:         0       0       0       0       0
  5759 ;;      Locals:         1       0       0       0       0
  5760 ;;      Temps:          2       0       0       0       0
  5761 ;;      Totals:         3       0       0       0       0
  5762 ;;Total ram usage:        3 bytes
  5763 ;; Hardware stack levels used:    1
  5764 ;; Hardware stack levels required when called:    1
  5765 ;; This function calls:
  5766 ;;		_Lcd_Port
  5767 ;; This function is called by:
  5768 ;;		_Lcd_Clear
  5769 ;;		_Lcd_Set_Cursor
  5770 ;;		_Lcd_Init
  5771 ;;		_Lcd_Shift_Right
  5772 ;;		_Lcd_Shift_Left
  5773 ;; This function uses a non-reentrant model
  5774 ;;
  5775                           
  5776                           
  5777                           ;psect for function _Lcd_Cmd
  5778  09C8                     _Lcd_Cmd:	
  5779                           
  5780                           ;incstack = 0
  5781                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  5782                           ;Lcd_Cmd@a stored from wreg
  5783  09C8  00F3               	movwf	Lcd_Cmd@a
  5784                           
  5785                           ;lcd.h: 28: RD2 = 0;
  5786  09C9  1283               	bcf	3,5	;RP0=0, select bank0
  5787  09CA  1303               	bcf	3,6	;RP1=0, select bank0
  5788  09CB  1108               	bcf	8,2	;volatile
  5789                           
  5790                           ;lcd.h: 29: Lcd_Port(a);
  5791  09CC  0873               	movf	Lcd_Cmd@a,w
  5792  09CD  120A  158A  21AE  120A  158A  	fcall	_Lcd_Port
  5793                           
  5794                           ;lcd.h: 30: RD3 = 1;
  5795  09D2  1283               	bcf	3,5	;RP0=0, select bank0
  5796  09D3  1303               	bcf	3,6	;RP1=0, select bank0
  5797  09D4  1588               	bsf	8,3	;volatile
  5798                           
  5799                           ;lcd.h: 31: _delay((unsigned long)((4)*(8000000/4000.0)));
  5800  09D5  300B               	movlw	11
  5801  09D6  00F2               	movwf	??_Lcd_Cmd+1
  5802  09D7  3062               	movlw	98
  5803  09D8  00F1               	movwf	??_Lcd_Cmd
  5804  09D9                     u2907:	
  5805  09D9  0BF1               	decfsz	??_Lcd_Cmd,f
  5806  09DA  29D9               	goto	u2907
  5807  09DB  0BF2               	decfsz	??_Lcd_Cmd+1,f
  5808  09DC  29D9               	goto	u2907
  5809  09DD  0000               	nop
  5810                           
  5811                           ;lcd.h: 32: RD3 = 0;
  5812  09DE  1283               	bcf	3,5	;RP0=0, select bank0
  5813  09DF  1303               	bcf	3,6	;RP1=0, select bank0
  5814  09E0  1188               	bcf	8,3	;volatile
  5815  09E1  0008               	return
  5816  09E2                     __end_of_Lcd_Cmd:	
  5817                           
  5818                           	psect	text31
  5819  09AE                     __ptext31:	
  5820 ;; *************** function _Lcd_Port *****************
  5821 ;; Defined at:
  5822 ;;		line 4 in file "lcd.h"
  5823 ;; Parameters:    Size  Location     Type
  5824 ;;  a               1    wreg     unsigned char 
  5825 ;; Auto vars:     Size  Location     Type
  5826 ;;  a               1    0[COMMON] unsigned char 
  5827 ;; Return value:  Size  Location     Type
  5828 ;;                  1    wreg      void 
  5829 ;; Registers used:
  5830 ;;		wreg
  5831 ;; Tracked objects:
  5832 ;;		On entry : 0/0
  5833 ;;		On exit  : 0/0
  5834 ;;		Unchanged: 0/0
  5835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5836 ;;      Params:         0       0       0       0       0
  5837 ;;      Locals:         1       0       0       0       0
  5838 ;;      Temps:          0       0       0       0       0
  5839 ;;      Totals:         1       0       0       0       0
  5840 ;;Total ram usage:        1 bytes
  5841 ;; Hardware stack levels used:    1
  5842 ;; This function calls:
  5843 ;;		Nothing
  5844 ;; This function is called by:
  5845 ;;		_Lcd_Cmd
  5846 ;;		_Lcd_Init
  5847 ;;		_Lcd_Write_Char
  5848 ;; This function uses a non-reentrant model
  5849 ;;
  5850                           
  5851                           
  5852                           ;psect for function _Lcd_Port
  5853  09AE                     _Lcd_Port:	
  5854                           
  5855                           ;incstack = 0
  5856                           ; Regs used in _Lcd_Port: [wreg]
  5857                           ;Lcd_Port@a stored from wreg
  5858  09AE  00F0               	movwf	Lcd_Port@a
  5859                           
  5860                           ;lcd.h: 6: if(a & 1)
  5861  09AF  1C70               	btfss	Lcd_Port@a,0
  5862  09B0  29B5               	goto	l39
  5863                           
  5864                           ;lcd.h: 7: RD4 = 1;
  5865  09B1  1283               	bcf	3,5	;RP0=0, select bank0
  5866  09B2  1303               	bcf	3,6	;RP1=0, select bank0
  5867  09B3  1608               	bsf	8,4	;volatile
  5868  09B4  29B8               	goto	l40
  5869  09B5                     l39:	
  5870                           
  5871                           ;lcd.h: 8: else
  5872                           ;lcd.h: 9: RD4 = 0;
  5873  09B5  1283               	bcf	3,5	;RP0=0, select bank0
  5874  09B6  1303               	bcf	3,6	;RP1=0, select bank0
  5875  09B7  1208               	bcf	8,4	;volatile
  5876  09B8                     l40:	
  5877                           
  5878                           ;lcd.h: 11: if(a & 2)
  5879  09B8  1CF0               	btfss	Lcd_Port@a,1
  5880  09B9  29BC               	goto	l41
  5881                           
  5882                           ;lcd.h: 12: RD5 = 1;
  5883  09BA  1688               	bsf	8,5	;volatile
  5884  09BB  29BD               	goto	l42
  5885  09BC                     l41:	
  5886                           
  5887                           ;lcd.h: 13: else
  5888                           ;lcd.h: 14: RD5 = 0;
  5889  09BC  1288               	bcf	8,5	;volatile
  5890  09BD                     l42:	
  5891                           
  5892                           ;lcd.h: 16: if(a & 4)
  5893  09BD  1D70               	btfss	Lcd_Port@a,2
  5894  09BE  29C1               	goto	l43
  5895                           
  5896                           ;lcd.h: 17: RD6 = 1;
  5897  09BF  1708               	bsf	8,6	;volatile
  5898  09C0  29C2               	goto	l44
  5899  09C1                     l43:	
  5900                           
  5901                           ;lcd.h: 18: else
  5902                           ;lcd.h: 19: RD6 = 0;
  5903  09C1  1308               	bcf	8,6	;volatile
  5904  09C2                     l44:	
  5905                           
  5906                           ;lcd.h: 21: if(a & 8)
  5907  09C2  1DF0               	btfss	Lcd_Port@a,3
  5908  09C3  29C6               	goto	l45
  5909                           
  5910                           ;lcd.h: 22: RD7 = 1;
  5911  09C4  1788               	bsf	8,7	;volatile
  5912  09C5  0008               	return
  5913  09C6                     l45:	
  5914                           
  5915                           ;lcd.h: 23: else
  5916                           ;lcd.h: 24: RD7 = 0;
  5917  09C6  1388               	bcf	8,7	;volatile
  5918  09C7  0008               	return
  5919  09C8                     __end_of_Lcd_Port:	
  5920  007E                     btemp	set	126	;btemp
  5921  007E                     wtemp	set	126
  5922  007E                     wtemp0	set	126
  5923  0080                     wtemp1	set	128
  5924  0082                     wtemp2	set	130
  5925  0084                     wtemp3	set	132
  5926  0086                     wtemp4	set	134
  5927  0088                     wtemp5	set	136
  5928  007F                     wtemp6	set	127
  5929  007E                     ttemp	set	126
  5930  007E                     ttemp0	set	126
  5931  0081                     ttemp1	set	129
  5932  0084                     ttemp2	set	132
  5933  0087                     ttemp3	set	135
  5934  007F                     ttemp4	set	127
  5935  007E                     ltemp	set	126
  5936  007E                     ltemp0	set	126
  5937  0082                     ltemp1	set	130
  5938  0086                     ltemp2	set	134
  5939  0080                     ltemp3	set	128


Data Sizes:
    Strings     38
    Constant    57
    Data        5
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     80      80
    BANK1            80     29      38
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(1) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 13
		 -> STR_3(CODE[12]), STR_2(CODE[13]), STR_1(CODE[13]), 


Critical Paths under _main in COMMON

    _Process->___awtoft
    _analogRead->___awtoft
    _pow->___lltoft
    _log->___awtoft
    _exp->___awtoft
    ___ftge->___awtoft
    ___ftmul->___awtoft
    ___ftsub->___awtoft
    ___ftadd->___awtoft
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _analogRead->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftmul
    ___ftge->___ftmul
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___ftdiv->___ftmul

Critical Paths under _main in BANK1

    _main->_Process
    _Process->_analogRead

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   84144
                                             26 BANK1      3     3      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                            _Process
                         _Sharp_Init
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4     808
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) _Sharp_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Process                                             15    13      2   80852
                                             11 BANK1     15    13      2
                            ___awdiv
                           ___awtoft
                             ___ftge
                            ___ftmul
                         _analogRead
 ---------------------------------------------------------------------------------
 (2) _analogRead                                          11     9      2   72172
                                              0 BANK1     11     9      2
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (3) _pow                                                 18    12      6   62666
                                             62 BANK0     18    12      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (4) _log                                                  6     3      3   19931
                                             39 BANK0      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _exp                                                 13    10      3   34142
                                             49 BANK0     13    10      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (5) _ldexp                                               10     5      5    2117
                                             39 BANK0     10     5      5
                             ___ftge
                            ___ftneg
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftneg                                              3     0      3     301
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (5) _floor                                                9     6      3    8697
                                             38 BANK0      9     6      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                6     2      4     480
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     508
                                             16 BANK0     14    10      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftge                                              12     6      6    1416
                                             16 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___altoft                                             8     4      4    2350
                                             30 BANK0      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           10     4      6    7968
                                             29 BANK0     10     4      6
                             ___bmul
                            ___ftadd
                            ___ftmul
 ---------------------------------------------------------------------------------
 (6) ___ftmul                                             16    10      6    3600
                                              0 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     178
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (5) ___ftsub                                              6     0      6    3823
                                             29 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (6) ___ftadd                                             13     7      6    3628
                                             16 BANK0     13     7      6
                           ___awtoft (ARG)
                             ___bmul (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftdiv                                             16    10      6    2684
                                             16 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___awtoft                                             6     3      3    2559
                                              8 COMMON     6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             6     2      4    2281
                                              8 COMMON     6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2148
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     812
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     3     3      0     358
                                              5 COMMON     3     3      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     828
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _Process
     ___awdiv
     ___awtoft
       ___ftpack
     ___ftge
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     _analogRead
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
       _pow
         ___ftge
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
         ___fttol
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         ___lltoft
           ___ftpack
         _exp
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
           ___ftge
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
           ___fttol
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _eval_poly
             ___bmul
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _floor
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             ___fttol
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             _frexp
           _ldexp
             ___ftge
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             ___ftneg
             _eval_poly (ARG)
               ___bmul
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___bmul (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
           _log (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftge
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___bmul
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___bmul (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
             _frexp
         _log
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftge
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___bmul
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp
   _Sharp_Init
   ___awdiv
   ___awmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     1D      26       7       47.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     50      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      84      12        0.0%
ABS                  0      0      84       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Wed Dec 14 08:35:22 2016

             ___altoft@exp 0044                          _a 00C2                          pc 0002  
           ___bmul@product 0072                __CFG_CP$OFF 0000              ___altoft@sign 0045  
                       l40 09B8                         l41 09BC                         l42 09BD  
                       l43 09C1                         l44 09C2                         l45 09C6  
                       l39 09B5               ___awdiv@sign 0076                         fsr 0004  
             ___ftadd@exp1 003C               ___ftadd@exp2 003B               ___ftadd@sign 003A  
                      l350 0CED                        l441 0E10                        l357 0D02  
                      l381 04FE                        l358 0D0A                        l553 037F  
                      _RD2 0042                        _RD3 0043                        _RD4 0044  
                      _RD5 0045                        _RD6 0046                        _RD7 0047  
             __CFG_CPD$OFF 0000                        _avg 00C0                        _exp 0693  
                      _log 01BD                        _pow 035E                        fsr0 0004  
                      _tol 00BD                        indf 0000               ___awmod@sign 0076  
             __CFG_FOSC$HS 0000               __CFG_LVP$OFF 0000               ___ftdiv@cntr 003A  
             ___ftdiv@sign 003F                       l2002 07C2                       l2110 0BAE  
                     l2040 03E8                       l2032 0394                       l2026 0388  
                     l2116 0BB9                       l2044 0400                       l2220 0FE8  
                     l2142 0BF8                       l2134 0BE5                       l2126 0BC1  
                     l1510 0CC6                       l2128 0BCF                       l1520 0CF2  
                     l1512 0CD2                       l1600 04D0                       l2216 0FDF  
                     l2138 0BF0                       l1522 0CFC                       l1514 0CD7  
                     l1506 0CBF                       l1610 04EE                       l1602 04D5  
                     l2218 0F64                       l2234 0B63                       l1620 0522  
                     l1612 04FA                       l1604 04D9                       l1540 09A5  
                     l2092 010C                       l2260 0B9F                       l2252 0B8C  
                     l2158 0B34                       l1630 0545                       l2246 0B70  
                     l2238 0B6A                       l2184 0A43                       l1616 0510  
                     l1536 099F                       l1560 0AF5                       l2248 0B7E  
                     l2256 0B97                       l1570 047F                       l1642 0CA8  
                     l1820 00D4                       l1812 00B5                       l1580 0495  
                     l1660 02A3                       l1574 0486                       l1558 0AE3  
                     l1638 0C81                       l1750 0E21                       l1718 0DB6  
                     l1910 0F3A                       l2286 059C                       l1592 04AF  
                     l1832 0A28                       l1744 0E05                       l1736 0DE8  
                     l1690 0320                       l1682 0308                       l1666 02B9  
                     l1746 0E13                       l1738 0DF8                       l1762 0A9F  
                     l1850 0E64                       l1914 0F43                       l1924 0A66  
                     l1860 0EBA                       l1926 0A78                       l1782 0A08  
                     l1598 04C4                       l1694 0330                       l1678 02F8  
                     l1870 0D95                       l1846 0E5B                       l1942 01F7  
                     l1792 005A                       l1880 0ED1                       l1936 01E1  
                     l1890 0EFA                       l1980 0719                       l1798 0070  
                     l1974 06E6                       l1958 06A1                       l1968 06C2  
                     ?_exp 0051                       ?_log 0047                       ?_pow 005E  
                     STR_1 084C                       STR_2 083F                       STR_3 0859  
                     u2005 0339                       u2105 0E07                       u2205 00C7  
                     u2045 0DBD                       u2215 00D5                       u2400 06FD  
                     u2410 06FE                       u2075 0DE9                       u2315 0F03  
                     u1525 0D11                       u1445 0CCB                       u2335 0A6B  
                     u2175 0082                       u1465 0CE6                       u2185 0094  
                     u2195 00B6                       u1715 04C5                       u2605 0BC4  
                     u1485 0CF5                       u2445 07B9                       u1575 0AE8  
                     u2535 03D7                       u2705 0B40                       u2625 0BD0  
                     u1745 04DA                       u1905 02C5                       u1841 0C74  
                     u1842 0C75                       u2555 001A                       u2635 0BDC  
                     u1915 02D7                       u1843 0C7A                       u1844 0C7B  
                     u2645 0BE6                       u1685 04B0                       u1861 0C9B  
                     u2805 0B8D                       u1862 0C9C                       u1775 04EF  
                     u1863 0CA1                       u2735 0F6E                       u1864 0CA2  
                     u1945 0309                       u2907 09D9                       u1955 0311  
                     u2685 0B1B                       u2837 0590                       u2775 0B73  
                     u2847 068A                       u2857 002A                       u2867 003B  
                     u1995 0331                       u2795 0B84                       u2877 0C07  
                     u2887 0C16                       u2897 0C25               __CFG_WRT$OFF 0000  
        ?_Lcd_Write_String 0070                       _main 055F               ___ftpack@arg 0070  
             ___ftpack@exp 0073                       btemp 007E                       exp@x 0051  
                     log@x 0047                       ltemp 007E                       pow@x 005E  
                     pow@y 0061                       start 0000                       ttemp 007E  
       ??_Lcd_Write_String 0075                       wtemp 007E              __CFG_IESO$OFF 0000  
          __end_of_Lcd_Cmd 09E2          ___bmul@multiplier 0073              __CFG_MCLRE$ON 0000  
             ___ftmul@cntr 002E               ___ftmul@sign 002F               ___fttol@exp1 003D  
                    ??_exp 0054                      ??_log 004A               ___fttol@lval 0039  
                    ??_pow 0064            __end_of_Process 1000                      ?_main 0070  
          __end_of___awdiv 0BFD            __end_of___ftadd 055F              __CFG_WDTE$OFF 0000  
          __end_of___awmod 0BA4            __end_of___ftdiv 00FA            __end_of___ftneg 0992  
                    _ANSEL 0188            __end_of___ftmul 035E            ___awdiv@divisor 0070  
          __end_of___ftsub 0A40            __end_of___fttol 0E2A            ___awdiv@counter 0075  
  __size_of_Lcd_Set_Cursor 004A                      _TRISA 0085                      _TRISD 0088  
             ___lltoft@exp 007D             __CFG_FCMEN$OFF 0000              ___awtoft@sign 007D  
                    _floor 0E2A                      _ldexp 0EC3                      _frexp 0A8D  
                    _errno 00C4              ___ftpack@sign 0074             __CFG_BOREN$OFF 0000  
                    pclath 000A                      ltemp0 007E                      ltemp1 0082  
                    ltemp2 0086                      ltemp3 0080                      pow@yi 006C  
                    ttemp0 007E                      ttemp1 0081                      ttemp2 0084  
                    ttemp3 0087                      ttemp4 007F                      status 0003  
                    wtemp0 007E                      wtemp1 0080                      wtemp2 0082  
                    wtemp3 0084                      wtemp4 0086                      wtemp5 0088  
                    wtemp6 007F                exp@exponent 005B           __end_of_Lcd_Init 0C58  
         __end_of_Lcd_Port 09C8                ldexp@newexp 004A            __initialization 07DA  
              log@exponent 004B               __end_of_main 0693                     ??_main 00BA  
            ___fttol@sign1 0038         __size_of_Lcd_Clear 000B             _analogRead$732 00A6  
                   ?_floor 0046                     ?_ldexp 0047                     ?_frexp 0070  
         __end_of___altoft 0B0F                     _ADRESH 001E                     _ADRESL 009E  
         ___awdiv@dividend 0072           __end_of___awtoft 0A1F           __end_of___ftpack 0D23  
                   _ANSELH 0189           __end_of___lltoft 0A8D                  ??_Lcd_Cmd 0071  
               _Sharp_Init 09E2    __size_of_Lcd_Write_Char 0039             __CFG_PWRTE$OFF 0000  
                ??_Process 00AD                     ___bmul 099D                     ___ftge 0C58  
                ??___awdiv 0074                  ??___ftadd 0036                  ??___awmod 0074  
                ??___ftdiv 0036                  ??___ftneg 0073                  ??___ftmul 0026  
                ??___ftsub 007E                  ??___fttol 0034           ___awdiv@quotient 0077  
          ___awmod@divisor 0070            ___awmod@counter 0075                 Process@foo 00B8  
               Process@sum 00B6                     floor@i 004A          analogRead@channel 00A0  
                   floor@x 0046      ___ftmul@f3_as_product 002B    Process@accurateDistance 00B0  
          Lcd_Set_Cursor@a 0077            Lcd_Set_Cursor@b 0074            Lcd_Set_Cursor@y 0079  
          Lcd_Set_Cursor@z 0078           __end_ofexp@coeff 0824           __end_oflog@coeff 083F  
  __end_of__initialization 07FC                 ___altoft@c 003E                 ___ftadd@f1 0030  
               ___ftadd@f2 0033                 ___ftge@ff1 0030                 ___ftge@ff2 0033  
        __end_of_Lcd_Clear 099D               eval_poly@res 0044                 ___ftdiv@f1 0033  
               ___ftdiv@f2 0030                 ___ftdiv@f3 003B                 ___ftneg@f1 0070  
               ___awtoft@c 0078        ___bmul@multiplicand 0070                 ___ftmul@f1 0020  
               ___ftmul@f2 0023                 ___ftsub@f1 0040                 ___ftsub@f2 003D  
               ___fttol@f1 0030             __pcstackCOMMON 0070               __pidataBANK1 0004  
               ___lltoft@c 0078              __end_of_floor 0EC3              __end_of_ldexp 0F5C  
            __end_of_frexp 0ACD             _Lcd_Set_Cursor 0B0F                  ?_Lcd_Init 0070  
                ?_Lcd_Port 0070                    ??_floor 0049                    ??_ldexp 004C  
                  ??_frexp 0074                 __pbssBANK1 00C2         __size_of_eval_poly 0079  
              ?_Sharp_Init 0070                 _analogRead 00FA                 __pmaintext 055F  
                  ?___bmul 0070                    ?___ftge 0030                  ?___altoft 003E  
__size_of_Lcd_Write_String 0022                  ?___awtoft 0078                  ?___ftpack 0070  
   __end_of_Lcd_Set_Cursor 0B59                  ?___lltoft 0078                 ??_Lcd_Init 0074  
               ??_Lcd_Port 0070                 __stringtab 0800             _Lcd_Write_Char 0009  
                  _Lcd_Cmd 09C8                    _Process 0F5C            __size_of___bmul 0011  
          __size_of___ftge 005F                    ___awdiv 0BA4                    ___ftadd 0456  
                  ___awmod 0B59                    ___ftdiv 0042                    ___ftneg 098A  
                  ___ftmul 028B                    ___ftsub 0A1F                    ___fttol 0D9C  
               ??___altoft 0042                    _exp$504 0058                    _exp$735 0055  
               ??___awtoft 007B                 ??___ftpack 0075                  _ANSELbits 0188  
        __end_of_eval_poly 0D9C            ?_Lcd_Set_Cursor 0074                 ??___lltoft 007C  
                  __ptext1 0B59                    __ptext2 09E2                    __ptext3 0F5C  
                  __ptext4 00FA                    __ptext5 035E                    __ptext6 01BD  
                  __ptext7 0693                    __ptext8 0EC3                    __ptext9 098A  
                  _pow$733 0065                    _pow$734 0068        __size_of_Sharp_Init 001C  
             __size_of_exp 0147               __size_of_log 00CE               __size_of_pow 00F8  
         ___awmod@dividend 0072     __end_of_Lcd_Write_Char 0042       end_of_initialization 07FC  
                  exp@sign 005D              analogRead@raw 00A9                ?_analogRead 00A0  
                  pow@sign 006B                  Lcd_Port@a 0070             Process@channel 00AB  
                _TRISAbits 0085            ?_Lcd_Write_Char 0070          Lcd_Write_String@a 0077  
        Lcd_Write_String@i 0075                ___ftdiv@exp 003E                ___ftmul@exp 002A  
                _Lcd_Clear 0992             __end_of___bmul 09AE             __end_of___ftge 0CB7  
         _Lcd_Write_String 0A40                 floor@expon 004D        __size_of_analogRead 00C3  
      start_initialization 07DA                 eval_poly@d 0040                 eval_poly@n 0041  
               eval_poly@x 003D                 ldexp@value 0047                __end_of_exp 07DA  
              __end_of_log 028B                __end_of_pow 0456          __size_of_Lcd_Init 005B  
        __size_of_Lcd_Port 001A                 frexp@value 0070               ??_Sharp_Init 0070  
               ?_Lcd_Clear 0070                   ??___bmul 0071                   ??___ftge 0036  
              __pdataBANK1 00BD            Lcd_Write_Char@a 0074            Lcd_Write_Char@y 0073  
        __size_of___altoft 0042          __size_of___awtoft 0021          __size_of___ftpack 006C  
       __end_of_Sharp_Init 09FE          __size_of___lltoft 002B                  ___latbits 0002  
            __pcstackBANK0 0020              __pcstackBANK1 00A0                   ?_Lcd_Cmd 0070  
         ??_Lcd_Set_Cursor 0075                   ?_Process 00AB                   ?___awdiv 0070  
                 ?___ftadd 0030                   ?___awmod 0070                   ?___ftdiv 0030  
                 ?___ftneg 0070                   ?___ftmul 0020                   ?___ftsub 003D  
                 ?___fttol 0030                  __pstrings 0800                  _ldexp$541 004E  
                _eval_poly 0D23             __size_of_floor 0099             __size_of_ldexp 0099  
           __size_of_frexp 0040               ??_analogRead 00A2                   Lcd_Cmd@a 0073  
              ??_Lcd_Clear 0074                 _ADCON0bits 001F                __stringbase 0805  
               _ADCON1bits 009F           ??_Lcd_Write_Char 0071                 ?_eval_poly 003D  
  Process@previousDistance 00AE         __end_of_analogRead 01BD                   _Lcd_Init 0BFD  
                 _Lcd_Port 09AE   __end_of_Lcd_Write_String 0A62           __size_of_Lcd_Cmd 001A  
                frexp@eptr 0073                   Process@i 00B4                   Process@p 00B2  
         __size_of_Process 00A4           __size_of___awdiv 0059           __size_of___ftadd 0109  
         __size_of___awmod 004B           __size_of___ftdiv 00B8           __size_of___ftneg 0008  
                 ___altoft 0ACD           __size_of___ftmul 00D3           __size_of___ftsub 0021  
         __size_of___fttol 008E                   ___awtoft 09FE                   ___ftpack 0CB7  
       __end_of__stringtab 0806                   ___lltoft 0A62                   __ptext10 0E2A  
                 __ptext11 0A8D                   __ptext20 0042                   __ptext12 0D9C  
                 __ptext21 09FE                   __ptext13 0C58                   __ptext30 09C8  
                 __ptext22 0A62                   __ptext14 0ACD                   __ptext31 09AE  
                 __ptext23 0CB7                   __ptext15 0D23                   __ptext24 0BA4  
                 __ptext16 028B                   __ptext25 0A40                   __ptext17 099D  
                 __ptext26 0009                   __ptext18 0A1F                   __ptext27 0B0F  
                 __ptext19 0456                   __ptext28 0BFD                   __ptext29 0992  
        __CFG_BOR4V$BOR40V 0000              __size_of_main 0134                   exp@coeff 0806  
                 log@coeff 0824                ??_eval_poly 0043             analogRead@volt 00A3  
       Lcd_Write_Char@temp 0072                  stringcode 0800         Lcd_Set_Cursor@temp 007A  
                 stringdir 0800                   stringtab 0800  
